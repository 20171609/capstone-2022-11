"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var react_1 = __importDefault(require("react"));
var window_1 = require("../window");
var Nickname = /** @class */ (function (_super) {
    __extends(Nickname, _super);
    function Nickname() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Nickname.prototype.render = function () {
        if (this.props.localUser) {
            return (react_1["default"].createElement(MemoEditableNickname, { value: this.props.value, onChange: this.props.onChange }));
        }
        return react_1["default"].createElement(ReadOnlyNickname, { value: this.props.value });
    };
    return Nickname;
}(react_1["default"].PureComponent));
exports.Nickname = Nickname;
var MemoEditableNickname = react_1["default"].memo(EditableNickname);
function EditableNickname(props) {
    var _a = react_1["default"].useState(props.value), value = _a[0], setValue = _a[1];
    var handleChange = function (e) { return setValue(e.target.value); };
    function handleKeyPress(e) {
        if (e.key === 'Enter') {
            e.currentTarget.blur();
        }
    }
    function update() {
        var nick = value;
        if (!value) {
            setValue(window_1.nickname);
            nick = window_1.nickname;
        }
        props.onChange({
            type: 'nickname',
            payload: { nickname: nick }
        });
    }
    return (react_1["default"].createElement("input", { className: "nickname", type: "text", onChange: handleChange, onKeyPress: handleKeyPress, onBlur: update, value: value }));
}
function ReadOnlyNickname(props) {
    return react_1["default"].createElement("span", { className: "nickname" }, props.value);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmlja25hbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBvbmVudHMvTmlja25hbWUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUF5QjtBQUV6QixvQ0FBb0M7QUFRcEM7SUFBOEIsNEJBQWtDO0lBQWhFOztJQVlBLENBQUM7SUFYQyx5QkFBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUN4QixPQUFPLENBQ0wsaUNBQUMsb0JBQW9CLElBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUM3QixDQUNILENBQUE7U0FDRjtRQUNELE9BQU8saUNBQUMsZ0JBQWdCLElBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFJLENBQUE7SUFDdEQsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBWkQsQ0FBOEIsa0JBQUssQ0FBQyxhQUFhLEdBWWhEO0FBWlksNEJBQVE7QUFtQnJCLElBQU0sb0JBQW9CLEdBQUcsa0JBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUV6RCxTQUFTLGdCQUFnQixDQUFDLEtBQTRCO0lBRTlDLElBQUEsNkNBQStDLEVBQTlDLGFBQUssRUFBRSxnQkFBdUMsQ0FBQTtJQUNyRCxJQUFNLFlBQVksR0FDaEIsVUFBQyxDQUFzQyxJQUFLLE9BQUEsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQXhCLENBQXdCLENBQUE7SUFFdEUsU0FBUyxjQUFjLENBQUMsQ0FBd0M7UUFDOUQsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNyQixDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFBO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELFNBQVMsTUFBTTtRQUNiLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQTtRQUNoQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsUUFBUSxDQUFDLGlCQUFRLENBQUMsQ0FBQTtZQUNsQixJQUFJLEdBQUcsaUJBQVEsQ0FBQTtTQUNoQjtRQUNELEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDYixJQUFJLEVBQUUsVUFBVTtZQUNoQixPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1NBQzVCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxPQUFPLENBQ0wsNENBQ0UsU0FBUyxFQUFDLFVBQVUsRUFDcEIsSUFBSSxFQUFDLE1BQU0sRUFDWCxRQUFRLEVBQUUsWUFBWSxFQUN0QixVQUFVLEVBQUUsY0FBYyxFQUMxQixNQUFNLEVBQUUsTUFBTSxFQUNkLEtBQUssRUFBRSxLQUFLLEdBQ1osQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQU1ELFNBQVMsZ0JBQWdCLENBQUMsS0FBNEI7SUFDcEQsT0FBTywyQ0FBTSxTQUFTLEVBQUMsVUFBVSxJQUFFLEtBQUssQ0FBQyxLQUFLLENBQVEsQ0FBQTtBQUN4RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTmlja25hbWVNZXNzYWdlIH0gZnJvbSAnLi4vYWN0aW9ucy9QZWVyQWN0aW9ucydcbmltcG9ydCB7IG5pY2tuYW1lIH0gZnJvbSAnLi4vd2luZG93J1xuXG5leHBvcnQgaW50ZXJmYWNlIE5pY2tuYW1lUHJvcHMge1xuICB2YWx1ZTogc3RyaW5nXG4gIG9uQ2hhbmdlOiAobWVzc2FnZTogTmlja25hbWVNZXNzYWdlKSA9PiB2b2lkXG4gIGxvY2FsVXNlcj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIE5pY2tuYW1lIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxOaWNrbmFtZVByb3BzPiB7XG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5sb2NhbFVzZXIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxNZW1vRWRpdGFibGVOaWNrbmFtZVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLm9uQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gPFJlYWRPbmx5Tmlja25hbWUgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IC8+XG4gIH1cbn1cblxuaW50ZXJmYWNlIEVkaXRhYmxlTmlja25hbWVQcm9wcyB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgb25DaGFuZ2U6IChtZXNzYWdlOiBOaWNrbmFtZU1lc3NhZ2UpID0+IHZvaWRcbn1cblxuY29uc3QgTWVtb0VkaXRhYmxlTmlja25hbWUgPSBSZWFjdC5tZW1vKEVkaXRhYmxlTmlja25hbWUpXG5cbmZ1bmN0aW9uIEVkaXRhYmxlTmlja25hbWUocHJvcHM6IEVkaXRhYmxlTmlja25hbWVQcm9wcykge1xuXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUocHJvcHMudmFsdWUpXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9XG4gICAgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBzZXRWYWx1ZShlLnRhcmdldC52YWx1ZSlcblxuICBmdW5jdGlvbiBoYW5kbGVLZXlQcmVzcyhlOiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGxldCBuaWNrID0gdmFsdWVcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBzZXRWYWx1ZShuaWNrbmFtZSlcbiAgICAgIG5pY2sgPSBuaWNrbmFtZVxuICAgIH1cbiAgICBwcm9wcy5vbkNoYW5nZSh7XG4gICAgICB0eXBlOiAnbmlja25hbWUnLFxuICAgICAgcGF5bG9hZDogeyBuaWNrbmFtZTogbmljayB9LFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxpbnB1dFxuICAgICAgY2xhc3NOYW1lPVwibmlja25hbWVcIlxuICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgIG9uS2V5UHJlc3M9e2hhbmRsZUtleVByZXNzfVxuICAgICAgb25CbHVyPXt1cGRhdGV9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgLz5cbiAgKVxufVxuXG5pbnRlcmZhY2UgUmVhZE9ubHlOaWNrbmFtZVByb3BzIHtcbiAgdmFsdWU6IHN0cmluZ1xufVxuXG5mdW5jdGlvbiBSZWFkT25seU5pY2tuYW1lKHByb3BzOiBSZWFkT25seU5pY2tuYW1lUHJvcHMpIHtcbiAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT1cIm5pY2tuYW1lXCI+e3Byb3BzLnZhbHVlfTwvc3Bhbj5cbn1cbiJdfQ==
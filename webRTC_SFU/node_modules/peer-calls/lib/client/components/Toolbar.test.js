"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('../window');
var react_1 = __importDefault(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var test_utils_1 = __importDefault(require("react-dom/test-utils"));
var constants_1 = require("../constants");
var window_1 = require("../window");
var Toolbar_1 = __importDefault(require("./Toolbar"));
describe('components/Toolbar', function () {
    var ToolbarWrapper = /** @class */ (function (_super) {
        __extends(ToolbarWrapper, _super);
        function ToolbarWrapper() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                stream: null,
                desktopStream: null
            };
            return _this;
        }
        ToolbarWrapper.prototype.render = function () {
            return react_1["default"].createElement(Toolbar_1["default"], { chatVisible: this.props.chatVisible, dialState: this.props.dialState, onToggleChat: this.props.onToggleChat, onHangup: this.props.onHangup, onGetDesktopStream: this.props.onGetDesktopStream, onRemoveStream: this.props.onRemoveStream, onSendFile: this.props.onSendFile, messagesCount: this.props.messagesCount, stream: this.state.stream || this.props.stream, desktopStream: this.state.desktopStream || this.props.desktopStream });
        };
        return ToolbarWrapper;
    }(react_1["default"].PureComponent));
    var node;
    var mediaStream;
    var url;
    var onToggleChat;
    var onSendFile;
    var onHangup;
    var onGetDesktopStream;
    var onRemoveStream;
    var desktopStream;
    var dialState;
    function render() {
        return __awaiter(this, void 0, void 0, function () {
            var div, stream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dialState = constants_1.DIAL_STATE_IN_CALL;
                        mediaStream = new window_1.MediaStream();
                        onToggleChat = jest.fn();
                        onSendFile = jest.fn();
                        onHangup = jest.fn();
                        onGetDesktopStream = jest.fn().mockImplementation(function () { return Promise.resolve(); });
                        onRemoveStream = jest.fn();
                        div = document.createElement('div');
                        stream = {
                            stream: mediaStream,
                            type: constants_1.STREAM_TYPE_CAMERA,
                            url: url
                        };
                        return [4 /*yield*/, new Promise(function (resolve) {
                                react_dom_1["default"].render(react_1["default"].createElement(ToolbarWrapper, { ref: function (instance) { return resolve(instance); }, dialState: dialState, chatVisible: true, onHangup: onHangup, onToggleChat: onToggleChat, onSendFile: onSendFile, messagesCount: 1, stream: stream, desktopStream: desktopStream, onGetDesktopStream: onGetDesktopStream, onRemoveStream: onRemoveStream }), div);
                            })];
                    case 1:
                        _a.sent();
                        node = div.children[0];
                        return [2 /*return*/];
                }
            });
        });
    }
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, render()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('handleChatClick', function () {
        it('toggle chat', function () {
            expect(onToggleChat.mock.calls.length).toBe(0);
            var button = node.querySelector('.chat');
            test_utils_1["default"].Simulate.click(button);
            expect(onToggleChat.mock.calls.length).toBe(1);
        });
    });
    describe('handleMicClick', function () {
        it('toggle mic', function () {
            var button = node.querySelector('.mute-audio');
            test_utils_1["default"].Simulate.click(button);
            expect(button.classList.contains('on')).toBe(true);
        });
    });
    describe('handleCamClick', function () {
        it('toggle cam', function () {
            var button = node.querySelector('.mute-video');
            test_utils_1["default"].Simulate.click(button);
            expect(button.classList.contains('on')).toBe(true);
        });
    });
    describe('handleFullscreenClick', function () {
        it('toggle fullscreen', function () {
            var button = node.querySelector('.fullscreen');
            test_utils_1["default"].Simulate.click(button);
            expect(button.classList.contains('on')).toBe(false);
        });
    });
    describe('handleHangoutClick', function () {
        it('hangout', function () {
            var button = node.querySelector('.hangup');
            test_utils_1["default"].Simulate.click(button);
            expect(window.location.href).toBe('http://localhost/');
        });
    });
    describe('handleSendFile', function () {
        it('triggers input dialog', function () {
            var sendFileButton = node.querySelector('.send-file');
            var click = jest.fn();
            var file = node.querySelector('input[type=file]');
            file.click = click;
            test_utils_1["default"].Simulate.click(sendFileButton);
            expect(click.mock.calls.length).toBe(1);
        });
    });
    describe('handleSelectFiles', function () {
        it('iterates through files and calls onSendFile for each', function () {
            var file = node.querySelector('input[type=file]');
            var files = [{ name: 'first' }];
            test_utils_1["default"].Simulate.change(file, {
                target: {
                    files: files
                }
            });
            expect(onSendFile.mock.calls).toEqual([[files[0]]]);
        });
    });
    describe('onHangup', function () {
        it('calls onHangup callback', function () {
            expect(onHangup.mock.calls.length).toBe(0);
            var hangup = node.querySelector('.hangup');
            expect(hangup).toBeDefined();
            test_utils_1["default"].Simulate.click(hangup);
            expect(onHangup.mock.calls.length).toBe(1);
        });
    });
    describe('desktop sharing', function () {
        it('starts desktop sharing', function () { return __awaiter(void 0, void 0, void 0, function () {
            var shareDesktop;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shareDesktop = node.querySelector('.stream-desktop');
                        expect(shareDesktop).toBeDefined();
                        test_utils_1["default"].Simulate.click(shareDesktop);
                        return [4 /*yield*/, Promise.resolve()];
                    case 1:
                        _a.sent();
                        expect(onGetDesktopStream.mock.calls.length).toBe(1);
                        return [2 /*return*/];
                }
            });
        }); });
        it('stops desktop sharing', function () { return __awaiter(void 0, void 0, void 0, function () {
            var shareDesktop;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        desktopStream = {
                            stream: new window_1.MediaStream(),
                            type: constants_1.STREAM_TYPE_DESKTOP
                        };
                        return [4 /*yield*/, render()];
                    case 1:
                        _a.sent();
                        shareDesktop = node.querySelector('.stream-desktop');
                        expect(shareDesktop).toBeDefined();
                        test_utils_1["default"].Simulate.click(shareDesktop);
                        return [4 /*yield*/, Promise.resolve()];
                    case 2:
                        _a.sent();
                        expect(onRemoveStream.mock.calls.length).toBe(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbGJhci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudC9jb21wb25lbnRzL1Rvb2xiYXIudGVzdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUN0QixnREFBeUI7QUFDekIsd0RBQWdDO0FBQ2hDLG9FQUE0QztBQUc1QywwQ0FBcUc7QUFFckcsb0NBQXVDO0FBQ3ZDLHNEQUFpRDtBQUVqRCxRQUFRLENBQUMsb0JBQW9CLEVBQUU7SUFNN0I7UUFBNkIsa0NBQThDO1FBQTNFO1lBQUEscUVBbUJDO1lBbEJDLFdBQUssR0FBRztnQkFDTixNQUFNLEVBQUUsSUFBSTtnQkFDWixhQUFhLEVBQUUsSUFBSTthQUNwQixDQUFBOztRQWVILENBQUM7UUFkQywrQkFBTSxHQUFOO1lBQ0UsT0FBTyxpQ0FBQyxvQkFBTyxJQUNiLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUMvQixZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQ3JDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDN0Isa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFDakQsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUN6QyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQ2pDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFDdkMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUM5QyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQ25FLENBQUE7UUFDSixDQUFDO1FBQ0gscUJBQUM7SUFBRCxDQUFDLEFBbkJELENBQTZCLGtCQUFLLENBQUMsYUFBYSxHQW1CL0M7SUFFRCxJQUFJLElBQWEsQ0FBQTtJQUNqQixJQUFJLFdBQXdCLENBQUE7SUFDNUIsSUFBSSxHQUFXLENBQUE7SUFDZixJQUFJLFlBQW1DLENBQUE7SUFDdkMsSUFBSSxVQUEyQyxDQUFBO0lBQy9DLElBQUksUUFBK0IsQ0FBQTtJQUNuQyxJQUFJLGtCQUFnRSxDQUFBO0lBQ3BFLElBQUksY0FBd0QsQ0FBQTtJQUM1RCxJQUFJLGFBQXdDLENBQUE7SUFDNUMsSUFBSSxTQUFvQixDQUFBO0lBQ3hCLFNBQWUsTUFBTTs7Ozs7O3dCQUNuQixTQUFTLEdBQUcsOEJBQWtCLENBQUE7d0JBQzlCLFdBQVcsR0FBRyxJQUFJLG9CQUFXLEVBQUUsQ0FBQTt3QkFDL0IsWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTt3QkFDeEIsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTt3QkFDdEIsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTt3QkFDcEIsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQTt3QkFDMUUsY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTt3QkFDcEIsR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7d0JBQ25DLE1BQU0sR0FBa0I7NEJBQzVCLE1BQU0sRUFBRSxXQUFXOzRCQUNuQixJQUFJLEVBQUUsOEJBQWtCOzRCQUN4QixHQUFHLEtBQUE7eUJBQ0osQ0FBQTt3QkFDRCxxQkFBTSxJQUFJLE9BQU8sQ0FBaUIsVUFBQSxPQUFPO2dDQUN2QyxzQkFBUSxDQUFDLE1BQU0sQ0FDYixpQ0FBQyxjQUFjLElBQ2IsR0FBRyxFQUFFLFVBQUEsUUFBUSxJQUFJLE9BQUEsT0FBTyxDQUFDLFFBQVMsQ0FBQyxFQUFsQixDQUFrQixFQUNuQyxTQUFTLEVBQUUsU0FBUyxFQUNwQixXQUFXLFFBQ1gsUUFBUSxFQUFFLFFBQVEsRUFDbEIsWUFBWSxFQUFFLFlBQVksRUFDMUIsVUFBVSxFQUFFLFVBQVUsRUFDdEIsYUFBYSxFQUFFLENBQUMsRUFDaEIsTUFBTSxFQUFFLE1BQU0sRUFDZCxhQUFhLEVBQUUsYUFBYSxFQUM1QixrQkFBa0IsRUFBRSxrQkFBa0IsRUFDdEMsY0FBYyxFQUFFLGNBQWMsR0FDOUIsRUFDRixHQUFHLENBQ0osQ0FBQTs0QkFDSCxDQUFDLENBQUMsRUFBQTs7d0JBakJGLFNBaUJFLENBQUE7d0JBQ0YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7Ozs7O0tBQ3ZCO0lBRUQsVUFBVSxDQUFDOzs7d0JBQ1QscUJBQU0sTUFBTSxFQUFFLEVBQUE7O29CQUFkLFNBQWMsQ0FBQTs7OztTQUNmLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtRQUMxQixFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUUsQ0FBQTtZQUMzQyx1QkFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDaEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNoRCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQyxZQUFZLEVBQUU7WUFDZixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBRSxDQUFBO1lBQ2pELHVCQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDcEQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN6QixFQUFFLENBQUMsWUFBWSxFQUFFO1lBQ2YsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUUsQ0FBQTtZQUNqRCx1QkFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsdUJBQXVCLEVBQUU7UUFDaEMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO1lBQ3RCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFFLENBQUE7WUFDakQsdUJBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNyRCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLG9CQUFvQixFQUFFO1FBQzdCLEVBQUUsQ0FBQyxTQUFTLEVBQUU7WUFDWixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBRSxDQUFBO1lBQzdDLHVCQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUN4RCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTtZQUMxQixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBRSxDQUFBO1lBQ3hELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtZQUN2QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFFLENBQUM7WUFDcEQsSUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7WUFDM0IsdUJBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtRQUM1QixFQUFFLENBQUMsc0RBQXNELEVBQUU7WUFDekQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBRSxDQUFBO1lBQ3BELElBQU0sS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQVEsQ0FBQTtZQUN4Qyx1QkFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUM5QixNQUFNLEVBQUU7b0JBQ04sS0FBSyxPQUFBO2lCQUNDO2FBQ1QsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdkQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDbkIsRUFBRSxDQUFDLHlCQUF5QixFQUFFO1lBQzVCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDMUMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUUsQ0FBQTtZQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDNUIsdUJBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtRQUMxQixFQUFFLENBQUMsd0JBQXdCLEVBQUU7Ozs7O3dCQUNyQixZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBRSxDQUFBO3dCQUMzRCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7d0JBQ2xDLHVCQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTt3QkFDdEMscUJBQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFBOzt3QkFBdkIsU0FBdUIsQ0FBQTt3QkFDdkIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBOzs7O2FBQ3JELENBQUMsQ0FBQTtRQUNGLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTs7Ozs7d0JBQzFCLGFBQWEsR0FBRzs0QkFDZCxNQUFNLEVBQUUsSUFBSSxvQkFBVyxFQUFFOzRCQUN6QixJQUFJLEVBQUUsK0JBQW1CO3lCQUMxQixDQUFBO3dCQUNELHFCQUFNLE1BQU0sRUFBRSxFQUFBOzt3QkFBZCxTQUFjLENBQUE7d0JBQ1IsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUUsQ0FBQTt3QkFDM0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO3dCQUNsQyx1QkFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7d0JBQ3RDLHFCQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBQTs7d0JBQXZCLFNBQXVCLENBQUE7d0JBQ3ZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7Ozs7YUFDakQsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFFSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImplc3QubW9jaygnLi4vd2luZG93JylcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgVGVzdFV0aWxzIGZyb20gJ3JlYWN0LWRvbS90ZXN0LXV0aWxzJ1xuaW1wb3J0IHsgZ2V0RGVza3RvcFN0cmVhbSB9IGZyb20gJy4uL2FjdGlvbnMvTWVkaWFBY3Rpb25zJ1xuaW1wb3J0IHsgQWRkU3RyZWFtUGF5bG9hZCwgcmVtb3ZlU3RyZWFtIH0gZnJvbSAnLi4vYWN0aW9ucy9TdHJlYW1BY3Rpb25zJ1xuaW1wb3J0IHsgU1RSRUFNX1RZUEVfQ0FNRVJBLCBTVFJFQU1fVFlQRV9ERVNLVE9QLCBESUFMX1NUQVRFX0lOX0NBTEwsIERpYWxTdGF0ZSB9IGZyb20gJy4uL2NvbnN0YW50cydcbmltcG9ydCB7IFN0cmVhbVdpdGhVUkwgfSBmcm9tICcuLi9yZWR1Y2Vycy9zdHJlYW1zJ1xuaW1wb3J0IHsgTWVkaWFTdHJlYW0gfSBmcm9tICcuLi93aW5kb3cnXG5pbXBvcnQgVG9vbGJhciwgeyBUb29sYmFyUHJvcHMgfSBmcm9tICcuL1Rvb2xiYXInXG5cbmRlc2NyaWJlKCdjb21wb25lbnRzL1Rvb2xiYXInLCAoKSA9PiB7XG5cbiAgaW50ZXJmYWNlIFN0cmVhbVN0YXRlIHtcbiAgICBzdHJlYW06IEFkZFN0cmVhbVBheWxvYWQgfCBudWxsXG4gIH1cblxuICBjbGFzcyBUb29sYmFyV3JhcHBlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8VG9vbGJhclByb3BzLCBTdHJlYW1TdGF0ZT4ge1xuICAgIHN0YXRlID0ge1xuICAgICAgc3RyZWFtOiBudWxsLFxuICAgICAgZGVza3RvcFN0cmVhbTogbnVsbCxcbiAgICB9XG4gICAgcmVuZGVyICgpIHtcbiAgICAgIHJldHVybiA8VG9vbGJhclxuICAgICAgICBjaGF0VmlzaWJsZT17dGhpcy5wcm9wcy5jaGF0VmlzaWJsZX1cbiAgICAgICAgZGlhbFN0YXRlPXt0aGlzLnByb3BzLmRpYWxTdGF0ZX1cbiAgICAgICAgb25Ub2dnbGVDaGF0PXt0aGlzLnByb3BzLm9uVG9nZ2xlQ2hhdH1cbiAgICAgICAgb25IYW5ndXA9e3RoaXMucHJvcHMub25IYW5ndXB9XG4gICAgICAgIG9uR2V0RGVza3RvcFN0cmVhbT17dGhpcy5wcm9wcy5vbkdldERlc2t0b3BTdHJlYW19XG4gICAgICAgIG9uUmVtb3ZlU3RyZWFtPXt0aGlzLnByb3BzLm9uUmVtb3ZlU3RyZWFtfVxuICAgICAgICBvblNlbmRGaWxlPXt0aGlzLnByb3BzLm9uU2VuZEZpbGV9XG4gICAgICAgIG1lc3NhZ2VzQ291bnQ9e3RoaXMucHJvcHMubWVzc2FnZXNDb3VudH1cbiAgICAgICAgc3RyZWFtPXt0aGlzLnN0YXRlLnN0cmVhbSB8fCB0aGlzLnByb3BzLnN0cmVhbX1cbiAgICAgICAgZGVza3RvcFN0cmVhbT17dGhpcy5zdGF0ZS5kZXNrdG9wU3RyZWFtIHx8IHRoaXMucHJvcHMuZGVza3RvcFN0cmVhbX1cbiAgICAgIC8+XG4gICAgfVxuICB9XG5cbiAgbGV0IG5vZGU6IEVsZW1lbnRcbiAgbGV0IG1lZGlhU3RyZWFtOiBNZWRpYVN0cmVhbVxuICBsZXQgdXJsOiBzdHJpbmdcbiAgbGV0IG9uVG9nZ2xlQ2hhdDogamVzdC5Nb2NrPCgpID0+IHZvaWQ+XG4gIGxldCBvblNlbmRGaWxlOiBqZXN0Lk1vY2s8KGZpbGU6IEZpbGUpID0+IHZvaWQ+XG4gIGxldCBvbkhhbmd1cDogamVzdC5Nb2NrPCgpID0+IHZvaWQ+XG4gIGxldCBvbkdldERlc2t0b3BTdHJlYW06IGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGdldERlc2t0b3BTdHJlYW0+XG4gIGxldCBvblJlbW92ZVN0cmVhbTogamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgcmVtb3ZlU3RyZWFtPlxuICBsZXQgZGVza3RvcFN0cmVhbTogU3RyZWFtV2l0aFVSTCB8IHVuZGVmaW5lZFxuICBsZXQgZGlhbFN0YXRlOiBEaWFsU3RhdGVcbiAgYXN5bmMgZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICBkaWFsU3RhdGUgPSBESUFMX1NUQVRFX0lOX0NBTExcbiAgICBtZWRpYVN0cmVhbSA9IG5ldyBNZWRpYVN0cmVhbSgpXG4gICAgb25Ub2dnbGVDaGF0ID0gamVzdC5mbigpXG4gICAgb25TZW5kRmlsZSA9IGplc3QuZm4oKVxuICAgIG9uSGFuZ3VwID0gamVzdC5mbigpXG4gICAgb25HZXREZXNrdG9wU3RyZWFtID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSlcbiAgICBvblJlbW92ZVN0cmVhbSA9IGplc3QuZm4oKVxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgY29uc3Qgc3RyZWFtOiBTdHJlYW1XaXRoVVJMID0ge1xuICAgICAgc3RyZWFtOiBtZWRpYVN0cmVhbSxcbiAgICAgIHR5cGU6IFNUUkVBTV9UWVBFX0NBTUVSQSxcbiAgICAgIHVybCxcbiAgICB9XG4gICAgYXdhaXQgbmV3IFByb21pc2U8VG9vbGJhcldyYXBwZXI+KHJlc29sdmUgPT4ge1xuICAgICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8VG9vbGJhcldyYXBwZXJcbiAgICAgICAgICByZWY9e2luc3RhbmNlID0+IHJlc29sdmUoaW5zdGFuY2UhKX1cbiAgICAgICAgICBkaWFsU3RhdGU9e2RpYWxTdGF0ZX1cbiAgICAgICAgICBjaGF0VmlzaWJsZVxuICAgICAgICAgIG9uSGFuZ3VwPXtvbkhhbmd1cH1cbiAgICAgICAgICBvblRvZ2dsZUNoYXQ9e29uVG9nZ2xlQ2hhdH1cbiAgICAgICAgICBvblNlbmRGaWxlPXtvblNlbmRGaWxlfVxuICAgICAgICAgIG1lc3NhZ2VzQ291bnQ9ezF9XG4gICAgICAgICAgc3RyZWFtPXtzdHJlYW19XG4gICAgICAgICAgZGVza3RvcFN0cmVhbT17ZGVza3RvcFN0cmVhbX1cbiAgICAgICAgICBvbkdldERlc2t0b3BTdHJlYW09e29uR2V0RGVza3RvcFN0cmVhbX1cbiAgICAgICAgICBvblJlbW92ZVN0cmVhbT17b25SZW1vdmVTdHJlYW19XG4gICAgICAgIC8+LFxuICAgICAgICBkaXYsXG4gICAgICApXG4gICAgfSlcbiAgICBub2RlID0gZGl2LmNoaWxkcmVuWzBdXG4gIH1cblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCByZW5kZXIoKVxuICB9KVxuXG4gIGRlc2NyaWJlKCdoYW5kbGVDaGF0Q2xpY2snLCAoKSA9PiB7XG4gICAgaXQoJ3RvZ2dsZSBjaGF0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KG9uVG9nZ2xlQ2hhdC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKVxuICAgICAgY29uc3QgYnV0dG9uID0gbm9kZS5xdWVyeVNlbGVjdG9yKCcuY2hhdCcpIVxuICAgICAgVGVzdFV0aWxzLlNpbXVsYXRlLmNsaWNrKGJ1dHRvbilcbiAgICAgIGV4cGVjdChvblRvZ2dsZUNoYXQubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdoYW5kbGVNaWNDbGljaycsICgpID0+IHtcbiAgICBpdCgndG9nZ2xlIG1pYycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IG5vZGUucXVlcnlTZWxlY3RvcignLm11dGUtYXVkaW8nKSFcbiAgICAgIFRlc3RVdGlscy5TaW11bGF0ZS5jbGljayhidXR0b24pXG4gICAgICBleHBlY3QoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnb24nKSkudG9CZSh0cnVlKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2hhbmRsZUNhbUNsaWNrJywgKCkgPT4ge1xuICAgIGl0KCd0b2dnbGUgY2FtJywgKCkgPT4ge1xuICAgICAgY29uc3QgYnV0dG9uID0gbm9kZS5xdWVyeVNlbGVjdG9yKCcubXV0ZS12aWRlbycpIVxuICAgICAgVGVzdFV0aWxzLlNpbXVsYXRlLmNsaWNrKGJ1dHRvbilcbiAgICAgIGV4cGVjdChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdvbicpKS50b0JlKHRydWUpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnaGFuZGxlRnVsbHNjcmVlbkNsaWNrJywgKCkgPT4ge1xuICAgIGl0KCd0b2dnbGUgZnVsbHNjcmVlbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IG5vZGUucXVlcnlTZWxlY3RvcignLmZ1bGxzY3JlZW4nKSFcbiAgICAgIFRlc3RVdGlscy5TaW11bGF0ZS5jbGljayhidXR0b24pXG4gICAgICBleHBlY3QoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnb24nKSkudG9CZShmYWxzZSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdoYW5kbGVIYW5nb3V0Q2xpY2snLCAoKSA9PiB7XG4gICAgaXQoJ2hhbmdvdXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBidXR0b24gPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5oYW5ndXAnKSFcbiAgICAgIFRlc3RVdGlscy5TaW11bGF0ZS5jbGljayhidXR0b24pXG4gICAgICBleHBlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpLnRvQmUoJ2h0dHA6Ly9sb2NhbGhvc3QvJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdoYW5kbGVTZW5kRmlsZScsICgpID0+IHtcbiAgICBpdCgndHJpZ2dlcnMgaW5wdXQgZGlhbG9nJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VuZEZpbGVCdXR0b24gPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5zZW5kLWZpbGUnKSFcbiAgICAgIGNvbnN0IGNsaWNrID0gamVzdC5mbigpXG4gICAgICBjb25zdCBmaWxlID0gbm9kZS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPWZpbGVdJykhO1xuICAgICAgKGZpbGUgYXMgYW55KS5jbGljayA9IGNsaWNrXG4gICAgICBUZXN0VXRpbHMuU2ltdWxhdGUuY2xpY2soc2VuZEZpbGVCdXR0b24pXG4gICAgICBleHBlY3QoY2xpY2subW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdoYW5kbGVTZWxlY3RGaWxlcycsICgpID0+IHtcbiAgICBpdCgnaXRlcmF0ZXMgdGhyb3VnaCBmaWxlcyBhbmQgY2FsbHMgb25TZW5kRmlsZSBmb3IgZWFjaCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9ZmlsZV0nKSFcbiAgICAgIGNvbnN0IGZpbGVzID0gW3sgbmFtZTogJ2ZpcnN0JyB9XSBhcyBhbnlcbiAgICAgIFRlc3RVdGlscy5TaW11bGF0ZS5jaGFuZ2UoZmlsZSwge1xuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICBmaWxlcyxcbiAgICAgICAgfSBhcyBhbnksXG4gICAgICB9KVxuICAgICAgZXhwZWN0KG9uU2VuZEZpbGUubW9jay5jYWxscykudG9FcXVhbChbWyBmaWxlc1swXSBdXSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdvbkhhbmd1cCcsICgpID0+IHtcbiAgICBpdCgnY2FsbHMgb25IYW5ndXAgY2FsbGJhY2snLCAoKSA9PiB7XG4gICAgICBleHBlY3Qob25IYW5ndXAubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMClcbiAgICAgIGNvbnN0IGhhbmd1cCA9IG5vZGUucXVlcnlTZWxlY3RvcignLmhhbmd1cCcpIVxuICAgICAgZXhwZWN0KGhhbmd1cCkudG9CZURlZmluZWQoKVxuICAgICAgVGVzdFV0aWxzLlNpbXVsYXRlLmNsaWNrKGhhbmd1cClcbiAgICAgIGV4cGVjdChvbkhhbmd1cC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2Rlc2t0b3Agc2hhcmluZycsICgpID0+IHtcbiAgICBpdCgnc3RhcnRzIGRlc2t0b3Agc2hhcmluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNoYXJlRGVza3RvcCA9IG5vZGUucXVlcnlTZWxlY3RvcignLnN0cmVhbS1kZXNrdG9wJykhXG4gICAgICBleHBlY3Qoc2hhcmVEZXNrdG9wKS50b0JlRGVmaW5lZCgpXG4gICAgICBUZXN0VXRpbHMuU2ltdWxhdGUuY2xpY2soc2hhcmVEZXNrdG9wKVxuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIGV4cGVjdChvbkdldERlc2t0b3BTdHJlYW0ubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSlcbiAgICB9KVxuICAgIGl0KCdzdG9wcyBkZXNrdG9wIHNoYXJpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBkZXNrdG9wU3RyZWFtID0ge1xuICAgICAgICBzdHJlYW06IG5ldyBNZWRpYVN0cmVhbSgpLFxuICAgICAgICB0eXBlOiBTVFJFQU1fVFlQRV9ERVNLVE9QLFxuICAgICAgfVxuICAgICAgYXdhaXQgcmVuZGVyKClcbiAgICAgIGNvbnN0IHNoYXJlRGVza3RvcCA9IG5vZGUucXVlcnlTZWxlY3RvcignLnN0cmVhbS1kZXNrdG9wJykhXG4gICAgICBleHBlY3Qoc2hhcmVEZXNrdG9wKS50b0JlRGVmaW5lZCgpXG4gICAgICBUZXN0VXRpbHMuU2ltdWxhdGUuY2xpY2soc2hhcmVEZXNrdG9wKVxuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIGV4cGVjdChvblJlbW92ZVN0cmVhbS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKVxuICAgIH0pXG4gIH0pXG5cbn0pXG4iXX0=
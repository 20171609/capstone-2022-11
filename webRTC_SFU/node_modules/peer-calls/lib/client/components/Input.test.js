"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var Input_1 = __importDefault(require("./Input"));
var react_1 = __importDefault(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var test_utils_1 = __importDefault(require("react-dom/test-utils"));
describe('components/Input', function () {
    var node;
    var sendMessage;
    function render() {
        return __awaiter(this, void 0, void 0, function () {
            var div;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sendMessage = jest.fn();
                        div = document.createElement('div');
                        return [4 /*yield*/, new Promise(function (resolve) {
                                react_dom_1["default"].render(react_1["default"].createElement(Input_1["default"], { ref: function (input) { return resolve(input); }, sendMessage: sendMessage }), div);
                            })];
                    case 1:
                        _a.sent();
                        node = div.children[0];
                        return [2 /*return*/];
                }
            });
        });
    }
    var message = 'test message';
    beforeEach(function () { return render(); });
    describe('send message', function () {
        var input;
        beforeEach(function () {
            sendMessage.mockClear();
            input = node.querySelector('textarea');
        });
        describe('handleSubmit', function () {
            it('does nothing when no message', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: '' }
                });
                test_utils_1["default"].Simulate.submit(node);
                expect(sendMessage.mock.calls)
                    .toEqual([]);
            });
            it('sends a message', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: message }
                });
                test_utils_1["default"].Simulate.submit(node);
                expect(input.value).toBe('');
                expect(sendMessage.mock.calls)
                    .toEqual([[{ payload: message, type: 'text' }]]);
            });
            it('sends a nickname command', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: '/nick john' }
                });
                test_utils_1["default"].Simulate.submit(node);
                expect(sendMessage.mock.calls)
                    .toEqual([[{ payload: { nickname: 'john' }, type: 'nickname' }]]);
            });
            it('does not fail when command is empty', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: '/nick ' }
                });
                test_utils_1["default"].Simulate.submit(node);
                expect(sendMessage.mock.calls)
                    .toEqual([[{ payload: { nickname: '' }, type: 'nickname' }]]);
            });
            it('sends message when command is invalid', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: '/nick' }
                });
                test_utils_1["default"].Simulate.submit(node);
                expect(sendMessage.mock.calls)
                    .toEqual([[{ payload: '/nick', type: 'text' }]]);
            });
        });
        describe('handleKeyPress', function () {
            it('sends a message', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: message }
                });
                test_utils_1["default"].Simulate.keyPress(input, {
                    key: 'Enter'
                });
                expect(input.value).toBe('');
                expect(sendMessage.mock.calls)
                    .toEqual([[{ payload: message, type: 'text' }]]);
            });
            it('does nothing when other key pressed', function () {
                test_utils_1["default"].Simulate.keyPress(input, {
                    key: 'test'
                });
                expect(sendMessage.mock.calls.length).toBe(0);
            });
        });
        describe('handleSmileClick', function () {
            it('adds smile to message', function () {
                test_utils_1["default"].Simulate.change(input, {
                    target: { value: message }
                });
                var div = node.querySelector('.chat-controls-buttons-smile');
                test_utils_1["default"].Simulate.click(div);
                expect(input.value).toBe('test messageðŸ˜‘');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
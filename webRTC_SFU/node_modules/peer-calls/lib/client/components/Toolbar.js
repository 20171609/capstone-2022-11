"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var screenfull_1 = __importDefault(require("screenfull"));
var constants_1 = require("../constants");
var hidden = {
    display: 'none'
};
function ToolbarButton(props) {
    var blink = props.blink, on = props.on;
    var icon = !on && props.offIcon ? props.offIcon : props.icon;
    return (react_1["default"].createElement("a", { className: classnames_1["default"]('button', props.className, { blink: blink, on: on }), onClick: props.onClick, href: '#' },
        react_1["default"].createElement("span", { className: classnames_1["default"]('icon', icon) }, !!props.badge && react_1["default"].createElement("span", { className: 'badge' }, props.badge)),
        react_1["default"].createElement("span", { className: "tooltip" }, props.title)));
}
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(props) {
        var _this = _super.call(this, props) || this;
        _this.file = react_1["default"].createRef();
        _this.handleMicClick = function () {
            var stream = _this.props.stream;
            stream.stream.getAudioTracks().forEach(function (track) {
                track.enabled = !track.enabled;
            });
            _this.setState(__assign(__assign({}, _this.state), { micMuted: !_this.state.micMuted }));
        };
        _this.handleCamClick = function () {
            var stream = _this.props.stream;
            stream.stream.getVideoTracks().forEach(function (track) {
                track.enabled = !track.enabled;
            });
            _this.setState(__assign(__assign({}, _this.state), { camDisabled: !_this.state.camDisabled }));
        };
        _this.handleFullscreenClick = function () {
            if (screenfull_1["default"].isEnabled) {
                screenfull_1["default"].toggle();
                _this.setState(__assign(__assign({}, _this.state), { fullScreenEnabled: !screenfull_1["default"].isFullscreen }));
            }
        };
        _this.handleHangoutClick = function () {
            window.location.href = '/';
        };
        _this.handleSendFile = function () {
            _this.file.current.click();
        };
        _this.handleSelectFiles = function (event) {
            Array
                .from(event.target.files)
                .forEach(function (file) { return _this.props.onSendFile(file); });
        };
        _this.handleToggleChat = function () {
            _this.setState({
                readMessages: _this.props.messagesCount
            });
            _this.props.onToggleChat();
        };
        _this.handleToggleShareDesktop = function () {
            if (_this.props.desktopStream) {
                _this.props.onRemoveStream(constants_1.ME, _this.props.desktopStream.stream);
            }
            else {
                _this.props.onGetDesktopStream()["catch"](function () { });
            }
        };
        _this.state = {
            readMessages: props.messagesCount,
            camDisabled: false,
            micMuted: false,
            fullScreenEnabled: false
        };
        return _this;
    }
    Toolbar.prototype.render = function () {
        var _a = this.props, messagesCount = _a.messagesCount, stream = _a.stream;
        var unreadCount = messagesCount - this.state.readMessages;
        var hasUnread = unreadCount > 0;
        return (react_1["default"].createElement("div", { className: "toolbar active" },
            react_1["default"].createElement("input", { style: hidden, type: "file", multiple: true, ref: this.file, onChange: this.handleSelectFiles }),
            react_1["default"].createElement(ToolbarButton, { badge: unreadCount, className: 'chat', icon: 'icon-question_answer', blink: !this.props.chatVisible && hasUnread, onClick: this.handleToggleChat, on: this.props.chatVisible, title: 'Toggle Chat' }),
            react_1["default"].createElement(ToolbarButton, { className: 'send-file', icon: 'icon-file-text2', onClick: this.handleSendFile, title: 'Send File' }),
            react_1["default"].createElement(ToolbarButton, { className: 'stream-desktop', icon: 'icon-display', onClick: this.handleToggleShareDesktop, on: !!this.props.desktopStream, title: 'Share Desktop' }),
            stream && (react_1["default"].createElement(react_1["default"].Fragment, null,
                react_1["default"].createElement(ToolbarButton, { onClick: this.handleMicClick, className: 'mute-audio', on: this.state.micMuted, icon: 'icon-mic_off', offIcon: 'icon-mic', title: 'Toggle Microphone' }),
                react_1["default"].createElement(ToolbarButton, { onClick: this.handleCamClick, className: 'mute-video', on: this.state.camDisabled, icon: 'icon-videocam_off', offIcon: 'icon-videocam', title: 'Toggle Camera' }))),
            react_1["default"].createElement(ToolbarButton, { onClick: this.handleFullscreenClick, className: 'fullscreen', icon: 'icon-fullscreen_exit', offIcon: 'icon-fullscreen', on: this.state.fullScreenEnabled, title: 'Toggle Fullscreen' }),
            this.props.dialState === constants_1.DIAL_STATE_IN_CALL && (react_1["default"].createElement(ToolbarButton, { onClick: this.props.onHangup, className: 'hangup', icon: 'icon-call_end', title: "Hang Up" }))));
    };
    return Toolbar;
}(react_1["default"].PureComponent));
exports["default"] = Toolbar;
//# sourceMappingURL=data:application/json;base64,
/// <reference types="lodash" />
import React from 'react';
import Peer from 'simple-peer';
import { hangUp } from '../actions/CallActions';
import { Message } from '../actions/ChatActions';
import { getDesktopStream } from '../actions/MediaActions';
import { dismissNotification, Notification } from '../actions/NotifyActions';
import { Message as MessageType } from '../actions/PeerActions';
import { MinimizeTogglePayload, removeStream } from '../actions/StreamActions';
import * as constants from '../constants';
import { Nicknames } from '../reducers/nicknames';
import { StreamsState } from '../reducers/streams';
import { WindowStates } from '../reducers/windowStates';
export interface AppProps {
    dialState: constants.DialState;
    dismissNotification: typeof dismissNotification;
    init: () => void;
    nicknames: Nicknames;
    notifications: Record<string, Notification>;
    messages: Message[];
    messagesCount: number;
    peers: Record<string, Peer.Instance>;
    play: () => void;
    sendMessage: (message: MessageType) => void;
    streams: StreamsState;
    getDesktopStream: typeof getDesktopStream;
    removeStream: typeof removeStream;
    onSendFile: (file: File) => void;
    windowStates: WindowStates;
    minimizeToggle: (payload: MinimizeTogglePayload) => void;
    hangUp: typeof hangUp;
}
export interface AppState {
    chatVisible: boolean;
}
export default class App extends React.PureComponent<AppProps, AppState> {
    state: AppState;
    handleShowChat: () => void;
    handleHideChat: () => void;
    handleToggleChat: () => void;
    componentDidMount(): void;
    onHangup: () => void;
    getLocalStreams(): import("lodash").Dictionary<import("../reducers/streams").StreamWithURL>;
    render(): JSX.Element;
}
//# sourceMappingURL=App.d.ts.map
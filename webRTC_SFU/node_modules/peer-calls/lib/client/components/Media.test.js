"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('../window');
jest.mock('../actions/CallActions');
var react_1 = __importDefault(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var test_utils_1 = __importDefault(require("react-dom/test-utils"));
var react_redux_1 = require("react-redux");
var store_1 = require("../store");
var Media_1 = require("./Media");
var constants_1 = require("../constants");
var CallActions_1 = require("../actions/CallActions");
describe('Media', function () {
    beforeEach(function () {
        store = store_1.createStore();
        store.dispatch({
            type: constants_1.MEDIA_ENUMERATE,
            status: 'resolved',
            payload: [{
                    id: '123',
                    name: 'Audio Input',
                    type: 'audioinput'
                }, {
                    id: '456',
                    label: 'Video Input',
                    name: 'videoinput'
                }]
        });
    });
    var store;
    function render() {
        return __awaiter(this, void 0, void 0, function () {
            var div, node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        div = document.createElement('div');
                        return [4 /*yield*/, new Promise(function (resolve) {
                                react_dom_1["default"].render(react_1["default"].createElement("div", { ref: function (div) { return resolve(div); } },
                                    react_1["default"].createElement(react_redux_1.Provider, { store: store },
                                        react_1["default"].createElement(Media_1.Media, null))), div);
                            })];
                    case 1:
                        node = _a.sent();
                        return [2 /*return*/, node.children[0]];
                }
            });
        });
    }
    describe('submit', function () {
        var stream = {};
        var promise1;
        var dialPromise;
        var dialResolve;
        var dialReject;
        beforeEach(function () {
            navigator.mediaDevices.getUserMedia = function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    promise1 = Promise.resolve(stream);
                    return [2 /*return*/, promise1];
                });
            }); };
            dialPromise = new Promise(function (resolve, reject) {
                dialResolve = resolve;
                dialReject = reject;
            });
            CallActions_1.dial.mockImplementation(function () {
                dialResolve();
                return {
                    status: 'resolved',
                    type: constants_1.DIAL
                };
            });
        });
        it('retrieves audio/video stream and dials the call', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        node = (_a.sent()).querySelector('.media');
                        expect(node.tagName).toBe('FORM');
                        test_utils_1["default"].Simulate.submit(node);
                        expect(promise1).toBeDefined();
                        return [4 /*yield*/, promise1];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, dialPromise];
                    case 3:
                        _a.sent();
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_IN_CALL);
                        return [2 /*return*/];
                }
            });
        }); });
        it('dials even when stream is unavailable', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node, err, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        navigator.mediaDevices.getUserMedia = function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                promise1 = Promise.reject(new Error('test stream error'));
                                return [2 /*return*/, promise1];
                            });
                        }); };
                        return [4 /*yield*/, render()];
                    case 1:
                        node = (_a.sent()).querySelector('.media');
                        expect(node.tagName).toBe('FORM');
                        test_utils_1["default"].Simulate.submit(node);
                        expect(promise1).toBeDefined();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, promise1];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        err = e_1;
                        return [3 /*break*/, 5];
                    case 5:
                        expect(err).toBeTruthy();
                        expect(err.message).toBe('test stream error');
                        return [4 /*yield*/, dialPromise];
                    case 6:
                        _a.sent();
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_IN_CALL);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns  to hung up state when dialling fails', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node, err, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        CallActions_1.dial.mockImplementation(function () {
                            dialReject(new Error('test dial error'));
                            return {
                                status: 'rejected',
                                type: constants_1.DIAL
                            };
                        });
                        return [4 /*yield*/, render()];
                    case 1:
                        node = (_a.sent()).querySelector('.media');
                        expect(node.tagName).toBe('FORM');
                        test_utils_1["default"].Simulate.submit(node);
                        expect(promise1).toBeDefined();
                        return [4 /*yield*/, promise1];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, dialPromise];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_2 = _a.sent();
                        err = e_2;
                        return [3 /*break*/, 6];
                    case 6:
                        expect(err).toBeTruthy();
                        expect(err.message).toBe('test dial error');
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_HUNG_UP);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('onVideoChange', function () {
        it('calls onSetVideoConstraint', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node, select;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        node = _a.sent();
                        select = node.querySelector('select[name=video-input]');
                        test_utils_1["default"].Simulate.change(select, {
                            target: {
                                value: '{"deviceId":123}'
                            }
                        });
                        expect(store.getState().media.video).toEqual({ deviceId: 123 });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('onAudioChange', function () {
        it('calls onSetAudioConstraint', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node, select;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        node = _a.sent();
                        select = node.querySelector('select[name="audio-input"]');
                        test_utils_1["default"].Simulate.change(select, {
                            target: {
                                value: '{"deviceId":456}'
                            }
                        });
                        expect(store.getState().media.audio).toEqual({ deviceId: 456 });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('onNicknameChange', function () {
        it('changes nickname', function () { return __awaiter(void 0, void 0, void 0, function () {
            var node, nickname;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        node = _a.sent();
                        nickname = node.querySelector('input[name="nickname"]');
                        test_utils_1["default"].Simulate.change(nickname, {
                            target: {
                                value: 'john123'
                            }
                        });
                        expect(store.getState().nicknames[constants_1.ME]).toEqual('john123');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;base64,
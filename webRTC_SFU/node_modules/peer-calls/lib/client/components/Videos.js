"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var react_1 = __importDefault(require("react"));
var forEach_1 = __importDefault(require("lodash/forEach"));
var constants_1 = require("../constants");
var nickname_1 = require("../nickname");
var Video_1 = __importDefault(require("./Video"));
var windowStates_1 = require("../reducers/windowStates");
var Videos = /** @class */ (function (_super) {
    __extends(Videos, _super);
    function Videos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Videos.prototype.getStreams = function () {
        var _a = this.props, windowStates = _a.windowStates, peers = _a.peers, streams = _a.streams;
        var minimized = [];
        var maximized = [];
        function addStreamProps(props) {
            if (props.windowState === 'minimized') {
                minimized.push(props);
            }
            else {
                maximized.push(props);
            }
        }
        function addStreamsByUser(userId) {
            var localUser = userId === constants_1.ME;
            var userStreams = streams[userId];
            if (!userStreams) {
                var key = windowStates_1.getStreamKey(userId, undefined);
                var props = {
                    key: key,
                    userId: userId,
                    localUser: localUser,
                    windowState: windowStates[key]
                };
                addStreamProps(props);
                return;
            }
            userStreams.streams.forEach(function (stream, i) {
                var key = windowStates_1.getStreamKey(userId, stream.stream.id);
                var props = {
                    key: key,
                    stream: stream,
                    userId: userId,
                    mirrored: localUser && stream.type === 'camera',
                    muted: localUser,
                    localUser: localUser,
                    windowState: windowStates[key]
                };
                addStreamProps(props);
            });
        }
        addStreamsByUser(constants_1.ME);
        forEach_1["default"](peers, function (_, userId) { return addStreamsByUser(userId); });
        return { minimized: minimized, maximized: maximized };
    };
    Videos.prototype.render = function () {
        var _this = this;
        var _a = this.getStreams(), minimized = _a.minimized, maximized = _a.maximized;
        var videosToolbar = (react_1["default"].createElement("div", { className: "videos videos-toolbar", key: "videos-toolbar" }, minimized.map(function (props) { return (react_1["default"].createElement(Video_1["default"], __assign({}, props, { key: props.key, onMinimizeToggle: _this.props.onMinimizeToggle, play: _this.props.play, nickname: nickname_1.getNickname(_this.props.nicknames, props.userId), onChangeNickname: _this.props.onChangeNickname }))); })));
        var videosGrid = (react_1["default"].createElement("div", { className: "videos videos-grid", key: "videos-grid" }, maximized.map(function (props) { return (react_1["default"].createElement(Video_1["default"], __assign({}, props, { key: props.key, onMinimizeToggle: _this.props.onMinimizeToggle, play: _this.props.play, nickname: nickname_1.getNickname(_this.props.nicknames, props.userId), onChangeNickname: _this.props.onChangeNickname }))); })));
        return [videosToolbar, videosGrid];
    };
    return Videos;
}(react_1["default"].PureComponent));
exports["default"] = Videos;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var Input_1 = __importDefault(require("./Input"));
var constants_1 = require("../constants");
var nickname_1 = require("../nickname");
function MessageEntry(props) {
    var message = props.message;
    return (react_1["default"].createElement("p", { className: "message-text" },
        message.image && (react_1["default"].createElement("img", { src: message.image, width: "100%" })),
        message.message));
}
var Chat = /** @class */ (function (_super) {
    __extends(Chat, _super);
    function Chat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.chatHistoryRef = react_1["default"].createRef();
        _this.inputRef = react_1["default"].createRef();
        _this.scrollToBottom = function () {
            var chatHistoryRef = _this.chatHistoryRef.current;
            chatHistoryRef.scrollTop = chatHistoryRef.scrollHeight;
        };
        return _this;
    }
    Chat.prototype.componentDidMount = function () {
        this.scrollToBottom();
        this.focus();
    };
    Chat.prototype.componentDidUpdate = function () {
        this.scrollToBottom();
        this.focus();
    };
    Chat.prototype.focus = function () {
        var _a, _b;
        if (this.props.visible) {
            (_b = (_a = this.inputRef.current) === null || _a === void 0 ? void 0 : _a.textArea.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
    };
    Chat.prototype.render = function () {
        var _this = this;
        var _a = this.props, messages = _a.messages, sendMessage = _a.sendMessage;
        return (react_1["default"].createElement("div", { className: classnames_1["default"]('chat-container', {
                show: this.props.visible
            }) },
            react_1["default"].createElement("div", { className: "chat-header" },
                react_1["default"].createElement("div", { className: "chat-close", onClick: this.props.onClose },
                    react_1["default"].createElement("div", { className: "button button-icon" },
                        react_1["default"].createElement("span", { className: "icon icon-arrow_forward" }))),
                react_1["default"].createElement("div", { className: "chat-title" }, "Chat")),
            react_1["default"].createElement("div", { className: "chat-history", ref: this.chatHistoryRef }, messages.length ? (messages.map(function (message, i) { return (react_1["default"].createElement("div", { key: i }, message.userId === constants_1.ME ? (react_1["default"].createElement("div", { className: "chat-item chat-item-me" },
                react_1["default"].createElement("div", { className: "message" },
                    react_1["default"].createElement("span", { className: "message-user-name" }, nickname_1.getNickname(_this.props.nicknames, message.userId)),
                    react_1["default"].createElement("span", { className: "icon icon-schedule" }),
                    react_1["default"].createElement("time", { className: "message-time" }, message.timestamp),
                    react_1["default"].createElement(MessageEntry, { message: message })),
                message.image ? (react_1["default"].createElement("img", { className: "chat-item-img", src: message.image })) : (react_1["default"].createElement("span", { className: "chat-item-img icon icon-face" })))) : (react_1["default"].createElement("div", { className: "chat-item chat-item-other" },
                message.image ? (react_1["default"].createElement("img", { className: "chat-item-img", src: message.image })) : (react_1["default"].createElement("span", { className: "chat-item-img icon icon-face" })),
                react_1["default"].createElement("div", { className: "message" },
                    react_1["default"].createElement("span", { className: "message-user-name" }, nickname_1.getNickname(_this.props.nicknames, message.userId)),
                    react_1["default"].createElement("span", { className: "icon icon-schedule" }),
                    react_1["default"].createElement("time", { className: "message-time" }, message.timestamp),
                    react_1["default"].createElement(MessageEntry, { message: message })))))); })) : (react_1["default"].createElement("div", { className: "chat-empty" },
                react_1["default"].createElement("span", { className: "chat-empty-icon icon icon-question_answer" }),
                react_1["default"].createElement("div", { className: "chat-empty-message" }, "No Notifications")))),
            react_1["default"].createElement(Input_1["default"], { ref: this.inputRef, sendMessage: sendMessage })));
    };
    return Chat;
}(react_1["default"].PureComponent));
exports["default"] = Chat;
//# sourceMappingURL=data:application/json;base64,
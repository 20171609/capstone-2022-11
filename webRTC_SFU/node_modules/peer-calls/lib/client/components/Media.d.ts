import React from 'react';
import { setAudioConstraint, setVideoConstraint, getMediaStream, enumerateDevices, play } from '../actions/MediaActions';
import { MediaState } from '../reducers/media';
import { info, warning, error } from '../actions/NotifyActions';
import { DialState } from '../constants';
import { dial } from '../actions/CallActions';
import { setNickname } from '../actions/NicknameActions';
export declare type MediaProps = MediaState & {
    dial: typeof dial;
    dialState: DialState;
    visible: boolean;
    enumerateDevices: typeof enumerateDevices;
    onSetVideoConstraint: typeof setVideoConstraint;
    onSetAudioConstraint: typeof setAudioConstraint;
    getMediaStream: typeof getMediaStream;
    play: typeof play;
    logInfo: typeof info;
    logWarning: typeof warning;
    logError: typeof error;
    onSetNickname: typeof setNickname;
    nickname?: string;
};
export declare class MediaForm extends React.PureComponent<MediaProps> {
    componentDidMount(): void;
    handleSubmit: (event: React.FormEvent<HTMLFormElement>) => Promise<void>;
    handleVideoChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;
    handleAudioChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;
    handleNicknameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    render(): JSX.Element | null;
}
export interface AutoplayProps {
    play: () => void;
}
export declare const AutoplayMessage: React.NamedExoticComponent<AutoplayProps>;
export declare const Media: import("react-redux").ConnectedComponent<React.NamedExoticComponent<MediaProps>, Pick<MediaProps, never>>;
//# sourceMappingURL=Media.d.ts.map
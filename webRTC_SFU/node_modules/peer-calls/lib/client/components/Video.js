"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var Nickname_1 = require("./Nickname");
var Dropdown_1 = require("./Dropdown");
var Video = /** @class */ (function (_super) {
    __extends(Video, _super);
    function Video() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.videoRef = react_1["default"].createRef();
        _this.handleClick = function (e) {
            _this.props.play();
        };
        _this.handleMinimize = function () {
            _this.props.onMinimizeToggle({
                userId: _this.props.userId,
                streamId: _this.props.stream && _this.props.stream.stream.id
            });
        };
        _this.handleToggleCover = function () {
            var v = _this.videoRef.current;
            if (v) {
                v.style.objectFit = v.style.objectFit ? '' : 'contain';
            }
        };
        return _this;
    }
    Video.prototype.componentDidMount = function () {
        this.componentDidUpdate();
    };
    Video.prototype.componentDidUpdate = function () {
        var stream = this.props.stream;
        var video = this.videoRef.current;
        var mediaStream = stream && stream.stream || null;
        var url = stream && stream.url;
        if ('srcObject' in video) {
            if (video.srcObject !== mediaStream) {
                video.srcObject = mediaStream;
            }
        }
        else if (video.src !== url) {
            video.src = url || '';
        }
    };
    Video.prototype.render = function () {
        var _this = this;
        var _a = this.props, mirrored = _a.mirrored, muted = _a.muted, userId = _a.userId, windowState = _a.windowState;
        var className = classnames_1["default"]('video-container', {
            minimized: windowState === 'minimized',
            mirrored: mirrored
        });
        return (react_1["default"].createElement("div", { className: className },
            react_1["default"].createElement("video", { id: "video-" + userId, autoPlay: true, onClick: this.handleClick, onLoadedMetadata: function () { return _this.props.play(); }, playsInline: true, ref: this.videoRef, muted: muted }),
            react_1["default"].createElement("div", { className: 'video-footer' },
                react_1["default"].createElement(Nickname_1.Nickname, { value: this.props.nickname, onChange: this.props.onChangeNickname, localUser: this.props.localUser }),
                react_1["default"].createElement(Dropdown_1.Dropdown, { label: 'â˜°' },
                    react_1["default"].createElement("li", { className: 'action-minimize', onClick: this.handleMinimize }, "Toggle Minimize"),
                    react_1["default"].createElement("li", { className: 'action-toggle-fit', onClick: this.handleToggleCover }, "Toggle Fit")))));
    };
    Video.defaultProps = {
        muted: false,
        mirrored: false
    };
    return Video;
}(react_1["default"].PureComponent));
exports["default"] = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBvbmVudHMvVmlkZW8udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUFnRDtBQUNoRCwwREFBbUM7QUFHbkMsdUNBQXFDO0FBQ3JDLHVDQUFxQztBQWlCckM7SUFBbUMseUJBQStCO0lBQWxFO1FBQUEscUVBMkVDO1FBMUVDLGNBQVEsR0FBRyxrQkFBSyxDQUFDLFNBQVMsRUFBb0IsQ0FBQTtRQU05QyxpQkFBVyxHQUF3QyxVQUFBLENBQUM7WUFDbEQsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNuQixDQUFDLENBQUE7UUFpQkQsb0JBQWMsR0FBRztZQUNmLEtBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzFCLE1BQU0sRUFBRSxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0JBQ3pCLFFBQVEsRUFBRSxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTthQUMzRCxDQUFDLENBQUE7UUFDSixDQUFDLENBQUE7UUFDRCx1QkFBaUIsR0FBRztZQUNsQixJQUFNLENBQUMsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQTtZQUMvQixJQUFJLENBQUMsRUFBRTtnQkFDTCxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7YUFDdkQ7UUFDSCxDQUFDLENBQUE7O0lBc0NILENBQUM7SUFqRUMsaUNBQWlCLEdBQWpCO1FBQ0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUNELGtDQUFrQixHQUFsQjtRQUNVLElBQUEsMEJBQU0sQ0FBZTtRQUM3QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQVEsQ0FBQTtRQUNwQyxJQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUE7UUFDbkQsSUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUE7UUFDaEMsSUFBSSxXQUFXLElBQUksS0FBZ0IsRUFBRTtZQUNuQyxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssV0FBVyxFQUFFO2dCQUNuQyxLQUFLLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQTthQUM5QjtTQUNGO2FBQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtZQUM1QixLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUE7U0FDdEI7SUFDSCxDQUFDO0lBYUQsc0JBQU0sR0FBTjtRQUFBLGlCQW9DQztRQW5DTyxJQUFBLGVBQXFELEVBQW5ELHNCQUFRLEVBQUUsZ0JBQUssRUFBRSxrQkFBTSxFQUFFLDRCQUEwQixDQUFBO1FBQzNELElBQU0sU0FBUyxHQUFHLHVCQUFVLENBQUMsaUJBQWlCLEVBQUU7WUFDOUMsU0FBUyxFQUFFLFdBQVcsS0FBSyxXQUFXO1lBQ3RDLFFBQVEsVUFBQTtTQUNULENBQUMsQ0FBQTtRQUdGLE9BQU8sQ0FDTCwwQ0FBSyxTQUFTLEVBQUUsU0FBUztZQUN2Qiw0Q0FDRSxFQUFFLEVBQUUsV0FBUyxNQUFRLEVBQ3JCLFFBQVEsUUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFDekIsZ0JBQWdCLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQWpCLENBQWlCLEVBQ3pDLFdBQVcsUUFDWCxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFDbEIsS0FBSyxFQUFFLEtBQUssR0FDWjtZQUNGLDBDQUFLLFNBQVMsRUFBQyxjQUFjO2dCQUMzQixpQ0FBQyxtQkFBUSxJQUNQLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDMUIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FDL0I7Z0JBQ0YsaUNBQUMsbUJBQVEsSUFBQyxLQUFLLEVBQUUsR0FBRztvQkFDbEIseUNBQUksU0FBUyxFQUFDLGlCQUFpQixFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxzQkFFdkQ7b0JBQ0wseUNBQUksU0FBUyxFQUFDLG1CQUFtQixFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLGlCQUU1RCxDQUNJLENBQ1AsQ0FDRixDQUNQLENBQUE7SUFDSCxDQUFDO0lBdkVNLGtCQUFZLEdBQUc7UUFDcEIsS0FBSyxFQUFFLEtBQUs7UUFDWixRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFBO0lBcUVILFlBQUM7Q0FBQSxBQTNFRCxDQUFtQyxrQkFBSyxDQUFDLGFBQWEsR0EyRXJEO3FCQTNFb0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdEV2ZW50SGFuZGxlciB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IFN0cmVhbVdpdGhVUkwgfSBmcm9tICcuLi9yZWR1Y2Vycy9zdHJlYW1zJ1xuaW1wb3J0IHsgTmlja25hbWVNZXNzYWdlIH0gZnJvbSAnLi4vYWN0aW9ucy9QZWVyQWN0aW9ucydcbmltcG9ydCB7IE5pY2tuYW1lIH0gZnJvbSAnLi9OaWNrbmFtZSdcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSAnLi9Ecm9wZG93bidcbmltcG9ydCB7IFdpbmRvd1N0YXRlIH0gZnJvbSAnLi4vcmVkdWNlcnMvd2luZG93U3RhdGVzJ1xuaW1wb3J0IHsgTWluaW1pemVUb2dnbGVQYXlsb2FkIH0gZnJvbSAnLi4vYWN0aW9ucy9TdHJlYW1BY3Rpb25zJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvUHJvcHMge1xuICBvbk1pbmltaXplVG9nZ2xlOiAocGF5bG9hZDogTWluaW1pemVUb2dnbGVQYXlsb2FkKSA9PiB2b2lkXG4gIG9uQ2hhbmdlTmlja25hbWU6IChtZXNzYWdlOiBOaWNrbmFtZU1lc3NhZ2UpID0+IHZvaWRcbiAgbmlja25hbWU6IHN0cmluZ1xuICB3aW5kb3dTdGF0ZTogV2luZG93U3RhdGVcbiAgc3RyZWFtPzogU3RyZWFtV2l0aFVSTFxuICB1c2VySWQ6IHN0cmluZ1xuICBtdXRlZDogYm9vbGVhblxuICBtaXJyb3JlZDogYm9vbGVhblxuICBwbGF5OiAoKSA9PiB2b2lkXG4gIGxvY2FsVXNlcj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlkZW8gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFZpZGVvUHJvcHM+IHtcbiAgdmlkZW9SZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTFZpZGVvRWxlbWVudD4oKVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbXV0ZWQ6IGZhbHNlLFxuICAgIG1pcnJvcmVkOiBmYWxzZSxcbiAgfVxuICBoYW5kbGVDbGljazogUmVhY3RFdmVudEhhbmRsZXI8SFRNTFZpZGVvRWxlbWVudD4gPSBlID0+IHtcbiAgICB0aGlzLnByb3BzLnBsYXkoKVxuICB9XG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpXG4gIH1cbiAgY29tcG9uZW50RGlkVXBkYXRlICgpIHtcbiAgICBjb25zdCB7IHN0cmVhbSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHZpZGVvID0gdGhpcy52aWRlb1JlZi5jdXJyZW50IVxuICAgIGNvbnN0IG1lZGlhU3RyZWFtID0gc3RyZWFtICYmIHN0cmVhbS5zdHJlYW0gfHwgbnVsbFxuICAgIGNvbnN0IHVybCA9IHN0cmVhbSAmJiBzdHJlYW0udXJsXG4gICAgaWYgKCdzcmNPYmplY3QnIGluIHZpZGVvIGFzIHVua25vd24pIHtcbiAgICAgIGlmICh2aWRlby5zcmNPYmplY3QgIT09IG1lZGlhU3RyZWFtKSB7XG4gICAgICAgIHZpZGVvLnNyY09iamVjdCA9IG1lZGlhU3RyZWFtXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2aWRlby5zcmMgIT09IHVybCkge1xuICAgICAgdmlkZW8uc3JjID0gdXJsIHx8ICcnXG4gICAgfVxuICB9XG4gIGhhbmRsZU1pbmltaXplID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25NaW5pbWl6ZVRvZ2dsZSh7XG4gICAgICB1c2VySWQ6IHRoaXMucHJvcHMudXNlcklkLFxuICAgICAgc3RyZWFtSWQ6IHRoaXMucHJvcHMuc3RyZWFtICYmIHRoaXMucHJvcHMuc3RyZWFtLnN0cmVhbS5pZCxcbiAgICB9KVxuICB9XG4gIGhhbmRsZVRvZ2dsZUNvdmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHYgPSB0aGlzLnZpZGVvUmVmLmN1cnJlbnRcbiAgICBpZiAodikge1xuICAgICAgdi5zdHlsZS5vYmplY3RGaXQgPSB2LnN0eWxlLm9iamVjdEZpdCA/ICcnIDogJ2NvbnRhaW4nXG4gICAgfVxuICB9XG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBtaXJyb3JlZCwgbXV0ZWQsIHVzZXJJZCwgd2luZG93U3RhdGUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCd2aWRlby1jb250YWluZXInLCB7XG4gICAgICBtaW5pbWl6ZWQ6IHdpbmRvd1N0YXRlID09PSAnbWluaW1pemVkJyxcbiAgICAgIG1pcnJvcmVkLFxuICAgIH0pXG5cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgICAgPHZpZGVvXG4gICAgICAgICAgaWQ9e2B2aWRlby0ke3VzZXJJZH1gfVxuICAgICAgICAgIGF1dG9QbGF5XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgICBvbkxvYWRlZE1ldGFkYXRhPXsoKSA9PiB0aGlzLnByb3BzLnBsYXkoKX1cbiAgICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICAgIHJlZj17dGhpcy52aWRlb1JlZn1cbiAgICAgICAgICBtdXRlZD17bXV0ZWR9XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSd2aWRlby1mb290ZXInPlxuICAgICAgICAgIDxOaWNrbmFtZVxuICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMubmlja25hbWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZU5pY2tuYW1lfVxuICAgICAgICAgICAgbG9jYWxVc2VyPXt0aGlzLnByb3BzLmxvY2FsVXNlcn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxEcm9wZG93biBsYWJlbD17J+KYsCd9PlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nYWN0aW9uLW1pbmltaXplJyBvbkNsaWNrPXt0aGlzLmhhbmRsZU1pbmltaXplfT5cbiAgICAgICAgICAgICAgVG9nZ2xlIE1pbmltaXplXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nYWN0aW9uLXRvZ2dsZS1maXQnIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlQ292ZXJ9PlxuICAgICAgICAgICAgICBUb2dnbGUgRml0XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iXX0=
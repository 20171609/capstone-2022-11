"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var constants = __importStar(require("../constants"));
var NotifyActions_1 = require("../actions/NotifyActions");
var async_1 = require("../async");
var defaultState = {};
function notifications(state, action) {
    if (state === void 0) { state = defaultState; }
    if (async_1.isRejectedAction(action)) {
        action = NotifyActions_1.error('' + action.payload);
    }
    return handleNotifications(state, action);
}
exports["default"] = notifications;
function handleNotifications(state, action) {
    var _a;
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case constants.NOTIFY:
            return __assign(__assign({}, state), (_a = {}, _a[action.payload.id] = action.payload, _a));
        case constants.NOTIFY_DISMISS:
            return Object
                .keys(state)
                .filter(function (key) { return key !== action.payload.id; })
                .reduce(function (obj, key) {
                obj[key] = state[key];
                return obj;
            }, {});
        case constants.NOTIFY_CLEAR:
            return defaultState;
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvcmVkdWNlcnMvbm90aWZpY2F0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNEQUF5QztBQUN6QywwREFBc0Y7QUFDdEYsa0NBQTJDO0FBSzNDLElBQU0sWUFBWSxHQUFzQixFQUFFLENBQUE7QUFFMUMsU0FBd0IsYUFBYSxDQUNuQyxLQUFvQixFQUNwQixNQUFpQjtJQURqQixzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixJQUFJLHdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLE1BQU0sR0FBRyxxQkFBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDcEM7SUFDRCxPQUFPLG1CQUFtQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUMzQyxDQUFDO0FBUkQsbUNBUUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixLQUFvQixFQUNwQixNQUE4Qjs7SUFEOUIsc0JBQUEsRUFBQSxvQkFBb0I7SUFHcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssU0FBUyxDQUFDLE1BQU07WUFDbkIsNkJBQ0ssS0FBSyxnQkFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBRyxNQUFNLENBQUMsT0FBTyxPQUNwQztRQUNILEtBQUssU0FBUyxDQUFDLGNBQWM7WUFDM0IsT0FBTyxNQUFNO2lCQUNaLElBQUksQ0FBQyxLQUFLLENBQUM7aUJBQ1gsTUFBTSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUF6QixDQUF5QixDQUFDO2lCQUN4QyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRztnQkFDZixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNyQixPQUFPLEdBQUcsQ0FBQTtZQUNaLENBQUMsRUFBRSxFQUF1QixDQUFDLENBQUE7UUFDN0IsS0FBSyxTQUFTLENBQUMsWUFBWTtZQUN6QixPQUFPLFlBQVksQ0FBQTtRQUNyQjtZQUNFLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cydcbmltcG9ydCB7IGVycm9yLCBOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvbkFjdGlvblR5cGUgfSBmcm9tICcuLi9hY3Rpb25zL05vdGlmeUFjdGlvbnMnXG5pbXBvcnQgeyBpc1JlamVjdGVkQWN0aW9uIH0gZnJvbSAnLi4vYXN5bmMnXG5pbXBvcnQgeyBBbnlBY3Rpb24gfSBmcm9tICdyZWR1eCdcblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBOb3RpZmljYXRpb24+XG5cbmNvbnN0IGRlZmF1bHRTdGF0ZTogTm90aWZpY2F0aW9uU3RhdGUgPSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3RpZmljYXRpb25zIChcbiAgc3RhdGUgPSBkZWZhdWx0U3RhdGUsXG4gIGFjdGlvbjogQW55QWN0aW9uLFxuKSB7XG4gIGlmIChpc1JlamVjdGVkQWN0aW9uKGFjdGlvbikpIHtcbiAgICBhY3Rpb24gPSBlcnJvcignJyArIGFjdGlvbi5wYXlsb2FkKVxuICB9XG4gIHJldHVybiBoYW5kbGVOb3RpZmljYXRpb25zKHN0YXRlLCBhY3Rpb24pXG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5vdGlmaWNhdGlvbnMgKFxuICBzdGF0ZSA9IGRlZmF1bHRTdGF0ZSxcbiAgYWN0aW9uOiBOb3RpZmljYXRpb25BY3Rpb25UeXBlLFxuKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGNvbnN0YW50cy5OT1RJRlk6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgW2FjdGlvbi5wYXlsb2FkLmlkXTogYWN0aW9uLnBheWxvYWQsXG4gICAgICB9XG4gICAgY2FzZSBjb25zdGFudHMuTk9USUZZX0RJU01JU1M6XG4gICAgICByZXR1cm4gT2JqZWN0XG4gICAgICAua2V5cyhzdGF0ZSlcbiAgICAgIC5maWx0ZXIoa2V5ID0+IGtleSAhPT0gYWN0aW9uLnBheWxvYWQuaWQpXG4gICAgICAucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IHN0YXRlW2tleV1cbiAgICAgICAgcmV0dXJuIG9ialxuICAgICAgfSwge30gYXMgTm90aWZpY2F0aW9uU3RhdGUpXG4gICAgY2FzZSBjb25zdGFudHMuTk9USUZZX0NMRUFSOlxuICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuIl19
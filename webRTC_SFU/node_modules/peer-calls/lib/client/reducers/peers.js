"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var debug_1 = __importDefault(require("debug"));
var forEach_1 = __importDefault(require("lodash/forEach"));
var omit_1 = __importDefault(require("lodash/omit"));
var constants = __importStar(require("../constants"));
var debug = debug_1["default"]('peercalls');
var defaultState = {};
var localStreams = {
    camera: undefined,
    desktop: undefined
};
function removeTrackFromPeer(peer, track, stream) {
    try {
        peer.removeTrack(track, stream);
    }
    catch (err) {
        debug('peer.removeTrack: %s', err);
    }
}
function handleRemoveStream(state, action) {
    var stream = action.payload.stream;
    if (action.payload.userId === constants.ME) {
        forEach_1["default"](state, function (peer) {
            stream.getTracks().forEach(function (track) {
                removeTrackFromPeer(peer, track, stream);
            });
        });
    }
    return state;
}
function handleMediaStream(state, action) {
    if (action.status !== 'resolved') {
        return state;
    }
    var streamType = action.payload.type;
    if (action.payload.userId === constants.ME &&
        streamType) {
        forEach_1["default"](state, function (peer) {
            var localStream = localStreams[streamType];
            localStream && localStream.getTracks().forEach(function (track) {
                removeTrackFromPeer(peer, track, localStream);
            });
            var stream = action.payload.stream;
            stream.getTracks().forEach(function (track) {
                peer.addTrack(track, stream);
            });
        });
        localStreams[streamType] = action.payload.stream;
    }
    return state;
}
function peers(state, action) {
    var _a;
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case constants.PEER_ADD:
            return __assign(__assign({}, state), (_a = {}, _a[action.payload.userId] = action.payload.peer, _a));
        case constants.PEER_REMOVE:
            return omit_1["default"](state, [action.payload.userId]);
        case constants.HANG_UP:
            localStreams = {
                camera: undefined,
                desktop: undefined
            };
            setTimeout(function () {
                forEach_1["default"](state, function (peer) { return peer.destroy(); });
            });
            return defaultState;
        case constants.STREAM_REMOVE:
            return handleRemoveStream(state, action);
        case constants.MEDIA_STREAM:
            return handleMediaStream(state, action);
        default:
            return state;
    }
}
exports["default"] = peers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3JlZHVjZXJzL3BlZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQTBCO0FBQzFCLDJEQUFvQztBQUNwQyxxREFBOEI7QUFHOUIsc0RBQXlDO0FBS3pDLElBQU0sS0FBSyxHQUFHLGtCQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFJakMsSUFBTSxZQUFZLEdBQWUsRUFBRSxDQUFBO0FBRW5DLElBQUksWUFBWSxHQUFnRDtJQUM5RCxNQUFNLEVBQUUsU0FBUztJQUNqQixPQUFPLEVBQUUsU0FBUztDQUNuQixDQUFBO0FBRUQsU0FBUyxtQkFBbUIsQ0FDMUIsSUFBbUIsRUFDbkIsS0FBdUIsRUFDdkIsTUFBbUI7SUFFbkIsSUFBSTtRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0tBQ2hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixLQUFLLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUE7S0FDbkM7QUFDSCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsS0FBaUIsRUFDakIsTUFBMEI7SUFFMUIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7SUFDcEMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsRUFBRSxFQUFFO1FBQzFDLG9CQUFPLENBQUMsS0FBSyxFQUFFLFVBQUEsSUFBSTtZQUNqQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztnQkFDOUIsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUMxQyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0tBQ0g7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixLQUFpQixFQUNqQixNQUF5QjtJQUV6QixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQ2hDLE9BQU8sS0FBSyxDQUFBO0tBQ2I7SUFDRCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQTtJQUN0QyxJQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxFQUFFO1FBQ3RDLFVBQVUsRUFDVjtRQUNBLG9CQUFPLENBQUMsS0FBSyxFQUFFLFVBQUEsSUFBSTtZQUNqQixJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDNUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO2dCQUNsRCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFBO1lBQy9DLENBQUMsQ0FBQyxDQUFBO1lBQ0YsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7WUFDcEMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7UUFDRixZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7S0FDakQ7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFFRCxTQUF3QixLQUFLLENBQzNCLEtBQW9CLEVBQ3BCLE1BQTBFOztJQUQxRSxzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxTQUFTLENBQUMsUUFBUTtZQUNyQiw2QkFDSyxLQUFLLGdCQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUM3QztRQUNILEtBQUssU0FBUyxDQUFDLFdBQVc7WUFDeEIsT0FBTyxpQkFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUM3QyxLQUFLLFNBQVMsQ0FBQyxPQUFPO1lBQ3BCLFlBQVksR0FBRztnQkFDYixNQUFNLEVBQUUsU0FBUztnQkFDakIsT0FBTyxFQUFFLFNBQVM7YUFDbkIsQ0FBQTtZQUNELFVBQVUsQ0FBQztnQkFDVCxvQkFBTyxDQUFDLEtBQUssRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBZCxDQUFjLENBQUMsQ0FBQTtZQUN4QyxDQUFDLENBQUMsQ0FBQTtZQUNGLE9BQU8sWUFBWSxDQUFBO1FBQ3JCLEtBQUssU0FBUyxDQUFDLGFBQWE7WUFDMUIsT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDMUMsS0FBSyxTQUFTLENBQUMsWUFBWTtZQUN6QixPQUFPLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN6QztZQUNFLE9BQU8sS0FBSyxDQUFBO0tBQ2Y7QUFDSCxDQUFDO0FBNUJELDJCQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVidWcgZnJvbSAnZGVidWcnXG5pbXBvcnQgZm9yRWFjaCBmcm9tICdsb2Rhc2gvZm9yRWFjaCdcbmltcG9ydCBvbWl0IGZyb20gJ2xvZGFzaC9vbWl0J1xuaW1wb3J0IFBlZXIgZnJvbSAnc2ltcGxlLXBlZXInXG5pbXBvcnQgeyBQZWVyQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9QZWVyQWN0aW9ucydcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMnXG5pbXBvcnQgeyBNZWRpYVN0cmVhbUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvTWVkaWFBY3Rpb25zJ1xuaW1wb3J0IHsgUmVtb3ZlU3RyZWFtQWN0aW9uLCBTdHJlYW1UeXBlIH0gZnJvbSAnLi4vYWN0aW9ucy9TdHJlYW1BY3Rpb25zJ1xuaW1wb3J0IHsgSGFuZ1VwQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9DYWxsQWN0aW9ucydcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ3BlZXJjYWxscycpXG5cbmV4cG9ydCB0eXBlIFBlZXJzU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBQZWVyLkluc3RhbmNlPlxuXG5jb25zdCBkZWZhdWx0U3RhdGU6IFBlZXJzU3RhdGUgPSB7fVxuXG5sZXQgbG9jYWxTdHJlYW1zOiBSZWNvcmQ8U3RyZWFtVHlwZSwgTWVkaWFTdHJlYW0gfCB1bmRlZmluZWQ+ID0ge1xuICBjYW1lcmE6IHVuZGVmaW5lZCxcbiAgZGVza3RvcDogdW5kZWZpbmVkLFxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFja0Zyb21QZWVyKFxuICBwZWVyOiBQZWVyLkluc3RhbmNlLFxuICB0cmFjazogTWVkaWFTdHJlYW1UcmFjayxcbiAgc3RyZWFtOiBNZWRpYVN0cmVhbSxcbikge1xuICB0cnkge1xuICAgIHBlZXIucmVtb3ZlVHJhY2sodHJhY2ssIHN0cmVhbSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVidWcoJ3BlZXIucmVtb3ZlVHJhY2s6ICVzJywgZXJyKVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlbW92ZVN0cmVhbShcbiAgc3RhdGU6IFBlZXJzU3RhdGUsXG4gIGFjdGlvbjogUmVtb3ZlU3RyZWFtQWN0aW9uLFxuKTogUGVlcnNTdGF0ZSB7XG4gIGNvbnN0IHN0cmVhbSA9IGFjdGlvbi5wYXlsb2FkLnN0cmVhbVxuICBpZiAoYWN0aW9uLnBheWxvYWQudXNlcklkID09PSBjb25zdGFudHMuTUUpIHtcbiAgICBmb3JFYWNoKHN0YXRlLCBwZWVyID0+IHtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgcmVtb3ZlVHJhY2tGcm9tUGVlcihwZWVyLCB0cmFjaywgc3RyZWFtKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1lZGlhU3RyZWFtKFxuICBzdGF0ZTogUGVlcnNTdGF0ZSxcbiAgYWN0aW9uOiBNZWRpYVN0cmVhbUFjdGlvbixcbik6IFBlZXJzU3RhdGUge1xuICBpZiAoYWN0aW9uLnN0YXR1cyAhPT0gJ3Jlc29sdmVkJykge1xuICAgIHJldHVybiBzdGF0ZVxuICB9XG4gIGNvbnN0IHN0cmVhbVR5cGUgPSBhY3Rpb24ucGF5bG9hZC50eXBlXG4gIGlmIChcbiAgICBhY3Rpb24ucGF5bG9hZC51c2VySWQgPT09IGNvbnN0YW50cy5NRSAmJlxuICAgIHN0cmVhbVR5cGVcbiAgKSB7XG4gICAgZm9yRWFjaChzdGF0ZSwgcGVlciA9PiB7XG4gICAgICBjb25zdCBsb2NhbFN0cmVhbSA9IGxvY2FsU3RyZWFtc1tzdHJlYW1UeXBlXVxuICAgICAgbG9jYWxTdHJlYW0gJiYgbG9jYWxTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICAgIHJlbW92ZVRyYWNrRnJvbVBlZXIocGVlciwgdHJhY2ssIGxvY2FsU3RyZWFtKVxuICAgICAgfSlcbiAgICAgIGNvbnN0IHN0cmVhbSA9IGFjdGlvbi5wYXlsb2FkLnN0cmVhbVxuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICBwZWVyLmFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pXG4gICAgICB9KVxuICAgIH0pXG4gICAgbG9jYWxTdHJlYW1zW3N0cmVhbVR5cGVdID0gYWN0aW9uLnBheWxvYWQuc3RyZWFtXG4gIH1cbiAgcmV0dXJuIHN0YXRlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBlZXJzKFxuICBzdGF0ZSA9IGRlZmF1bHRTdGF0ZSxcbiAgYWN0aW9uOiBQZWVyQWN0aW9uIHwgTWVkaWFTdHJlYW1BY3Rpb24gfCBSZW1vdmVTdHJlYW1BY3Rpb24gfCBIYW5nVXBBY3Rpb24sXG4pOiBQZWVyc1N0YXRlIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgY29uc3RhbnRzLlBFRVJfQUREOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIFthY3Rpb24ucGF5bG9hZC51c2VySWRdOiBhY3Rpb24ucGF5bG9hZC5wZWVyLFxuICAgICAgfVxuICAgIGNhc2UgY29uc3RhbnRzLlBFRVJfUkVNT1ZFOlxuICAgICAgcmV0dXJuIG9taXQoc3RhdGUsIFthY3Rpb24ucGF5bG9hZC51c2VySWRdKVxuICAgIGNhc2UgY29uc3RhbnRzLkhBTkdfVVA6XG4gICAgICBsb2NhbFN0cmVhbXMgPSB7XG4gICAgICAgIGNhbWVyYTogdW5kZWZpbmVkLFxuICAgICAgICBkZXNrdG9wOiB1bmRlZmluZWQsXG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZm9yRWFjaChzdGF0ZSwgcGVlciA9PiBwZWVyLmRlc3Ryb3koKSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZGVmYXVsdFN0YXRlXG4gICAgY2FzZSBjb25zdGFudHMuU1RSRUFNX1JFTU9WRTpcbiAgICAgIHJldHVybiBoYW5kbGVSZW1vdmVTdHJlYW0oc3RhdGUsIGFjdGlvbilcbiAgICBjYXNlIGNvbnN0YW50cy5NRURJQV9TVFJFQU06XG4gICAgICByZXR1cm4gaGFuZGxlTWVkaWFTdHJlYW0oc3RhdGUsIGFjdGlvbilcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cbiJdfQ==
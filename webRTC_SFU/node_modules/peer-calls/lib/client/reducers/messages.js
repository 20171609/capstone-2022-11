"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var constants = __importStar(require("../constants"));
var defaultState = {
    list: [],
    count: 0
};
function convertNotificationToMessage(action) {
    return {
        userId: '[PeerCalls]',
        message: action.payload.message,
        system: true,
        timestamp: new Date().toLocaleString()
    };
}
function messages(state, action) {
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case constants.NOTIFY:
            return __assign(__assign({}, state), { list: __spreadArrays(state.list, [convertNotificationToMessage(action)]) });
        case constants.MESSAGE_ADD:
            return {
                count: action.payload.system ? state.count : state.count + 1,
                list: __spreadArrays(state.list, [action.payload])
            };
        default:
            return state;
    }
}
exports["default"] = messages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3JlZHVjZXJzL21lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNEQUF5QztBQVN6QyxJQUFNLFlBQVksR0FBa0I7SUFDbEMsSUFBSSxFQUFFLEVBQUU7SUFDUixLQUFLLEVBQUUsQ0FBQztDQUNULENBQUE7QUFFRCxTQUFTLDRCQUE0QixDQUFDLE1BQTZCO0lBQ2pFLE9BQU87UUFDTCxNQUFNLEVBQUUsYUFBYTtRQUNyQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1FBQy9CLE1BQU0sRUFBRSxJQUFJO1FBQ1osU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsY0FBYyxFQUFFO0tBQ3ZDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBd0IsUUFBUSxDQUM5QixLQUFvQixFQUFFLE1BQWdEO0lBQXRFLHNCQUFBLEVBQUEsb0JBQW9CO0lBRXBCLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLFNBQVMsQ0FBQyxNQUFNO1lBQ25CLDZCQUNLLEtBQUssS0FDUixJQUFJLGlCQUFNLEtBQUssQ0FBQyxJQUFJLEdBQUUsNEJBQTRCLENBQUMsTUFBTSxDQUFDLE1BQzNEO1FBQ0gsS0FBSyxTQUFTLENBQUMsV0FBVztZQUN4QixPQUFPO2dCQUNMLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDO2dCQUM1RCxJQUFJLGlCQUFNLEtBQUssQ0FBQyxJQUFJLEdBQUUsTUFBTSxDQUFDLE9BQU8sRUFBQzthQUN0QyxDQUFBO1FBQ0g7WUFDRSxPQUFPLEtBQUssQ0FBQTtLQUNmO0FBQ0gsQ0FBQztBQWpCRCw4QkFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUFkZEFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvQ2hhdEFjdGlvbnMnXG5pbXBvcnQgeyBOb3RpZmljYXRpb25BZGRBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zL05vdGlmeUFjdGlvbnMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZXNTdGF0ZSB7XG4gIGxpc3Q6IE1lc3NhZ2VbXVxuICBjb3VudDogbnVtYmVyXG59XG5cbmNvbnN0IGRlZmF1bHRTdGF0ZTogTWVzc2FnZXNTdGF0ZSA9IHtcbiAgbGlzdDogW10sXG4gIGNvdW50OiAwLFxufVxuXG5mdW5jdGlvbiBjb252ZXJ0Tm90aWZpY2F0aW9uVG9NZXNzYWdlKGFjdGlvbjogTm90aWZpY2F0aW9uQWRkQWN0aW9uKTogTWVzc2FnZSB7XG4gIHJldHVybiB7XG4gICAgdXNlcklkOiAnW1BlZXJDYWxsc10nLFxuICAgIG1lc3NhZ2U6IGFjdGlvbi5wYXlsb2FkLm1lc3NhZ2UsXG4gICAgc3lzdGVtOiB0cnVlLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygpLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lc3NhZ2VzIChcbiAgc3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbjogTWVzc2FnZUFkZEFjdGlvbiB8IE5vdGlmaWNhdGlvbkFkZEFjdGlvbixcbik6IE1lc3NhZ2VzU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBjb25zdGFudHMuTk9USUZZOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxpc3Q6IFsuLi5zdGF0ZS5saXN0LCBjb252ZXJ0Tm90aWZpY2F0aW9uVG9NZXNzYWdlKGFjdGlvbildLFxuICAgICAgfVxuICAgIGNhc2UgY29uc3RhbnRzLk1FU1NBR0VfQUREOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQ6IGFjdGlvbi5wYXlsb2FkLnN5c3RlbSA/IHN0YXRlLmNvdW50IDogc3RhdGUuY291bnQgKyAxLFxuICAgICAgICBsaXN0OiBbLi4uc3RhdGUubGlzdCwgYWN0aW9uLnBheWxvYWRdLFxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuIl19
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
jest.mock('simple-peer');
jest.mock('../socket');
jest.useFakeTimers();
var simple_peer_1 = __importDefault(require("simple-peer"));
var CallActions_1 = require("../actions/CallActions");
var MediaActions = __importStar(require("../actions/MediaActions"));
var constants_1 = require("../constants");
var socket_1 = __importDefault(require("../socket"));
var store_1 = require("../store");
describe('media', function () {
    var store;
    beforeEach(function () {
        store = store_1.createStore();
        navigator.mediaDevices = {};
    });
    afterEach(function () {
        delete navigator.mediaDevices;
    });
    function toJSON() {
        return JSON.stringify(this);
    }
    describe(constants_1.MEDIA_ENUMERATE, function () {
        beforeEach(function () {
            navigator.mediaDevices.enumerateDevices = function () { return __awaiter(void 0, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    result = [{
                            deviceId: 'abcdef1',
                            groupId: 'group1',
                            kind: 'videoinput',
                            label: 'Video Input',
                            toJSON: toJSON
                        }, {
                            deviceId: 'abcdef2',
                            groupId: 'group1',
                            kind: 'audioinput',
                            label: 'Audio Input',
                            toJSON: toJSON
                        }, {
                            deviceId: 'abcdef3',
                            groupId: 'group2',
                            kind: 'audiooutput',
                            label: 'Audio Output',
                            toJSON: toJSON
                        }];
                    return [2 /*return*/, result];
                });
            }); };
        });
        it('retrieves a list of audioinput/videoinput devices', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.dispatch(MediaActions.enumerateDevices())];
                    case 1:
                        _a.sent();
                        expect(store.getState().media.devices).toEqual([{
                                id: 'abcdef1',
                                name: 'Video Input',
                                type: 'videoinput'
                            }, {
                                id: 'abcdef2',
                                name: 'Audio Input',
                                type: 'audioinput'
                            }]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('handles errors', function () { return __awaiter(void 0, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        delete navigator.mediaDevices.enumerateDevices;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, store.dispatch(MediaActions.enumerateDevices())];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        expect(store.getState().media.devices).toEqual([]);
                        expect(store.getState().media.error).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe(constants_1.MEDIA_VIDEO_CONSTRAINT_SET, function () {
        it('sets constraints for video device', function () {
            expect(store.getState().media.video).toEqual({ facingMode: 'user' });
            var constraint = true;
            store.dispatch(MediaActions.setVideoConstraint(constraint));
            expect(store.getState().media.video).toEqual(constraint);
        });
    });
    describe(constants_1.MEDIA_AUDIO_CONSTRAINT_SET, function () {
        it('sets constraints for audio device', function () {
            expect(store.getState().media.audio).toBe(true);
            var constraint = { deviceId: 'abcd' };
            store.dispatch(MediaActions.setAudioConstraint(constraint));
            expect(store.getState().media.audio).toEqual(constraint);
        });
    });
    describe(constants_1.MEDIA_STREAM, function () {
        var track = {};
        var stream = {
            getTracks: function () {
                return [track];
            }
        };
        describe('using navigator.mediaDevices.getUserMedia', function () {
            beforeEach(function () {
                navigator.mediaDevices.getUserMedia = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, stream];
                }); }); };
            });
            function dispatch() {
                return __awaiter(this, void 0, void 0, function () {
                    var result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, store.dispatch(MediaActions.getMediaStream({
                                    audio: true,
                                    video: true
                                }))];
                            case 1:
                                result = _a.sent();
                                expect(result.stream).toBe(stream);
                                expect(result.type).toBe(constants_1.STREAM_TYPE_CAMERA);
                                expect(result.userId).toBe(constants_1.ME);
                                return [2 /*return*/];
                        }
                    });
                });
            }
            describe('reducers/streams', function () {
                it('adds the local stream to the map of videos', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var localStreams;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                expect(store.getState().streams[constants_1.ME]).toBeFalsy();
                                return [4 /*yield*/, dispatch()];
                            case 1:
                                _a.sent();
                                localStreams = store.getState().streams[constants_1.ME];
                                expect(localStreams).toBeTruthy();
                                expect(localStreams.streams.length).toBe(1);
                                expect(localStreams.streams[0].type).toBe(constants_1.STREAM_TYPE_CAMERA);
                                expect(localStreams.streams[0].stream).toBe(stream);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe('reducers/peers', function () {
                var peer1 = new simple_peer_1["default"]();
                var peer2 = new simple_peer_1["default"]();
                var peers = [peer1, peer2];
                beforeEach(function () {
                    store.dispatch({
                        type: constants_1.HANG_UP
                    });
                    store.dispatch({
                        type: constants_1.PEER_ADD,
                        payload: {
                            userId: '1',
                            peer: peer1
                        }
                    });
                    store.dispatch({
                        type: constants_1.PEER_ADD,
                        payload: {
                            userId: '2',
                            peer: peer2
                        }
                    });
                });
                afterEach(function () {
                    store.dispatch({
                        type: constants_1.HANG_UP
                    });
                });
                it('adds local camera stream to all peers', function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, dispatch()];
                            case 1:
                                _a.sent();
                                peers.forEach(function (peer) {
                                    expect(peer.addTrack.mock.calls)
                                        .toEqual([[track, stream]]);
                                    expect(peer.removeTrack.mock.calls).toEqual([]);
                                });
                                return [4 /*yield*/, dispatch()];
                            case 2:
                                _a.sent();
                                peers.forEach(function (peer) {
                                    expect(peer.addTrack.mock.calls)
                                        .toEqual([[track, stream], [track, stream]]);
                                    expect(peer.removeTrack.mock.calls)
                                        .toEqual([[track, stream]]);
                                });
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
        ['getUserMedia', 'mozGetUserMedia', 'webkitGetUserMedia'].forEach(function (item) {
            describe('compatibility: navigator.' + item, function () {
                beforeEach(function () {
                    var getUserMedia = function (constraint, onSuccess, onError) { return onSuccess(stream); };
                    navigator[item] = getUserMedia;
                });
                afterEach(function () {
                    delete navigator[item];
                });
                it('returns a promise with media stream' + item, function () { return __awaiter(void 0, void 0, void 0, function () {
                    var promise, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promise = MediaActions.getMediaStream({
                                    audio: true,
                                    video: true
                                });
                                expect(promise.type).toBe('MEDIA_STREAM');
                                expect(promise.status).toBe('pending');
                                return [4 /*yield*/, promise];
                            case 1:
                                result = _a.sent();
                                expect(result.stream).toBe(stream);
                                expect(result.userId).toBe(constants_1.ME);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
    });
    describe('getDesktopStream (getDisplayMedia)', function () {
        var stream = {};
        beforeEach(function () {
            navigator.mediaDevices.getDisplayMedia = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, stream];
            }); }); };
        });
        function dispatch() {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, store.dispatch(MediaActions.getDesktopStream())];
                        case 1:
                            result = _a.sent();
                            expect(result.stream).toBe(stream);
                            expect(result.type).toBe(constants_1.STREAM_TYPE_DESKTOP);
                            expect(result.userId).toBe(constants_1.ME);
                            return [2 /*return*/];
                    }
                });
            });
        }
        it('adds the local stream to the map of videos', function () { return __awaiter(void 0, void 0, void 0, function () {
            var localStreams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect(store.getState().streams[constants_1.ME]).toBeFalsy();
                        return [4 /*yield*/, dispatch()];
                    case 1:
                        _a.sent();
                        localStreams = store.getState().streams[constants_1.ME];
                        expect(localStreams).toBeTruthy();
                        expect(localStreams.streams.length).toBe(1);
                        expect(localStreams.streams[0].type).toBe(constants_1.STREAM_TYPE_DESKTOP);
                        expect(localStreams.streams[0].stream).toBe(stream);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('dialState', function () {
        function successfulDial() {
            return __awaiter(this, void 0, void 0, function () {
                var promise;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promise = store.dispatch(CallActions_1.dial());
                            expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_DIALLING);
                            socket_1["default"].emit('users', {
                                initiator: 'test',
                                users: []
                            });
                            jest.runAllTimers();
                            return [4 /*yield*/, promise];
                        case 1:
                            _a.sent();
                            expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_IN_CALL);
                            return [2 /*return*/];
                    }
                });
            });
        }
        it('has dialState HUNG_UP by default', function () {
            expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_HUNG_UP);
        });
        it('changes state from DIALLING to HUNG_UP', function () { return __awaiter(void 0, void 0, void 0, function () {
            var promise, err, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promise = store.dispatch(CallActions_1.dial());
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_DIALLING);
                        jest.runAllTimers();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, promise];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        err = e_1;
                        return [3 /*break*/, 4];
                    case 4:
                        expect(err).toBeTruthy();
                        expect(err.message).toMatch(/Dial timed out/);
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_HUNG_UP);
                        return [2 /*return*/];
                }
            });
        }); });
        it('changes state from DIALLING to IN_CALL', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, successfulDial()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('cahnges state to HUNG_UP when destroyPeers is called', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, successfulDial()];
                    case 1:
                        _a.sent();
                        store.dispatch(CallActions_1.hangUp());
                        expect(store.getState().media.dialState).toBe(constants_1.DIAL_STATE_HUNG_UP);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('../window');
var StreamActions = __importStar(require("../actions/StreamActions"));
var index_1 = __importDefault(require("./index"));
var window_1 = require("../window");
var redux_1 = require("redux");
var middlewares_1 = require("../middlewares");
describe('reducers/alerts', function () {
    var store, stream, userId;
    beforeEach(function () {
        store = redux_1.createStore(index_1["default"], redux_1.applyMiddleware.apply(void 0, middlewares_1.create()));
        userId = 'test id';
        stream = new window_1.MediaStream();
    });
    afterEach(function () {
        window_1.createObjectURL
            .mockImplementation(function (object) { return 'blob://' + String(object); });
    });
    describe('defaultState', function () {
        it('should have default state set', function () {
            expect(store.getState().streams).toEqual({});
        });
    });
    describe('addStream', function () {
        it('adds a stream', function () {
            var _a;
            store.dispatch(StreamActions.addStream({ userId: userId, stream: stream }));
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            url: jasmine.any(String),
                            type: undefined
                        }]
                },
                _a));
        });
        it('does not fail when createObjectURL fails', function () {
            var _a;
            window_1.createObjectURL
                .mockImplementation(function () { throw new Error('test'); });
            store.dispatch(StreamActions.addStream({ userId: userId, stream: stream }));
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            type: undefined,
                            url: undefined
                        }]
                },
                _a));
        });
    });
    describe('removeStream', function () {
        it('removes a stream', function () {
            store.dispatch(StreamActions.addStream({ userId: userId, stream: stream }));
            store.dispatch(StreamActions.removeStream(userId, stream));
            expect(store.getState().streams).toEqual({});
        });
        it('does not fail when no stream', function () {
            store.dispatch(StreamActions.removeStream(userId, stream));
        });
    });
    describe('addStreamTrack', function () {
        var stream;
        beforeEach(function () {
            stream = new window_1.MediaStream();
            stream.getTracks.mockReturnValue([]);
        });
        it('adds a stream when stream does not exist', function () {
            var _a;
            var track = new window_1.MediaStreamTrack();
            store.dispatch(StreamActions.addTrack({
                stream: stream,
                track: track,
                userId: userId
            }));
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            url: jasmine.any(String)
                        }]
                },
                _a));
        });
        it('adds a track to stream when track not added to stream', function () {
            var track = new window_1.MediaStreamTrack();
            store.dispatch(StreamActions.addTrack({
                stream: stream,
                track: track,
                userId: userId
            }));
            expect(stream.addTrack.mock.calls.length).toBe(1);
            expect(stream.addTrack.mock.calls[0][0]).toBe(track);
        });
        it('adds stream and does not add existing track in stream', function () {
            var _a;
            var track = new window_1.MediaStreamTrack();
            stream.getTracks.mockReturnValue([track]);
            store.dispatch(StreamActions.addTrack({
                stream: stream,
                track: track,
                userId: userId
            }));
            expect(stream.addTrack.mock.calls.length).toBe(0);
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            url: jasmine.any(String)
                        }]
                },
                _a));
        });
        it('adds missing track to existing stream', function () {
            var _a;
            var track = new window_1.MediaStreamTrack();
            store.dispatch(StreamActions.addStream({
                stream: stream,
                userId: userId
            }));
            store.dispatch(StreamActions.addTrack({
                stream: stream,
                track: track,
                userId: userId
            }));
            expect(stream.addTrack.mock.calls.length).toBe(1);
            expect(stream.addTrack.mock.calls[0][0]).toBe(track);
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            url: jasmine.any(String)
                        }]
                },
                _a));
        });
    });
    describe('removeStreamTrack', function () {
        var stream;
        var tracks;
        beforeEach(function () {
            stream = new window_1.MediaStream();
            store.dispatch(StreamActions.addStream({
                userId: userId,
                stream: stream
            }));
            tracks = [];
            stream.getTracks.mockImplementation(function () { return tracks; });
            stream.removeTrack
                .mockImplementation(function (track) {
                tracks = tracks.filter(function (t) { return t !== track; });
            });
        });
        it('removes a track from stream', function () {
            var _a;
            var track = new window_1.MediaStreamTrack();
            tracks = [track, new window_1.MediaStreamTrack()];
            store.dispatch(StreamActions.removeTrack({
                userId: userId,
                stream: stream,
                track: track
            }));
            expect(store.getState().streams).toEqual((_a = {},
                _a[userId] = {
                    userId: userId,
                    streams: [{
                            stream: stream,
                            url: jasmine.any(String)
                        }]
                },
                _a));
        });
        it('removes a stream when no tracks left in stream', function () {
            var track = new window_1.MediaStreamTrack();
            tracks = [track];
            store.dispatch(StreamActions.removeTrack({
                userId: userId,
                stream: stream,
                track: track
            }));
            expect(store.getState().streams).toEqual({});
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var constants_1 = require("../constants");
var defaultState = {
    devices: [],
    video: { facingMode: 'user' },
    audio: true,
    dialState: constants_1.DIAL_STATE_HUNG_UP,
    loading: false,
    error: '',
    autoplayError: false
};
function handleEnumerate(state, action) {
    switch (action.status) {
        case 'resolved':
            return __assign(__assign({}, state), { loading: false, devices: action.payload });
        case 'pending':
            return __assign(__assign({}, state), { loading: true });
        case 'rejected':
            return __assign(__assign({}, state), { loading: false, error: 'Could not retrieve media devices' });
    }
}
exports.handleEnumerate = handleEnumerate;
function handleMediaStream(state, action) {
    switch (action.status) {
        case 'resolved':
            return __assign({}, state);
        case 'rejected':
            return __assign(__assign({}, state), { error: action.payload.message });
        default:
            return state;
    }
}
exports.handleMediaStream = handleMediaStream;
function handlePlay(state, action) {
    switch (action.status) {
        case 'pending':
        case 'resolved':
            return __assign(__assign({}, state), { autoplayError: false });
        case 'rejected':
            console.log('play rejected', action.payload.name);
            if (action.payload.name !== 'NotAllowedError') {
                return state;
            }
            return __assign(__assign({}, state), { autoplayError: true });
        default:
            return state;
    }
}
exports.handlePlay = handlePlay;
function handleDial(state, action) {
    switch (action.status) {
        case 'pending':
            return __assign(__assign({}, state), { dialState: constants_1.DIAL_STATE_DIALLING });
        case 'resolved':
            return __assign(__assign({}, state), { dialState: constants_1.DIAL_STATE_IN_CALL });
        case 'rejected':
            return __assign(__assign({}, state), { dialState: constants_1.DIAL_STATE_HUNG_UP });
        default:
            return state;
    }
}
exports.handleDial = handleDial;
function media(state, action) {
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case constants_1.MEDIA_ENUMERATE:
            return handleEnumerate(state, action);
        case constants_1.MEDIA_AUDIO_CONSTRAINT_SET:
            return __assign(__assign({}, state), { audio: action.payload });
        case constants_1.MEDIA_VIDEO_CONSTRAINT_SET:
            return __assign(__assign({}, state), { video: action.payload });
        case constants_1.MEDIA_STREAM:
            return handleMediaStream(state, action);
        case constants_1.MEDIA_PLAY:
            return handlePlay(state, action);
        case constants_1.DIAL:
            return handleDial(state, action);
        case constants_1.HANG_UP:
            return __assign(__assign({}, state), { dialState: constants_1.DIAL_STATE_HUNG_UP });
        default:
            return state;
    }
}
exports["default"] = media;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3JlZHVjZXJzL21lZGlhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFQSwwQ0FBdU47QUFZdk4sSUFBTSxZQUFZLEdBQWU7SUFDL0IsT0FBTyxFQUFFLEVBQUU7SUFDWCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDO0lBQzVCLEtBQUssRUFBRSxJQUFJO0lBQ1gsU0FBUyxFQUFFLDhCQUFrQjtJQUM3QixPQUFPLEVBQUUsS0FBSztJQUNkLEtBQUssRUFBRSxFQUFFO0lBQ1QsYUFBYSxFQUFFLEtBQUs7Q0FDckIsQ0FBQTtBQUVELFNBQWdCLGVBQWUsQ0FDN0IsS0FBaUIsRUFDakIsTUFBNEI7SUFFNUIsUUFBUSxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEtBQUssVUFBVTtZQUNiLDZCQUNLLEtBQUssS0FDUixPQUFPLEVBQUUsS0FBSyxFQUNkLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxJQUN4QjtRQUNELEtBQUssU0FBUztZQUNaLDZCQUNLLEtBQUssS0FDUixPQUFPLEVBQUUsSUFBSSxJQUNkO1FBQ0gsS0FBSyxVQUFVO1lBQ2IsNkJBQ0ssS0FBSyxLQUNSLE9BQU8sRUFBRSxLQUFLLEVBQ2QsS0FBSyxFQUFFLGtDQUFrQyxJQUMxQztLQUNOO0FBQ0gsQ0FBQztBQXZCRCwwQ0F1QkM7QUFFRCxTQUFnQixpQkFBaUIsQ0FDL0IsS0FBaUIsRUFDakIsTUFBeUI7SUFFekIsUUFBUSxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEtBQUssVUFBVTtZQUNiLG9CQUNLLEtBQUssRUFDVDtRQUNILEtBQUssVUFBVTtZQUNiLDZCQUNLLEtBQUssS0FDUixLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQzlCO1FBQ0g7WUFDRSxPQUFPLEtBQUssQ0FBQTtLQUNmO0FBQ0gsQ0FBQztBQWpCRCw4Q0FpQkM7QUFFRCxTQUFnQixVQUFVLENBQ3hCLEtBQWlCLEVBQ2pCLE1BQXVCO0lBRXZCLFFBQVEsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNyQixLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssVUFBVTtZQUNiLDZCQUNLLEtBQUssS0FDUixhQUFhLEVBQUUsS0FBSyxJQUNyQjtRQUNILEtBQUssVUFBVTtZQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDakQsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxpQkFBaUIsRUFBRTtnQkFDN0MsT0FBTyxLQUFLLENBQUE7YUFDYjtZQUNELDZCQUNLLEtBQUssS0FDUixhQUFhLEVBQUUsSUFBSSxJQUNwQjtRQUNIO1lBQ0UsT0FBTyxLQUFLLENBQUE7S0FDZjtBQUNILENBQUM7QUF2QkQsZ0NBdUJDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLEtBQWlCLEVBQUUsTUFBa0I7SUFDOUQsUUFBTyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEtBQUssU0FBUztZQUNaLDZCQUNLLEtBQUssS0FDUixTQUFTLEVBQUUsK0JBQW1CLElBQy9CO1FBQ0gsS0FBSyxVQUFVO1lBQ2IsNkJBQ0ssS0FBSyxLQUNSLFNBQVMsRUFBRSw4QkFBa0IsSUFDOUI7UUFDSCxLQUFLLFVBQVU7WUFDYiw2QkFDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLDhCQUFrQixJQUM5QjtRQUNIO1lBQ0UsT0FBTyxLQUFLLENBQUE7S0FDZjtBQUNILENBQUM7QUFwQkQsZ0NBb0JDO0FBRUQsU0FBd0IsS0FBSyxDQUMzQixLQUFvQixFQUNwQixNQUErQztJQUQvQyxzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSywyQkFBZTtZQUNsQixPQUFPLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDdkMsS0FBSyxzQ0FBMEI7WUFDN0IsNkJBQ0ssS0FBSyxLQUNSLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxJQUN0QjtRQUNILEtBQUssc0NBQTBCO1lBQzdCLDZCQUNLLEtBQUssS0FDUixLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFDdEI7UUFDSCxLQUFLLHdCQUFZO1lBQ2YsT0FBTyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDekMsS0FBSyxzQkFBVTtZQUNiLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNsQyxLQUFLLGdCQUFJO1lBQ1AsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLEtBQUssbUJBQU87WUFDViw2QkFDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLDhCQUFrQixJQUM5QjtRQUNIO1lBQ0UsT0FBTyxLQUFLLENBQUE7S0FDZjtBQUNILENBQUM7QUEvQkQsMkJBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlhbEFjdGlvbiwgSGFuZ1VwQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9DYWxsQWN0aW9ucydcbmltcG9ydCB7IEF1ZGlvQ29uc3RyYWludCwgTWVkaWFBY3Rpb24sIE1lZGlhRGV2aWNlLCBNZWRpYUVudW1lcmF0ZUFjdGlvbiwgTWVkaWFQbGF5QWN0aW9uLCBNZWRpYVN0cmVhbUFjdGlvbiwgVmlkZW9Db25zdHJhaW50IH0gZnJvbSAnLi4vYWN0aW9ucy9NZWRpYUFjdGlvbnMnXG5pbXBvcnQgeyBESUFMLCBEaWFsU3RhdGUsIERJQUxfU1RBVEVfRElBTExJTkcsIERJQUxfU1RBVEVfSFVOR19VUCwgRElBTF9TVEFURV9JTl9DQUxMLCBIQU5HX1VQLCBNRURJQV9BVURJT19DT05TVFJBSU5UX1NFVCwgTUVESUFfRU5VTUVSQVRFLCBNRURJQV9QTEFZLCBNRURJQV9TVFJFQU0sIE1FRElBX1ZJREVPX0NPTlNUUkFJTlRfU0VUIH0gZnJvbSAnLi4vY29uc3RhbnRzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhU3RhdGUge1xuICBkZXZpY2VzOiBNZWRpYURldmljZVtdXG4gIHZpZGVvOiBWaWRlb0NvbnN0cmFpbnRcbiAgYXVkaW86IEF1ZGlvQ29uc3RyYWludFxuICBkaWFsU3RhdGU6IERpYWxTdGF0ZVxuICBsb2FkaW5nOiBib29sZWFuXG4gIGVycm9yOiBzdHJpbmdcbiAgYXV0b3BsYXlFcnJvcjogYm9vbGVhblxufVxuXG5jb25zdCBkZWZhdWx0U3RhdGU6IE1lZGlhU3RhdGUgPSB7XG4gIGRldmljZXM6IFtdLFxuICB2aWRlbzogeyBmYWNpbmdNb2RlOiAndXNlcid9LFxuICBhdWRpbzogdHJ1ZSxcbiAgZGlhbFN0YXRlOiBESUFMX1NUQVRFX0hVTkdfVVAsXG4gIGxvYWRpbmc6IGZhbHNlLFxuICBlcnJvcjogJycsXG4gIGF1dG9wbGF5RXJyb3I6IGZhbHNlLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRW51bWVyYXRlKFxuICBzdGF0ZTogTWVkaWFTdGF0ZSxcbiAgYWN0aW9uOiBNZWRpYUVudW1lcmF0ZUFjdGlvbixcbik6IE1lZGlhU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi5zdGF0dXMpIHtcbiAgICBjYXNlICdyZXNvbHZlZCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIGRldmljZXM6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfVxuICAgICAgY2FzZSAncGVuZGluZyc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgY2FzZSAncmVqZWN0ZWQnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnQ291bGQgbm90IHJldHJpZXZlIG1lZGlhIGRldmljZXMnLFxuICAgICAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU1lZGlhU3RyZWFtKFxuICBzdGF0ZTogTWVkaWFTdGF0ZSxcbiAgYWN0aW9uOiBNZWRpYVN0cmVhbUFjdGlvbixcbik6IE1lZGlhU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi5zdGF0dXMpIHtcbiAgICBjYXNlICdyZXNvbHZlZCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgIH1cbiAgICBjYXNlICdyZWplY3RlZCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZXJyb3I6IGFjdGlvbi5wYXlsb2FkLm1lc3NhZ2UsXG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQbGF5KFxuICBzdGF0ZTogTWVkaWFTdGF0ZSxcbiAgYWN0aW9uOiBNZWRpYVBsYXlBY3Rpb24sXG4pOiBNZWRpYVN0YXRlIHtcbiAgc3dpdGNoIChhY3Rpb24uc3RhdHVzKSB7XG4gICAgY2FzZSAncGVuZGluZyc6XG4gICAgY2FzZSAncmVzb2x2ZWQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGF1dG9wbGF5RXJyb3I6IGZhbHNlLFxuICAgICAgfVxuICAgIGNhc2UgJ3JlamVjdGVkJzpcbiAgICAgIGNvbnNvbGUubG9nKCdwbGF5IHJlamVjdGVkJywgYWN0aW9uLnBheWxvYWQubmFtZSlcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSAnTm90QWxsb3dlZEVycm9yJykge1xuICAgICAgICByZXR1cm4gc3RhdGVcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhdXRvcGxheUVycm9yOiB0cnVlLFxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRGlhbChzdGF0ZTogTWVkaWFTdGF0ZSwgYWN0aW9uOiBEaWFsQWN0aW9uKTogTWVkaWFTdGF0ZSB7XG4gIHN3aXRjaChhY3Rpb24uc3RhdHVzKSB7XG4gICAgY2FzZSAncGVuZGluZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZGlhbFN0YXRlOiBESUFMX1NUQVRFX0RJQUxMSU5HLFxuICAgICAgfVxuICAgIGNhc2UgJ3Jlc29sdmVkJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkaWFsU3RhdGU6IERJQUxfU1RBVEVfSU5fQ0FMTCxcbiAgICAgIH1cbiAgICBjYXNlICdyZWplY3RlZCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZGlhbFN0YXRlOiBESUFMX1NUQVRFX0hVTkdfVVAsXG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lZGlhKFxuICBzdGF0ZSA9IGRlZmF1bHRTdGF0ZSxcbiAgYWN0aW9uOiBNZWRpYUFjdGlvbiB8IERpYWxBY3Rpb24gfCBIYW5nVXBBY3Rpb24sXG4pOiBNZWRpYVN0YXRlIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgTUVESUFfRU5VTUVSQVRFOlxuICAgICAgcmV0dXJuIGhhbmRsZUVudW1lcmF0ZShzdGF0ZSwgYWN0aW9uKVxuICAgIGNhc2UgTUVESUFfQVVESU9fQ09OU1RSQUlOVF9TRVQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYXVkaW86IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfVxuICAgIGNhc2UgTUVESUFfVklERU9fQ09OU1RSQUlOVF9TRVQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdmlkZW86IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfVxuICAgIGNhc2UgTUVESUFfU1RSRUFNOlxuICAgICAgcmV0dXJuIGhhbmRsZU1lZGlhU3RyZWFtKHN0YXRlLCBhY3Rpb24pXG4gICAgY2FzZSBNRURJQV9QTEFZOlxuICAgICAgcmV0dXJuIGhhbmRsZVBsYXkoc3RhdGUsIGFjdGlvbilcbiAgICBjYXNlIERJQUw6XG4gICAgICByZXR1cm4gaGFuZGxlRGlhbChzdGF0ZSwgYWN0aW9uKVxuICAgIGNhc2UgSEFOR19VUDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkaWFsU3RhdGU6IERJQUxfU1RBVEVfSFVOR19VUCxcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cbiJdfQ==
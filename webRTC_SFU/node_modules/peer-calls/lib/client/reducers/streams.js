"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var debug_1 = __importDefault(require("debug"));
var forEach_1 = __importDefault(require("lodash/forEach"));
var omit_1 = __importDefault(require("lodash/omit"));
var constants_1 = require("../constants");
var window_1 = require("../window");
var debug = debug_1["default"]('peercalls');
var defaultState = Object.freeze({});
function safeCreateObjectURL(stream) {
    try {
        return window_1.createObjectURL(stream);
    }
    catch (err) {
        debug('Error using createObjectURL: %s', err);
        return undefined;
    }
}
function addStream(state, payload) {
    var _a;
    var userId = payload.userId, stream = payload.stream;
    var userStreams = state[userId] || {
        userId: userId,
        streams: []
    };
    if (userStreams.streams.map(function (s) { return s.stream; }).indexOf(stream) >= 0) {
        return state;
    }
    var streamWithURL = {
        stream: stream,
        type: payload.type,
        url: safeCreateObjectURL(stream)
    };
    return __assign(__assign({}, state), (_a = {}, _a[userId] = {
        userId: userId,
        streams: __spreadArrays(userStreams.streams, [streamWithURL])
    }, _a));
}
function removeStream(state, payload) {
    var _a;
    var userId = payload.userId, stream = payload.stream;
    var userStreams = state[userId];
    if (!userStreams) {
        return state;
    }
    if (stream) {
        var streams_1 = userStreams.streams.filter(function (s) {
            var found = s.stream === stream;
            if (found) {
                stream.getTracks().forEach(function (track) { return track.stop(); });
                s.url && window_1.revokeObjectURL(s.url);
            }
            return !found;
        });
        if (streams_1.length > 0) {
            return __assign(__assign({}, state), (_a = {}, _a[userId] = {
                userId: userId,
                streams: streams_1
            }, _a));
        }
        else {
            omit_1["default"](state, [userId]);
        }
    }
    userStreams && userStreams.streams.forEach(function (s) {
        s.stream.getTracks().forEach(function (track) { return track.stop(); });
        s.url && window_1.revokeObjectURL(s.url);
    });
    return omit_1["default"](state, [userId]);
}
function removeStreamTrack(state, payload) {
    var userId = payload.userId, stream = payload.stream, track = payload.track;
    var userStreams = state[userId];
    if (!userStreams) {
        return state;
    }
    var index = userStreams.streams.map(function (s) { return s.stream; }).indexOf(stream);
    if (index < 0) {
        return state;
    }
    stream.removeTrack(track);
    if (stream.getTracks().length === 0) {
        return removeStream(state, { userId: userId, stream: stream });
    }
    // UI does not update when a stream track is removed so there is no need to
    // update the state object
    return state;
}
function addStreamTrack(state, payload) {
    var userId = payload.userId, stream = payload.stream, track = payload.track;
    var userStreams = state[userId];
    var existingUserStream = userStreams && userStreams.streams.find(function (s) { return s.stream === stream; });
    if (!stream.getTracks().includes(track)) {
        stream.addTrack(track);
    }
    if (!existingUserStream) {
        return addStream(state, {
            stream: payload.stream,
            userId: payload.userId
        });
    }
    return state;
}
function streams(state, action) {
    if (state === void 0) { state = defaultState; }
    switch (action.type) {
        case constants_1.STREAM_ADD:
            return addStream(state, action.payload);
        case constants_1.STREAM_REMOVE:
            return removeStream(state, action.payload);
        case constants_1.STREAM_TRACK_ADD:
            return addStreamTrack(state, action.payload);
        case constants_1.STREAM_TRACK_REMOVE:
            return removeStreamTrack(state, action.payload);
        case constants_1.HANG_UP:
            forEach_1["default"](state, function (userStreams) {
                userStreams.streams.forEach(function (s) {
                    s.stream.getTracks().forEach(function (track) {
                        track.onmute = null;
                        track.onunmute = null;
                    });
                });
            });
            return defaultState;
        case constants_1.MEDIA_STREAM:
            if (action.status === 'resolved') {
                return addStream(state, action.payload);
            }
            else {
                return state;
            }
        default:
            return state;
    }
}
exports["default"] = streams;
//# sourceMappingURL=data:application/json;base64,
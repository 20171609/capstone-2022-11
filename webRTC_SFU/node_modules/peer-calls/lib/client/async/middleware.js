"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var action_1 = require("./action");
var debug_1 = __importDefault(require("debug"));
var debug = debug_1["default"]('peercalls:async');
exports.middleware = function (store) { return function (next) { return function (action) {
    if (!action_1.isPendingAction(action)) {
        debug('NOT pending %o', action);
        return next(action);
    }
    debug('Pending: %s %s', action.type, action.status);
    var promise = action
        .then(function (payload) {
        debug('Resolved: %s resolved', action.type);
        var resolvedAction = {
            payload: payload,
            type: action.type,
            status: 'resolved'
        };
        store.dispatch(resolvedAction);
    });
    // Propagate this action. Only attach listeners to the promise.
    debug('Calling next for %s %s', action.type, action.status);
    next({
        type: action.type,
        status: 'pending'
    });
    var promise2 = promise["catch"](function (err) {
        debug('Rejected: %s rejected %s', action.type, err.stack);
        var rejectedAction = {
            payload: err,
            type: action.type,
            status: 'rejected'
        };
        store.dispatch(rejectedAction);
    });
    return promise2.then(function () {
        return action;
    });
}; }; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvYXN5bmMvbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLG1DQUEwRTtBQUMxRSxnREFBMEI7QUFFMUIsSUFBTSxLQUFLLEdBQUcsa0JBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBRTFCLFFBQUEsVUFBVSxHQUFlLFVBQUEsS0FBSyxJQUFJLE9BQUEsVUFBQSxJQUFJLElBQUksT0FBQSxVQUFDLE1BQWlCO0lBQ3ZFLElBQUksQ0FBQyx3QkFBZSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUNwQjtJQUVELEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVuRCxJQUFNLE9BQU8sR0FBRyxNQUFNO1NBQ3JCLElBQUksQ0FBQyxVQUFBLE9BQU87UUFDWCxLQUFLLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLElBQU0sY0FBYyxHQUFvQztZQUN0RCxPQUFPLFNBQUE7WUFDUCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsTUFBTSxFQUFFLFVBQVU7U0FDbkIsQ0FBQTtRQUNELEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFFRiwrREFBK0Q7SUFDL0QsS0FBSyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNELElBQUksQ0FBQztRQUNILElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNqQixNQUFNLEVBQUUsU0FBUztLQUNsQixDQUFDLENBQUE7SUFFRixJQUFNLFFBQVEsR0FBRyxPQUFPLENBQ3ZCLE9BQUssQ0FBQSxDQUFDLFVBQUMsR0FBVTtRQUNoQixLQUFLLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekQsSUFBTSxjQUFjLEdBQTJCO1lBQzdDLE9BQU8sRUFBRSxHQUFHO1lBQ1osSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxVQUFVO1NBQ25CLENBQUE7UUFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ25CLE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLEVBeENzRCxDQXdDdEQsRUF4QzhDLENBd0M5QyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW55QWN0aW9uLCBNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBpc1BlbmRpbmdBY3Rpb24sIFJlc29sdmVkQWN0aW9uLCBSZWplY3RlZEFjdGlvbiB9IGZyb20gJy4vYWN0aW9uJ1xuaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ3BlZXJjYWxsczphc3luYycpXG5cbmV4cG9ydCBjb25zdCBtaWRkbGV3YXJlOiBNaWRkbGV3YXJlID0gc3RvcmUgPT4gbmV4dCA9PiAoYWN0aW9uOiBBbnlBY3Rpb24pID0+IHtcbiAgaWYgKCFpc1BlbmRpbmdBY3Rpb24oYWN0aW9uKSkge1xuICAgIGRlYnVnKCdOT1QgcGVuZGluZyAlbycsIGFjdGlvbilcbiAgICByZXR1cm4gbmV4dChhY3Rpb24pXG4gIH1cblxuICBkZWJ1ZygnUGVuZGluZzogJXMgJXMnLCBhY3Rpb24udHlwZSwgYWN0aW9uLnN0YXR1cylcblxuICBjb25zdCBwcm9taXNlID0gYWN0aW9uXG4gIC50aGVuKHBheWxvYWQgPT4ge1xuICAgIGRlYnVnKCdSZXNvbHZlZDogJXMgcmVzb2x2ZWQnLCBhY3Rpb24udHlwZSlcbiAgICBjb25zdCByZXNvbHZlZEFjdGlvbjogUmVzb2x2ZWRBY3Rpb248c3RyaW5nLCB1bmtub3duPiA9IHtcbiAgICAgIHBheWxvYWQsXG4gICAgICB0eXBlOiBhY3Rpb24udHlwZSxcbiAgICAgIHN0YXR1czogJ3Jlc29sdmVkJyxcbiAgICB9XG4gICAgc3RvcmUuZGlzcGF0Y2gocmVzb2x2ZWRBY3Rpb24pXG4gIH0pXG5cbiAgLy8gUHJvcGFnYXRlIHRoaXMgYWN0aW9uLiBPbmx5IGF0dGFjaCBsaXN0ZW5lcnMgdG8gdGhlIHByb21pc2UuXG4gIGRlYnVnKCdDYWxsaW5nIG5leHQgZm9yICVzICVzJywgYWN0aW9uLnR5cGUsIGFjdGlvbi5zdGF0dXMpXG4gIG5leHQoe1xuICAgIHR5cGU6IGFjdGlvbi50eXBlLFxuICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICB9KVxuXG4gIGNvbnN0IHByb21pc2UyID0gcHJvbWlzZVxuICAuY2F0Y2goKGVycjogRXJyb3IpID0+IHtcbiAgICBkZWJ1ZygnUmVqZWN0ZWQ6ICVzIHJlamVjdGVkICVzJywgYWN0aW9uLnR5cGUsIGVyci5zdGFjaylcbiAgICBjb25zdCByZWplY3RlZEFjdGlvbjogUmVqZWN0ZWRBY3Rpb248c3RyaW5nPiA9IHtcbiAgICAgIHBheWxvYWQ6IGVycixcbiAgICAgIHR5cGU6IGFjdGlvbi50eXBlLFxuICAgICAgc3RhdHVzOiAncmVqZWN0ZWQnLFxuICAgIH1cbiAgICBzdG9yZS5kaXNwYXRjaChyZWplY3RlZEFjdGlvbilcbiAgfSlcblxuICByZXR1cm4gcHJvbWlzZTIudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuIGFjdGlvblxuICB9KVxufVxuIl19
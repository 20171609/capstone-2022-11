"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var action_1 = require("./action");
var middleware_1 = require("./middleware");
var reducer_1 = require("./reducer");
var redux_1 = require("redux");
describe('middleware', function () {
    var defaultState = {
        status: 'resolved',
        sum: 0
    };
    var actions = {
        add: action_1.makeAction('add', function (a, b) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { a: a, b: b }];
            });
        }); }),
        subtract: action_1.makeAction('subtract', function (a, b) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { a: a, b: b }];
            });
        }); }),
        reject: action_1.makeAction('reject', function (a, b) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Test reject');
            });
        }); })
    };
    function result(state, action) {
        if (state === void 0) { state = defaultState; }
        switch (action.type) {
            case 'add':
                return reducer_1.reduce(state, action, function (state, pending) { return ({
                    status: pending.status,
                    sum: state.sum
                }); }, function (state, resolved) { return ({
                    status: resolved.status,
                    sum: resolved.payload.a + resolved.payload.b
                }); }, function (state, rejected) { return ({ status: rejected.status, sum: 0 }); });
            case 'subtract':
                return reducer_1.reduce(state, action, function (state, pending) { return ({
                    status: pending.status,
                    sum: state.sum
                }); }, function (state, resolved) { return ({
                    status: resolved.status,
                    sum: resolved.payload.a - resolved.payload.b
                }); }, function (state, rejected) { return ({ status: rejected.status, sum: 0 }); });
            case 'reject':
                return reducer_1.reduce(state, action, function (state, pending) { return ({
                    status: pending.status,
                    sum: state.sum
                }); }, function (state, resolved) { return ({
                    status: resolved.status,
                    sum: 0
                }); }, function (state, rejected) { return ({ status: rejected.status, sum: 0 }); });
            default:
                return state;
        }
    }
    function getStore() {
        return redux_1.createStore(redux_1.combineReducers({ result: result }), redux_1.applyMiddleware(middleware_1.middleware));
    }
    describe('pending and resolved', function () {
        it('makes it easy to dispatch async actions for redux', function () { return __awaiter(void 0, void 0, void 0, function () {
            var store;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        store = getStore();
                        return [4 /*yield*/, store.dispatch(actions.add(1, 2))];
                    case 1:
                        _a.sent();
                        expect(store.getState()).toEqual({
                            result: {
                                status: 'resolved',
                                sum: 3
                            }
                        });
                        return [4 /*yield*/, store.dispatch(actions.subtract(1, 2))];
                    case 2:
                        _a.sent();
                        expect(store.getState()).toEqual({
                            result: {
                                status: 'resolved',
                                sum: -1
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('rejected', function () {
        it('handles rejected actions', function () { return __awaiter(void 0, void 0, void 0, function () {
            var store, error, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        store = getStore();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, store.dispatch(actions.reject(1, 2))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        error = err_1;
                        return [3 /*break*/, 4];
                    case 4:
                        expect(error).toBeTruthy();
                        expect(error.message).toBe('Test reject');
                        expect(store.getState()).toEqual({
                            result: {
                                status: 'rejected',
                                sum: 0
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;base64,
/// <reference types="simple-peer" />
import { Action, Store as ReduxStore } from 'redux';
import { ThunkAction, ThunkDispatch } from 'redux-thunk';
export declare const middlewares: import("redux").Middleware<{}, any, import("redux").Dispatch<import("redux").AnyAction>>[];
export declare const createStore: () => ReduxStore<import("redux").CombinedState<{
    notifications: Record<string, import("./actions/NotifyActions").Notification>;
    messages: import("./reducers/messages").MessagesState;
    media: import("./reducers/media").MediaState;
    nicknames: Record<string, string | undefined>;
    peers: Record<string, import("simple-peer").Instance>;
    streams: import("./reducers/streams").StreamsState;
    windowStates: import("./reducers/windowStates").WindowStates;
}>, import("redux").AnyAction | import("./actions/StreamActions").AddStreamAction | import("./actions/StreamActions").RemoveStreamAction | import("./actions/StreamActions").MinimizeToggleAction | import("./actions/StreamActions").RemoveStreamTrackAction | import("./actions/StreamActions").AddStreamTrackAction | import("./actions/NotifyActions").NotificationAddAction | import("./actions/ChatActions").MessageAddAction | import("./actions/NicknameActions").NicknameSetAction | import("./actions/PeerActions").RemovePeerAction | import("./actions/PeerActions").AddPeerAction | import("./actions/MediaActions").MediaVideoConstraintAction | import("./actions/MediaActions").MediaAudioConstraintAction | import("./async").PendingAction<"MEDIA_ENUMERATE", import("./actions/MediaActions").MediaDevice[]> | import("./async").ResolvedAction<"MEDIA_ENUMERATE", import("./actions/MediaActions").MediaDevice[]> | import("./async").RejectedAction<"MEDIA_ENUMERATE"> | import("./async").PendingAction<"MEDIA_STREAM", import("./actions/StreamActions").AddStreamPayload> | import("./async").ResolvedAction<"MEDIA_STREAM", import("./actions/StreamActions").AddStreamPayload> | import("./async").RejectedAction<"MEDIA_STREAM"> | import("./async").PendingAction<"MEDIA_PLAY", void> | import("./async").ResolvedAction<"MEDIA_PLAY", void> | import("./async").RejectedAction<"MEDIA_PLAY"> | import("./async").PendingAction<"DIAL", void> | import("./async").ResolvedAction<"DIAL", void> | import("./async").RejectedAction<"DIAL"> | import("./actions/CallActions").HangUpAction> & {
    dispatch: unknown;
};
declare const _default: ReduxStore<import("redux").CombinedState<{
    notifications: Record<string, import("./actions/NotifyActions").Notification>;
    messages: import("./reducers/messages").MessagesState;
    media: import("./reducers/media").MediaState;
    nicknames: Record<string, string | undefined>;
    peers: Record<string, import("simple-peer").Instance>;
    streams: import("./reducers/streams").StreamsState;
    windowStates: import("./reducers/windowStates").WindowStates;
}>, import("redux").AnyAction | import("./actions/StreamActions").AddStreamAction | import("./actions/StreamActions").RemoveStreamAction | import("./actions/StreamActions").MinimizeToggleAction | import("./actions/StreamActions").RemoveStreamTrackAction | import("./actions/StreamActions").AddStreamTrackAction | import("./actions/NotifyActions").NotificationAddAction | import("./actions/ChatActions").MessageAddAction | import("./actions/NicknameActions").NicknameSetAction | import("./actions/PeerActions").RemovePeerAction | import("./actions/PeerActions").AddPeerAction | import("./actions/MediaActions").MediaVideoConstraintAction | import("./actions/MediaActions").MediaAudioConstraintAction | import("./async").PendingAction<"MEDIA_ENUMERATE", import("./actions/MediaActions").MediaDevice[]> | import("./async").ResolvedAction<"MEDIA_ENUMERATE", import("./actions/MediaActions").MediaDevice[]> | import("./async").RejectedAction<"MEDIA_ENUMERATE"> | import("./async").PendingAction<"MEDIA_STREAM", import("./actions/StreamActions").AddStreamPayload> | import("./async").ResolvedAction<"MEDIA_STREAM", import("./actions/StreamActions").AddStreamPayload> | import("./async").RejectedAction<"MEDIA_STREAM"> | import("./async").PendingAction<"MEDIA_PLAY", void> | import("./async").ResolvedAction<"MEDIA_PLAY", void> | import("./async").RejectedAction<"MEDIA_PLAY"> | import("./async").PendingAction<"DIAL", void> | import("./async").ResolvedAction<"DIAL", void> | import("./async").RejectedAction<"DIAL"> | import("./actions/CallActions").HangUpAction> & {
    dispatch: unknown;
};
export default _default;
export declare type Store = ReturnType<typeof createStore>;
declare type TGetState<T> = T extends ReduxStore<infer State> ? State : never;
export declare type State = TGetState<Store>;
export declare type GetState = () => State;
export declare type Dispatch = ThunkDispatch<State, undefined, Action>;
export declare type ThunkResult<R> = ThunkAction<R, State, undefined, Action>;
//# sourceMappingURL=store.d.ts.map
import Peer from 'simple-peer';
import { Dispatch, GetState } from '../store';
import { ClientSocket } from '../socket';
export interface Peers {
    [id: string]: Peer.Instance;
}
export interface PeerHandlerOptions {
    socket: ClientSocket;
    user: {
        id: string;
    };
    dispatch: Dispatch;
    getState: GetState;
}
export interface CreatePeerOptions {
    socket: ClientSocket;
    user: {
        id: string;
    };
    initiator: string;
    stream?: MediaStream;
}
/**
 * @param {Object} options
 * @param {Socket} options.socket
 * @param {User} options.user
 * @param {String} options.user.id
 * @param {Boolean} [options.initiator=false]
 * @param {MediaStream} [options.stream]
 */
export declare function createPeer(options: CreatePeerOptions): (dispatch: Dispatch, getState: GetState) => void;
export interface AddPeerParams {
    peer: Peer.Instance;
    userId: string;
}
export interface AddPeerAction {
    type: 'PEER_ADD';
    payload: AddPeerParams;
}
export declare const addPeer: (payload: AddPeerParams) => AddPeerAction;
export interface RemovePeerAction {
    type: 'PEER_REMOVE';
    payload: {
        userId: string;
    };
}
export declare const removePeer: (userId: string) => RemovePeerAction;
export declare type PeerAction = AddPeerAction | RemovePeerAction;
export interface TextMessage {
    type: 'text';
    payload: string;
}
export interface Base64File {
    name: string;
    size: number;
    type: string;
    data: string;
}
export interface FileMessage {
    type: 'file';
    payload: Base64File;
}
export interface NicknameMessage {
    type: 'nickname';
    payload: {
        nickname: string;
    };
}
export declare type Message = TextMessage | FileMessage | NicknameMessage;
export declare const sendMessage: (message: Message) => (dispatch: Dispatch, getState: GetState) => void;
export declare const sendFile: (file: File) => (dispatch: Dispatch, getState: GetState) => Promise<void>;
//# sourceMappingURL=PeerActions.d.ts.map
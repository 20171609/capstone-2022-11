"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var ChatActions = __importStar(require("./ChatActions"));
var NicknameActions = __importStar(require("./NicknameActions"));
var NotifyActions = __importStar(require("./NotifyActions"));
var StreamActions = __importStar(require("./StreamActions"));
var constants = __importStar(require("../constants"));
var simple_peer_1 = __importDefault(require("simple-peer"));
var forEach_1 = __importDefault(require("lodash/forEach"));
var debug_1 = __importDefault(require("debug"));
var window_1 = require("../window");
var nickname_1 = require("../nickname");
var debug = debug_1["default"]('peercalls');
var PeerHandler = /** @class */ (function () {
    function PeerHandler(options) {
        var _this = this;
        this.options = options;
        this.handleError = function (err) {
            var _a = _this, dispatch = _a.dispatch, getState = _a.getState, user = _a.user;
            debug('peer: %s, error %s', user.id, err.stack);
            dispatch(NotifyActions.error('A peer connection error occurred'));
            var peer = getState().peers[user.id];
            peer && peer.destroy();
            dispatch(exports.removePeer(user.id));
        };
        this.handleSignal = function (signal) {
            var _a = _this, socket = _a.socket, user = _a.user;
            debug('peer: %s, signal: %o', user.id, signal);
            var payload = { userId: user.id, signal: signal };
            socket.emit('signal', payload);
        };
        this.handleConnect = function () {
            var _a = _this, dispatch = _a.dispatch, user = _a.user, getState = _a.getState;
            debug('peer: %s, connect', user.id);
            dispatch(NotifyActions.warning('Peer connection established'));
            var state = getState();
            var peer = state.peers[user.id];
            var localStream = state.streams[constants.ME];
            localStream && localStream.streams.forEach(function (s) {
                // If the local user pressed join call before this peer has joined the
                // call, now is the time to share local media stream with the peer since
                // we no longer automatically send the stream to the peer.
                s.stream.getTracks().forEach(function (track) {
                    peer.addTrack(track, s.stream);
                });
            });
            var nickname = state.nicknames[constants.ME];
            if (nickname) {
                sendData(peer, {
                    payload: { nickname: nickname },
                    type: 'nickname'
                });
            }
        };
        this.handleTrack = function (track, stream) {
            var _a = _this, user = _a.user, dispatch = _a.dispatch;
            var userId = user.id;
            debug('peer: %s, track: %s', userId, track.id);
            // Listen to mute event to know when a track was removed
            // https://github.com/feross/simple-peer/issues/512
            track.onmute = function () {
                debug('peer: %s, track muted: %s', userId, track.id);
                dispatch(StreamActions.removeTrack({
                    userId: userId,
                    stream: stream,
                    track: track
                }));
            };
            track.onunmute = function () {
                debug('peer: %s, track unmuted: %s', userId, track.id);
                dispatch(StreamActions.addTrack({
                    userId: userId,
                    stream: stream,
                    track: track
                }));
            };
            dispatch(StreamActions.addStream({
                userId: userId,
                stream: stream
            }));
        };
        this.handleData = function (buffer) {
            var _a = _this, dispatch = _a.dispatch, getState = _a.getState, user = _a.user;
            var state = getState();
            var message = JSON.parse(new window.TextDecoder('utf-8').decode(buffer));
            debug('peer: %s, message: %o', user.id, message);
            switch (message.type) {
                case 'file':
                    dispatch(ChatActions.addMessage({
                        userId: user.id,
                        message: message.payload.name,
                        timestamp: new Date().toLocaleString(),
                        image: message.payload.data
                    }));
                    break;
                case 'nickname':
                    dispatch(ChatActions.addMessage({
                        userId: constants.PEERCALLS,
                        message: 'User ' + nickname_1.getNickname(state.nicknames, user.id) +
                            ' is now known as ' + (message.payload.nickname || user.id),
                        timestamp: new Date().toLocaleString(),
                        system: true,
                        image: undefined
                    }));
                    dispatch(NicknameActions.setNickname({
                        userId: user.id,
                        nickname: message.payload.nickname
                    }));
                    break;
                default:
                    dispatch(ChatActions.addMessage({
                        userId: user.id,
                        message: message.payload,
                        timestamp: new Date().toLocaleString(),
                        image: undefined
                    }));
            }
        };
        this.handleClose = function () {
            var _a = _this, dispatch = _a.dispatch, user = _a.user, getState = _a.getState;
            dispatch(NotifyActions.error('Peer connection closed'));
            var state = getState();
            var userStreams = state.streams[user.id];
            userStreams && userStreams.streams.forEach(function (s) {
                dispatch(StreamActions.removeStream(user.id, s.stream));
            });
            dispatch(exports.removePeer(user.id));
        };
        this.socket = options.socket;
        this.user = options.user;
        this.dispatch = options.dispatch;
        this.getState = options.getState;
    }
    return PeerHandler;
}());
/**
 * @param {Object} options
 * @param {Socket} options.socket
 * @param {User} options.user
 * @param {String} options.user.id
 * @param {Boolean} [options.initiator=false]
 * @param {MediaStream} [options.stream]
 */
function createPeer(options) {
    var socket = options.socket, user = options.user, initiator = options.initiator, stream = options.stream;
    return function (dispatch, getState) {
        var userId = user.id;
        debug('create peer: %s, stream:', userId, stream);
        dispatch(NotifyActions.warning('Connecting to peer...'));
        var oldPeer = getState().peers[userId];
        if (oldPeer) {
            dispatch(NotifyActions.info('Cleaning up old connection...'));
            oldPeer.destroy();
            dispatch(exports.removePeer(userId));
        }
        var peer = new simple_peer_1["default"]({
            initiator: userId === initiator,
            config: { iceServers: window_1.iceServers },
            // Allow the peer to receive video, even if it's not sending stream:
            // https://github.com/feross/simple-peer/issues/95
            offerConstraints: {
                offerToReceiveAudio: true,
                offerToReceiveVideo: true
            },
            stream: stream
        });
        var handler = new PeerHandler({
            socket: socket,
            user: user,
            dispatch: dispatch,
            getState: getState
        });
        peer.once(constants.PEER_EVENT_ERROR, handler.handleError);
        peer.once(constants.PEER_EVENT_CONNECT, handler.handleConnect);
        peer.once(constants.PEER_EVENT_CLOSE, handler.handleClose);
        peer.on(constants.PEER_EVENT_SIGNAL, handler.handleSignal);
        peer.on(constants.PEER_EVENT_TRACK, handler.handleTrack);
        peer.on(constants.PEER_EVENT_DATA, handler.handleData);
        dispatch(exports.addPeer({ peer: peer, userId: userId }));
    };
}
exports.createPeer = createPeer;
exports.addPeer = function (payload) { return ({
    type: constants.PEER_ADD,
    payload: payload
}); };
exports.removePeer = function (userId) { return ({
    type: constants.PEER_REMOVE,
    payload: { userId: userId }
}); };
function sendData(peer, message) {
    peer.send(JSON.stringify(message));
}
exports.sendMessage = function (message) {
    return function (dispatch, getState) {
        var peers = getState().peers;
        debug('Sending message type: %s to %s peers.', message.type, Object.keys(peers).length);
        switch (message.type) {
            case 'file':
                dispatch(ChatActions.addMessage({
                    userId: constants.ME,
                    message: 'Send file: "' +
                        message.payload.name + '" to all peers',
                    timestamp: new Date().toLocaleString(),
                    image: message.payload.data
                }));
                break;
            case 'nickname':
                dispatch(ChatActions.addMessage({
                    userId: constants.PEERCALLS,
                    message: 'You are now known as: ' + message.payload.nickname,
                    timestamp: new Date().toLocaleString(),
                    system: true,
                    image: undefined
                }));
                dispatch(NicknameActions.setNickname({
                    userId: constants.ME,
                    nickname: message.payload.nickname
                }));
                break;
            default:
                dispatch(ChatActions.addMessage({
                    userId: constants.ME,
                    message: message.payload,
                    timestamp: new Date().toLocaleString(),
                    image: undefined
                }));
        }
        forEach_1["default"](peers, function (peer, userId) {
            sendData(peer, message);
        });
    };
};
exports.sendFile = function (file) {
    return function (dispatch, getState) { return __awaiter(void 0, void 0, void 0, function () {
        var name, size, type, reader, base64File;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    name = file.name, size = file.size, type = file.type;
                    if (!window.FileReader) {
                        dispatch(NotifyActions.error('File API is not supported by your browser'));
                        return [2 /*return*/];
                    }
                    reader = new window.FileReader();
                    return [4 /*yield*/, new Promise(function (resolve) {
                            reader.addEventListener('load', function () {
                                resolve({
                                    name: name,
                                    size: size,
                                    type: type,
                                    data: reader.result
                                });
                            });
                            reader.readAsDataURL(file);
                        })];
                case 1:
                    base64File = _a.sent();
                    exports.sendMessage({ payload: base64File, type: 'file' })(dispatch, getState);
                    return [2 /*return*/];
            }
        });
    }); };
};
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('../window');
jest.mock('simple-peer');
jest.useFakeTimers();
var PeerActions = __importStar(require("./PeerActions"));
var simple_peer_1 = __importDefault(require("simple-peer"));
var events_1 = require("events");
var store_1 = require("../store");
var constants_1 = require("../constants");
describe('PeerActions', function () {
    function createSocket() {
        var socket = new events_1.EventEmitter();
        socket.id = 'socket-id-user-1';
        return socket;
    }
    var socket;
    var stream;
    var user;
    var store;
    var instances;
    var dispatch;
    var getState;
    var PeerMock;
    beforeEach(function () {
        store = store_1.createStore();
        dispatch = store.dispatch;
        getState = store.getState;
        user = { id: 'user1' };
        socket = createSocket();
        instances = simple_peer_1["default"].instances = [];
        simple_peer_1["default"].mockClear();
        stream = { stream: true };
        PeerMock = simple_peer_1["default"];
    });
    describe('create', function () {
        it('creates a new peer', function () {
            PeerActions.createPeer({ socket: socket, user: user, initiator: 'other-user', stream: stream })(dispatch, getState);
            expect(instances.length).toBe(1);
            expect(PeerMock.mock.calls.length).toBe(1);
            expect(PeerMock.mock.calls[0][0].initiator).toBe(false);
            expect(PeerMock.mock.calls[0][0].stream).toBe(stream);
        });
        it('sets initiator correctly', function () {
            PeerActions
                .createPeer({
                socket: socket, user: user, initiator: user.id, stream: stream
            })(dispatch, getState);
            expect(instances.length).toBe(1);
            expect(PeerMock.mock.calls.length).toBe(1);
            expect(PeerMock.mock.calls[0][0].initiator).toBe(true);
            expect(PeerMock.mock.calls[0][0].stream).toBe(stream);
        });
        it('destroys old peer before creating new one', function () {
            PeerActions.createPeer({ socket: socket, user: user, initiator: 'user2', stream: stream })(dispatch, getState);
            PeerActions.createPeer({ socket: socket, user: user, initiator: 'user2', stream: stream })(dispatch, getState);
            expect(instances.length).toBe(2);
            expect(PeerMock.mock.calls.length).toBe(2);
            expect(instances[0].destroy.mock.calls.length).toBe(1);
            expect(instances[1].destroy.mock.calls.length).toBe(0);
        });
    });
    describe('events', function () {
        function createPeer() {
            PeerActions.createPeer({ socket: socket, user: user, initiator: 'user1', stream: stream })(dispatch, getState);
            var peer = instances[instances.length - 1];
            return peer;
        }
        describe('connect', function () {
            it('dispatches peer connection established message', function () {
                createPeer().emit('connect');
                // TODO
            });
            it('sends existing local streams to new peer', function () {
                PeerActions.sendMessage({
                    payload: { nickname: 'john' },
                    type: 'nickname'
                })(dispatch, getState);
                var peer = createPeer();
                peer.emit('connect');
            });
            it('sends current nickname to new peer', function () {
            });
        });
        describe('data', function () {
            beforeEach(function () {
                window.TextDecoder = /** @class */ (function () {
                    function TextDecoder(encoding) {
                        this.encoding = encoding;
                    }
                    TextDecoder.prototype.decode = function (object) {
                        return object.toString(this.encoding);
                    };
                    return TextDecoder;
                }());
            });
            it('decodes a message', function () {
                var peer = createPeer();
                var message = {
                    type: 'text',
                    payload: 'test'
                };
                var object = JSON.stringify(message);
                peer.emit('data', Buffer.from(object, 'utf-8'));
                var list = store.getState().messages.list;
                expect(list.length).toBeGreaterThan(0);
                expect(list[list.length - 1]).toEqual({
                    userId: user.id,
                    timestamp: jasmine.any(String),
                    image: undefined,
                    message: 'test'
                });
            });
        });
    });
    describe('get', function () {
        it('returns undefined when not found', function () {
            var peers = store.getState().peers;
            expect(peers[user.id]).not.toBeDefined();
        });
        it('returns Peer instance when found', function () {
            PeerActions.createPeer({ socket: socket, user: user, initiator: 'user2', stream: stream })(dispatch, getState);
            var peers = store.getState().peers;
            expect(peers[user.id]).toBe(instances[0]);
        });
    });
    describe('destroyPeers', function () {
        it('destroys all peers and removes them', function () {
            PeerActions.createPeer({
                socket: socket, user: { id: 'user2' }, initiator: 'user2', stream: stream
            })(dispatch, getState);
            PeerActions.createPeer({
                socket: socket, user: { id: 'user3' }, initiator: 'user3', stream: stream
            })(dispatch, getState);
            store.dispatch({
                type: constants_1.HANG_UP
            });
            jest.runAllTimers();
            expect(instances[0].destroy.mock.calls.length).toEqual(1);
            expect(instances[1].destroy.mock.calls.length).toEqual(1);
            var peers = store.getState().peers;
            expect(Object.keys(peers)).toEqual([]);
        });
    });
    describe('sendMessage', function () {
        beforeEach(function () {
            PeerActions.createPeer({
                socket: socket, user: { id: 'user2' }, initiator: 'user2', stream: stream
            })(dispatch, getState);
            PeerActions.createPeer({
                socket: socket, user: { id: 'user3' }, initiator: 'user3', stream: stream
            })(dispatch, getState);
        });
        it('sends a text message to all peers', function () {
            PeerActions.sendMessage({ payload: 'test', type: 'text' })(dispatch, getState);
            var peers = store.getState().peers;
            expect(peers['user2'].send.mock.calls)
                .toEqual([['{"payload":"test","type":"text"}']]);
            expect(peers['user3'].send.mock.calls)
                .toEqual([['{"payload":"test","type":"text"}']]);
        });
        it('sends a nickname change to all peers', function () {
            PeerActions.sendMessage({
                payload: { nickname: 'john' },
                type: 'nickname'
            })(dispatch, getState);
            var _a = store.getState(), nicknames = _a.nicknames, peers = _a.peers;
            expect(peers['user2'].send.mock.calls)
                .toEqual([['{"payload":{"nickname":"john"},"type":"nickname"}']]);
            expect(peers['user3'].send.mock.calls)
                .toEqual([['{"payload":{"nickname":"john"},"type":"nickname"}']]);
            expect(nicknames[constants_1.ME]).toBe('john');
        });
    });
    describe('receive message (handleData)', function () {
        var peer;
        function emitData(message) {
            peer.emit(constants_1.PEER_EVENT_DATA, JSON.stringify(message));
        }
        beforeEach(function () {
            PeerActions.createPeer({
                socket: socket, user: { id: 'user2' }, initiator: 'user2', stream: stream
            })(dispatch, getState);
            peer = store.getState().peers['user2'];
        });
        it('handles a message', function () {
            emitData({
                payload: 'hello',
                type: 'text'
            });
            expect(store.getState().messages.list)
                .toEqual([{
                    message: 'Connecting to peer...',
                    userId: constants_1.PEERCALLS,
                    system: true,
                    timestamp: jasmine.any(String)
                }, {
                    message: 'hello',
                    userId: 'user2',
                    image: undefined,
                    timestamp: jasmine.any(String)
                }]);
        });
        it('handles nickname changes', function () {
            emitData({
                payload: { nickname: 'john' },
                type: 'nickname'
            });
            emitData({
                payload: { nickname: 'john2' },
                type: 'nickname'
            });
            expect(store.getState().messages.list)
                .toEqual([{
                    message: 'Connecting to peer...',
                    userId: constants_1.PEERCALLS,
                    system: true,
                    timestamp: jasmine.any(String)
                }, {
                    message: 'User user2 is now known as john',
                    system: true,
                    userId: constants_1.PEERCALLS,
                    image: undefined,
                    timestamp: jasmine.any(String)
                }, {
                    message: 'User john is now known as john2',
                    system: true,
                    userId: constants_1.PEERCALLS,
                    image: undefined,
                    timestamp: jasmine.any(String)
                }]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
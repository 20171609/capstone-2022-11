/// <reference types="simple-peer" />
import { GetAsyncAction } from '../async';
import * as NotifyActions from './NotifyActions';
export interface InitAction {
    type: 'INIT';
    payload: Promise<void>;
}
export declare const init: () => import("redux-thunk").ThunkAction<Promise<void>, import("redux").CombinedState<{
    notifications: Record<string, NotifyActions.Notification>;
    messages: import("../reducers/messages").MessagesState;
    media: import("../reducers/media").MediaState;
    nicknames: Record<string, string | undefined>;
    peers: Record<string, import("simple-peer").Instance>;
    streams: import("../reducers/streams").StreamsState;
    windowStates: import("../reducers/windowStates").WindowStates;
}>, undefined, import("redux").Action<any>>;
export declare const dial: () => import("../async").PendingAction<"DIAL", void>;
export declare type HangUpAction = {
    type: 'HANG_UP';
};
export declare const hangUp: () => HangUpAction;
export declare type DialAction = GetAsyncAction<ReturnType<typeof dial>>;
//# sourceMappingURL=CallActions.d.ts.map
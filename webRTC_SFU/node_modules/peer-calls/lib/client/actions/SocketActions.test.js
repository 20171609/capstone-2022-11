"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('simple-peer');
jest.mock('../window');
var SocketActions = __importStar(require("./SocketActions"));
var constants = __importStar(require("../constants"));
var simple_peer_1 = __importDefault(require("simple-peer"));
var events_1 = require("events");
var store_1 = require("../store");
var window_1 = require("../window");
describe('SocketActions', function () {
    var roomName = 'bla';
    var socket;
    var store;
    var dispatch;
    var getState;
    var instances;
    beforeEach(function () {
        socket = new events_1.EventEmitter();
        socket.id = 'a';
        store = store_1.createStore();
        getState = store.getState;
        dispatch = store.dispatch;
        instances = simple_peer_1["default"].instances = [];
    });
    var userA = {
        socketId: 'socket-a',
        userId: 'user-a'
    };
    var userId = userA.userId;
    var userB = {
        socketId: 'socket-b',
        userId: 'user-b'
    };
    var userC = {
        socketId: 'socket-c',
        userId: 'user-c'
    };
    describe('handshake', function () {
        describe('users', function () {
            beforeEach(function () {
                SocketActions.handshake({ socket: socket, roomName: roomName, userId: userId, store: store });
                var payload = {
                    users: [userA, userB],
                    initiator: userA.userId
                };
                socket.emit('users', payload);
                expect(instances.length).toBe(1);
            });
            it('adds a peer for each new user and keeps active connections', function () {
                var payload = {
                    users: [userA, userC],
                    initiator: userC.userId
                };
                socket.emit(constants.SOCKET_EVENT_USERS, payload);
                // then
                expect(instances.length).toBe(2);
                expect(instances[0].destroy.mock.calls.length).toBe(0);
                expect(instances[1].destroy.mock.calls.length).toBe(0);
            });
        });
        describe('signal', function () {
            var data;
            beforeEach(function () {
                data = {};
                SocketActions.handshake({ socket: socket, roomName: roomName, userId: userId, store: store });
                socket.emit('users', {
                    initiator: userA.userId,
                    users: [userA, userB]
                });
            });
            it('should forward signal to peer', function () {
                socket.emit('signal', {
                    userId: userB.userId,
                    signal: data
                });
                expect(instances.length).toBe(1);
                expect(instances[0].signal.mock.calls.length).toBe(1);
            });
            it('does nothing if no peer', function () {
                socket.emit('signal', {
                    userId: 'a',
                    signal: data
                });
                expect(instances.length).toBe(1);
                expect(instances[0].signal.mock.calls.length).toBe(0);
            });
        });
    });
    describe('peer events', function () {
        var peer;
        beforeEach(function () {
            var ready = false;
            socket.once('ready', function () { ready = true; });
            SocketActions.handshake({ socket: socket, roomName: roomName, userId: userId, store: store });
            socket.emit('users', {
                initiator: userA.userId,
                users: [userA, userB]
            });
            expect(instances.length).toBe(1);
            peer = instances[0];
            expect(ready).toBeDefined();
        });
        describe('error', function () {
            it('destroys peer', function () {
                peer.emit(constants.PEER_EVENT_ERROR, new Error('bla'));
                expect(peer.destroy.mock.calls.length).toBe(1);
            });
        });
        describe('signal', function () {
            it('emits socket signal with user id', function (done) {
                var signal = { bla: 'bla' };
                socket.once('signal', function (payload) {
                    expect(payload.userId).toEqual(userB.userId);
                    expect(payload.signal).toBe(signal);
                    done();
                });
                peer.emit('signal', signal);
            });
        });
        describe('stream', function () {
            it('adds a stream to streamStore', function () {
                var _a;
                var stream = {
                    getTracks: function () {
                        return [{
                                stop: jest.fn()
                            }];
                    }
                };
                peer.emit(constants.PEER_EVENT_TRACK, stream.getTracks()[0], stream);
                expect(store.getState().streams).toEqual((_a = {},
                    _a[userB.userId] = {
                        userId: userB.userId,
                        streams: [{
                                stream: stream,
                                type: undefined,
                                url: jasmine.any(String)
                            }]
                    },
                    _a));
            });
        });
        describe('close', function () {
            beforeEach(function () {
                var _a;
                var stream = new window_1.MediaStream();
                var track = {};
                peer.emit(constants.PEER_EVENT_TRACK, track, stream);
                // test stream with two tracks
                peer.emit(constants.PEER_EVENT_TRACK, track, stream);
                expect(store.getState().streams).toEqual((_a = {},
                    _a[userB.userId] = {
                        userId: userB.userId,
                        streams: [{
                                stream: stream,
                                type: undefined,
                                url: jasmine.any(String)
                            }]
                    },
                    _a));
            });
            it('removes stream & peer from store', function () {
                var _a;
                expect(store.getState().peers).toEqual((_a = {}, _a[userB.userId] = peer, _a));
                peer.emit('close');
                expect(store.getState().streams).toEqual({});
                expect(store.getState().peers).toEqual({});
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
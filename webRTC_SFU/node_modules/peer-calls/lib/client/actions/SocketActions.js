"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var NotifyActions = __importStar(require("../actions/NotifyActions"));
var PeerActions = __importStar(require("../actions/PeerActions"));
var constants = __importStar(require("../constants"));
var debug_1 = __importDefault(require("debug"));
var debug = debug_1["default"]('peercalls');
var SocketHandler = /** @class */ (function () {
    function SocketHandler(options) {
        var _this = this;
        this.handleSignal = function (_a) {
            var userId = _a.userId, signal = _a.signal;
            var getState = _this.getState;
            var peer = getState().peers[userId];
            // debug('socket signal, userId: %s, signal: %o', userId, signal);
            if (!peer)
                return debug('user: %s, no peer found', userId);
            peer.signal(signal);
        };
        this.handleUsers = function (_a) {
            var initiator = _a.initiator, users = _a.users;
            var _b = _this, socket = _b.socket, stream = _b.stream, dispatch = _b.dispatch, getState = _b.getState;
            debug('socket users: %o', users);
            _this.dispatch(NotifyActions.info('Connected users: {0}', users.length));
            var peers = _this.getState().peers;
            debug('active peers: %o', Object.keys(peers));
            users
                .filter(function (user) {
                return user.userId && !peers[user.userId] && user.userId !== _this.userId;
            })
                .forEach(function (user) { return PeerActions.createPeer({
                socket: socket,
                user: {
                    // users without id should be filtered out
                    id: user.userId
                },
                initiator: initiator,
                stream: stream
            })(dispatch, getState); });
        };
        this.socket = options.socket;
        this.roomName = options.roomName;
        this.stream = options.stream;
        this.dispatch = options.dispatch;
        this.getState = options.getState;
        this.userId = options.userId;
    }
    return SocketHandler;
}());
function handshake(options) {
    var socket = options.socket, roomName = options.roomName, stream = options.stream, userId = options.userId, store = options.store;
    var handler = new SocketHandler({
        socket: socket,
        roomName: roomName,
        stream: stream,
        dispatch: store.dispatch,
        getState: store.getState,
        userId: userId
    });
    // remove listeneres to make socket reusable
    removeEventListeners(socket);
    socket.on(constants.SOCKET_EVENT_SIGNAL, handler.handleSignal);
    socket.on(constants.SOCKET_EVENT_USERS, handler.handleUsers);
    debug('userId: %s', userId);
    socket.emit(constants.SOCKET_EVENT_READY, {
        room: roomName,
        userId: userId
    });
}
exports.handshake = handshake;
function removeEventListeners(socket) {
    var ee = socket;
    (ee.removeAllListeners)(constants.SOCKET_EVENT_SIGNAL);
    (ee.removeAllListeners)(constants.SOCKET_EVENT_USERS);
}
exports.removeEventListeners = removeEventListeners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29ja2V0QWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvYWN0aW9ucy9Tb2NrZXRBY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHNFQUF5RDtBQUN6RCxrRUFBcUQ7QUFDckQsc0RBQXlDO0FBQ3pDLGdEQUEwQjtBQU0xQixJQUFNLEtBQUssR0FBRyxrQkFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBV2pDO0lBUUUsdUJBQWEsT0FBNkI7UUFBMUMsaUJBT0M7UUFDRCxpQkFBWSxHQUFHLFVBQUMsRUFBeUM7Z0JBQXZDLGtCQUFNLEVBQUUsa0JBQU07WUFDdEIsSUFBQSx5QkFBUSxDQUFTO1lBQ3pCLElBQU0sSUFBSSxHQUFHLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNyQyxrRUFBa0U7WUFDbEUsSUFBSSxDQUFDLElBQUk7Z0JBQUUsT0FBTyxLQUFLLENBQUMseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNyQixDQUFDLENBQUE7UUFDRCxnQkFBVyxHQUFHLFVBQUMsRUFBMEM7Z0JBQXhDLHdCQUFTLEVBQUUsZ0JBQUs7WUFDekIsSUFBQSxVQUE2QyxFQUEzQyxrQkFBTSxFQUFFLGtCQUFNLEVBQUUsc0JBQVEsRUFBRSxzQkFBaUIsQ0FBQTtZQUNuRCxLQUFLLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDaEMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1lBQy9ELElBQUEsOEJBQUssQ0FBb0I7WUFDakMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUU3QyxLQUFLO2lCQUNKLE1BQU0sQ0FDTCxVQUFBLElBQUk7Z0JBQ0osT0FBQSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUksQ0FBQyxNQUFNO1lBQWpFLENBQWlFLENBQUM7aUJBQ25FLE9BQU8sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLFdBQVcsQ0FBQyxVQUFVLENBQUM7Z0JBQ3RDLE1BQU0sUUFBQTtnQkFDTixJQUFJLEVBQUU7b0JBQ0osMENBQTBDO29CQUMxQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU87aUJBQ2pCO2dCQUNELFNBQVMsV0FBQTtnQkFDVCxNQUFNLFFBQUE7YUFDUCxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQVJMLENBUUssQ0FBQyxDQUFBO1FBQ3pCLENBQUMsQ0FBQTtRQWxDQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUE7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUE7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtJQUM5QixDQUFDO0lBNkJILG9CQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQztBQVVELFNBQWdCLFNBQVMsQ0FBRSxPQUF5QjtJQUMxQyxJQUFBLHVCQUFNLEVBQUUsMkJBQVEsRUFBRSx1QkFBTSxFQUFFLHVCQUFNLEVBQUUscUJBQUssQ0FBWTtJQUUzRCxJQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQztRQUNoQyxNQUFNLFFBQUE7UUFDTixRQUFRLFVBQUE7UUFDUixNQUFNLFFBQUE7UUFDTixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7UUFDeEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1FBQ3hCLE1BQU0sUUFBQTtLQUNQLENBQUMsQ0FBQTtJQUVGLDRDQUE0QztJQUM1QyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUU1QixNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDOUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRTVELEtBQUssQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUU7UUFDeEMsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLFFBQUE7S0FDUCxDQUFDLENBQUE7QUFDSixDQUFDO0FBdkJELDhCQXVCQztBQUVELFNBQWdCLG9CQUFvQixDQUFFLE1BQW9CO0lBQ3hELElBQU0sRUFBRSxHQUFHLE1BQWlDLENBQzNDO0lBQUEsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FDdEQ7SUFBQSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQ3hELENBQUM7QUFKRCxvREFJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE5vdGlmeUFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9Ob3RpZnlBY3Rpb25zJ1xuaW1wb3J0ICogYXMgUGVlckFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9QZWVyQWN0aW9ucydcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMnXG5pbXBvcnQgX2RlYnVnIGZyb20gJ2RlYnVnJ1xuaW1wb3J0IHsgU3RvcmUsIERpc3BhdGNoLCBHZXRTdGF0ZSB9IGZyb20gJy4uL3N0b3JlJ1xuaW1wb3J0IHsgQ2xpZW50U29ja2V0IH0gZnJvbSAnLi4vc29ja2V0J1xuaW1wb3J0IHsgU29ja2V0RXZlbnQgfSBmcm9tICcuLi8uLi9zaGFyZWQnXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXG5cbmNvbnN0IGRlYnVnID0gX2RlYnVnKCdwZWVyY2FsbHMnKVxuXG5leHBvcnQgaW50ZXJmYWNlIFNvY2tldEhhbmRsZXJPcHRpb25zIHtcbiAgc29ja2V0OiBDbGllbnRTb2NrZXRcbiAgcm9vbU5hbWU6IHN0cmluZ1xuICBzdHJlYW0/OiBNZWRpYVN0cmVhbVxuICBkaXNwYXRjaDogRGlzcGF0Y2hcbiAgZ2V0U3RhdGU6IEdldFN0YXRlXG4gIHVzZXJJZDogc3RyaW5nXG59XG5cbmNsYXNzIFNvY2tldEhhbmRsZXIge1xuICBzb2NrZXQ6IENsaWVudFNvY2tldFxuICByb29tTmFtZTogc3RyaW5nXG4gIHN0cmVhbT86IE1lZGlhU3RyZWFtXG4gIGRpc3BhdGNoOiBEaXNwYXRjaFxuICBnZXRTdGF0ZTogR2V0U3RhdGVcbiAgdXNlcklkOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvciAob3B0aW9uczogU29ja2V0SGFuZGxlck9wdGlvbnMpIHtcbiAgICB0aGlzLnNvY2tldCA9IG9wdGlvbnMuc29ja2V0XG4gICAgdGhpcy5yb29tTmFtZSA9IG9wdGlvbnMucm9vbU5hbWVcbiAgICB0aGlzLnN0cmVhbSA9IG9wdGlvbnMuc3RyZWFtXG4gICAgdGhpcy5kaXNwYXRjaCA9IG9wdGlvbnMuZGlzcGF0Y2hcbiAgICB0aGlzLmdldFN0YXRlID0gb3B0aW9ucy5nZXRTdGF0ZVxuICAgIHRoaXMudXNlcklkID0gb3B0aW9ucy51c2VySWRcbiAgfVxuICBoYW5kbGVTaWduYWwgPSAoeyB1c2VySWQsIHNpZ25hbCB9OiBTb2NrZXRFdmVudFsnc2lnbmFsJ10pID0+IHtcbiAgICBjb25zdCB7IGdldFN0YXRlIH0gPSB0aGlzXG4gICAgY29uc3QgcGVlciA9IGdldFN0YXRlKCkucGVlcnNbdXNlcklkXVxuICAgIC8vIGRlYnVnKCdzb2NrZXQgc2lnbmFsLCB1c2VySWQ6ICVzLCBzaWduYWw6ICVvJywgdXNlcklkLCBzaWduYWwpO1xuICAgIGlmICghcGVlcikgcmV0dXJuIGRlYnVnKCd1c2VyOiAlcywgbm8gcGVlciBmb3VuZCcsIHVzZXJJZClcbiAgICBwZWVyLnNpZ25hbChzaWduYWwpXG4gIH1cbiAgaGFuZGxlVXNlcnMgPSAoeyBpbml0aWF0b3IsIHVzZXJzIH06IFNvY2tldEV2ZW50Wyd1c2VycyddKSA9PiB7XG4gICAgY29uc3QgeyBzb2NrZXQsIHN0cmVhbSwgZGlzcGF0Y2gsIGdldFN0YXRlIH0gPSB0aGlzXG4gICAgZGVidWcoJ3NvY2tldCB1c2VyczogJW8nLCB1c2VycylcbiAgICB0aGlzLmRpc3BhdGNoKE5vdGlmeUFjdGlvbnMuaW5mbygnQ29ubmVjdGVkIHVzZXJzOiB7MH0nLCB1c2Vycy5sZW5ndGgpKVxuICAgIGNvbnN0IHsgcGVlcnMgfSA9IHRoaXMuZ2V0U3RhdGUoKVxuICAgIGRlYnVnKCdhY3RpdmUgcGVlcnM6ICVvJywgT2JqZWN0LmtleXMocGVlcnMpKVxuXG4gICAgdXNlcnNcbiAgICAuZmlsdGVyKFxuICAgICAgdXNlciA9PlxuICAgICAgdXNlci51c2VySWQgJiYgIXBlZXJzW3VzZXIudXNlcklkXSAmJiB1c2VyLnVzZXJJZCAhPT0gdGhpcy51c2VySWQpXG4gICAgLmZvckVhY2godXNlciA9PiBQZWVyQWN0aW9ucy5jcmVhdGVQZWVyKHtcbiAgICAgIHNvY2tldCxcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgLy8gdXNlcnMgd2l0aG91dCBpZCBzaG91bGQgYmUgZmlsdGVyZWQgb3V0XG4gICAgICAgIGlkOiB1c2VyLnVzZXJJZCEsXG4gICAgICB9LFxuICAgICAgaW5pdGlhdG9yLFxuICAgICAgc3RyZWFtLFxuICAgIH0pKGRpc3BhdGNoLCBnZXRTdGF0ZSkpXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBIYW5kc2hha2VPcHRpb25zIHtcbiAgc29ja2V0OiBDbGllbnRTb2NrZXRcbiAgc3RvcmU6IFN0b3JlXG4gIHJvb21OYW1lOiBzdHJpbmdcbiAgdXNlcklkOiBzdHJpbmdcbiAgc3RyZWFtPzogTWVkaWFTdHJlYW1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRzaGFrZSAob3B0aW9uczogSGFuZHNoYWtlT3B0aW9ucykge1xuICBjb25zdCB7IHNvY2tldCwgcm9vbU5hbWUsIHN0cmVhbSwgdXNlcklkLCBzdG9yZSB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgU29ja2V0SGFuZGxlcih7XG4gICAgc29ja2V0LFxuICAgIHJvb21OYW1lLFxuICAgIHN0cmVhbSxcbiAgICBkaXNwYXRjaDogc3RvcmUuZGlzcGF0Y2gsXG4gICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgIHVzZXJJZCxcbiAgfSlcblxuICAvLyByZW1vdmUgbGlzdGVuZXJlcyB0byBtYWtlIHNvY2tldCByZXVzYWJsZVxuICByZW1vdmVFdmVudExpc3RlbmVycyhzb2NrZXQpXG5cbiAgc29ja2V0Lm9uKGNvbnN0YW50cy5TT0NLRVRfRVZFTlRfU0lHTkFMLCBoYW5kbGVyLmhhbmRsZVNpZ25hbClcbiAgc29ja2V0Lm9uKGNvbnN0YW50cy5TT0NLRVRfRVZFTlRfVVNFUlMsIGhhbmRsZXIuaGFuZGxlVXNlcnMpXG5cbiAgZGVidWcoJ3VzZXJJZDogJXMnLCB1c2VySWQpXG4gIHNvY2tldC5lbWl0KGNvbnN0YW50cy5TT0NLRVRfRVZFTlRfUkVBRFksIHtcbiAgICByb29tOiByb29tTmFtZSxcbiAgICB1c2VySWQsXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyAoc29ja2V0OiBDbGllbnRTb2NrZXQpIHtcbiAgY29uc3QgZWUgPSBzb2NrZXQgYXMgdW5rbm93biBhcyBFdmVudEVtaXR0ZXJcbiAgOyhlZS5yZW1vdmVBbGxMaXN0ZW5lcnMpKGNvbnN0YW50cy5TT0NLRVRfRVZFTlRfU0lHTkFMKVxuICA7KGVlLnJlbW92ZUFsbExpc3RlbmVycykoY29uc3RhbnRzLlNPQ0tFVF9FVkVOVF9VU0VSUylcbn1cbiJdfQ==
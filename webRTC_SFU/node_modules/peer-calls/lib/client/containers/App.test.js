"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
jest.mock('../actions/CallActions');
jest.mock('../socket');
jest.mock('../window');
jest.useFakeTimers();
var react_1 = __importDefault(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var test_utils_1 = __importDefault(require("react-dom/test-utils"));
var react_redux_1 = require("react-redux");
var redux_1 = require("redux");
var CallActions_1 = require("../actions/CallActions");
var constants = __importStar(require("../constants"));
var reducers_1 = __importDefault(require("../reducers"));
var store_1 = require("../store");
var window_1 = require("../window");
var App_1 = __importDefault(require("./App"));
describe('App', function () {
    var initAction = { type: 'INIT' };
    var store;
    var state;
    var dispatchSpy;
    beforeEach(function () {
        state = {};
        CallActions_1.init.mockReturnValue(initAction);
        window.HTMLMediaElement.prototype.play = jest.fn();
    });
    afterEach(function () {
        if (dispatchSpy) {
            dispatchSpy.mockReset();
            dispatchSpy.mockRestore();
        }
    });
    var node;
    function render() {
        return __awaiter(this, void 0, void 0, function () {
            var div;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        store = redux_1.createStore(reducers_1["default"], state, redux_1.applyMiddleware.apply(void 0, store_1.middlewares));
                        dispatchSpy = jest.spyOn(store, 'dispatch');
                        div = document.createElement('div');
                        return [4 /*yield*/, new Promise(function (resolve) {
                                react_dom_1["default"].render(react_1["default"].createElement(react_redux_1.Provider, { store: store },
                                    react_1["default"].createElement("div", { ref: function (div) { return resolve(div); } },
                                        react_1["default"].createElement(App_1["default"], null))), div);
                            })];
                    case 1:
                        node = _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    describe('render', function () {
        it('renders without issues', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        _a.sent();
                        expect(node).toBeTruthy();
                        expect(CallActions_1.init.mock.calls.length).toBe(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('chat toggle', function () {
        it('toggles chat state', function () { return __awaiter(void 0, void 0, void 0, function () {
            var chatButton;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, render()];
                    case 1:
                        _a.sent();
                        chatButton = node.querySelector('.toolbar .button.chat');
                        expect(chatButton).toBeTruthy();
                        test_utils_1["default"].Simulate.click(chatButton);
                        test_utils_1["default"].Simulate.click(chatButton);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('state', function () {
        beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        state.streams = (_a = {},
                            _a[constants.ME] = {
                                userId: constants.ME,
                                streams: [{
                                        stream: new window_1.MediaStream(),
                                        type: constants.STREAM_TYPE_CAMERA,
                                        url: 'blob://'
                                    }]
                            },
                            _a['other-user'] = {
                                userId: 'other-user',
                                streams: [{
                                        stream: new window_1.MediaStream(),
                                        type: undefined,
                                        url: 'blob://'
                                    }]
                            },
                            _a);
                        state.peers = {
                            'other-user': {}
                        };
                        state.notifications = {
                            'notification1': {
                                id: 'notification1',
                                message: 'test',
                                type: 'warning'
                            }
                        };
                        return [4 /*yield*/, render()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        describe('video', function () {
            beforeEach(function () {
                dispatchSpy.mockClear();
            });
            it('forces play on click', function () {
                var video = node.querySelector('video');
                test_utils_1["default"].Simulate.mouseDown(video);
                test_utils_1["default"].Simulate.mouseUp(video);
                test_utils_1["default"].Simulate.click(video);
                expect(dispatchSpy.mock.calls[0][0].type).toBe(constants.MEDIA_PLAY);
            });
        });
        describe('video menu', function () {
            beforeEach(function () {
                dispatchSpy.mockClear();
            });
            it('minimizes the video on "Maximize" click', function () {
                var minimized = node.querySelectorAll('.videos-toolbar video');
                expect(minimized.length).toBe(0);
                var maximized = node.querySelectorAll('.videos-grid video');
                expect(maximized.length).toBe(2);
                var item = node.querySelector('.dropdown .action-minimize');
                expect(item).toBeTruthy();
                test_utils_1["default"].Simulate.click(item);
                expect(dispatchSpy.mock.calls).toEqual([[{
                            type: constants.MINIMIZE_TOGGLE,
                            payload: {
                                userId: constants.ME,
                                streamId: store.getState()
                                    .streams[constants.ME].streams[0].stream.id
                            }
                        }]]);
                minimized = node.querySelectorAll('.videos-toolbar video');
                expect(minimized.length).toBe(1);
                maximized = node.querySelectorAll('.videos-grid video');
                expect(maximized.length).toBe(1);
            });
            it('toggles object-fit on "Toggle Fit" click', function () {
                ['contain', ''].forEach(function (objectFit) {
                    var item = node.querySelector('.dropdown .action-toggle-fit');
                    expect(item).toBeTruthy();
                    test_utils_1["default"].Simulate.click(item);
                    var video = node.querySelector('video');
                    expect((video).style.objectFit).toBe(objectFit);
                    expect(dispatchSpy.mock.calls).toEqual([]);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
exports.__esModule = true;
var events_1 = require("events");
describe('TypedEmitter', function () {
    var stringMock;
    var numberMock;
    var valueMock;
    beforeEach(function () {
        stringMock = jest.fn();
        numberMock = jest.fn();
        valueMock = jest.fn();
    });
    var listener1 = function (arg) {
        stringMock(arg);
    };
    var listener2 = function (arg) {
        numberMock(arg);
    };
    var listener3 = function (arg) {
        valueMock(arg);
    };
    var emitter;
    beforeEach(function () {
        emitter = new events_1.EventEmitter();
        emitter.on('test1', listener1);
        emitter.on('test2', listener2);
        emitter.once('test3', listener3);
    });
    describe('on & on', function () {
        it('adds an event emitter', function () {
            emitter.emit('test1', 'value');
            emitter.emit('test2', 3);
            expect(stringMock.mock.calls).toEqual([['value']]);
            expect(numberMock.mock.calls).toEqual([[3]]);
        });
    });
    describe('once', function () {
        it('adds an event emitter for one use only', function () {
            emitter.emit('test3', { a: 1 });
            emitter.emit('test3', { a: 2 });
            expect(valueMock.mock.calls).toEqual([[{ a: 1 }]]);
        });
    });
    describe('removeListener', function () {
        it('removes an event listener', function () {
            emitter.removeListener('test1', listener1);
            emitter.removeListener('test2', listener2);
            emitter.emit('test1', 'value');
            emitter.emit('test2', 3);
            expect(stringMock.mock.calls).toEqual([]);
            expect(numberMock.mock.calls).toEqual([]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZWRFbWl0dGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkL1R5cGVkRW1pdHRlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQXFDO0FBRXJDLFFBQVEsQ0FBQyxjQUFjLEVBQUU7SUFFdkIsSUFBSSxVQUFxQyxDQUFBO0lBQ3pDLElBQUksVUFBcUMsQ0FBQTtJQUN6QyxJQUFJLFNBQW1DLENBQUE7SUFFdkMsVUFBVSxDQUFDO1FBQ1QsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUN0QixVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO1FBQ3RCLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFNLFNBQVMsR0FBRyxVQUFDLEdBQVc7UUFDNUIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtJQUVELElBQU0sU0FBUyxHQUFHLFVBQUMsR0FBVztRQUM1QixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDakIsQ0FBQyxDQUFBO0lBRUQsSUFBTSxTQUFTLEdBQUcsVUFBQyxHQUFVO1FBQzNCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNoQixDQUFDLENBQUE7SUFZRCxJQUFJLE9BQTZCLENBQUE7SUFDakMsVUFBVSxDQUFDO1FBQ1QsT0FBTyxHQUFHLElBQUkscUJBQVksRUFBRSxDQUFBO1FBQzVCLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQzlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ2xDLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLFNBQVMsRUFBRTtRQUNsQixFQUFFLENBQUMsdUJBQXVCLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxPQUFPLENBQUUsQ0FBQyxDQUFDLENBQUE7WUFDcEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUE7UUFDaEQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDZixFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQy9CLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdEQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN6QixFQUFFLENBQUMsMkJBQTJCLEVBQUU7WUFDOUIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDMUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMzQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlZEVtaXR0ZXIgfSBmcm9tICcuL1R5cGVkRW1pdHRlcidcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cydcblxuZGVzY3JpYmUoJ1R5cGVkRW1pdHRlcicsICgpID0+IHtcblxuICBsZXQgc3RyaW5nTW9jazogamVzdC5Nb2NrPHZvaWQsIFtzdHJpbmddPlxuICBsZXQgbnVtYmVyTW9jazogamVzdC5Nb2NrPHZvaWQsIFtudW1iZXJdPlxuICBsZXQgdmFsdWVNb2NrOiBqZXN0Lk1vY2s8dm9pZCwgW1ZhbHVlXT5cblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdHJpbmdNb2NrID0gamVzdC5mbigpXG4gICAgbnVtYmVyTW9jayA9IGplc3QuZm4oKVxuICAgIHZhbHVlTW9jayA9IGplc3QuZm4oKVxuICB9KVxuXG4gIGNvbnN0IGxpc3RlbmVyMSA9IChhcmc6IHN0cmluZykgPT4ge1xuICAgIHN0cmluZ01vY2soYXJnKVxuICB9XG5cbiAgY29uc3QgbGlzdGVuZXIyID0gKGFyZzogbnVtYmVyKSA9PiB7XG4gICAgbnVtYmVyTW9jayhhcmcpXG4gIH1cblxuICBjb25zdCBsaXN0ZW5lcjMgPSAoYXJnOiBWYWx1ZSkgPT4ge1xuICAgIHZhbHVlTW9jayhhcmcpXG4gIH1cblxuICBpbnRlcmZhY2UgVmFsdWUge1xuICAgIGE6IG51bWJlclxuICB9XG5cbiAgaW50ZXJmYWNlIEV2ZW50cyB7XG4gICAgdGVzdDE6IHN0cmluZ1xuICAgIHRlc3QyOiBudW1iZXJcbiAgICB0ZXN0MzogVmFsdWVcbiAgfVxuXG4gIGxldCBlbWl0dGVyOiBUeXBlZEVtaXR0ZXI8RXZlbnRzPlxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgZW1pdHRlci5vbigndGVzdDEnLCBsaXN0ZW5lcjEpXG4gICAgZW1pdHRlci5vbigndGVzdDInLCBsaXN0ZW5lcjIpXG4gICAgZW1pdHRlci5vbmNlKCd0ZXN0MycsIGxpc3RlbmVyMylcbiAgfSlcblxuICBkZXNjcmliZSgnb24gJiBvbicsICgpID0+IHtcbiAgICBpdCgnYWRkcyBhbiBldmVudCBlbWl0dGVyJywgKCkgPT4ge1xuICAgICAgZW1pdHRlci5lbWl0KCd0ZXN0MScsICd2YWx1ZScpXG4gICAgICBlbWl0dGVyLmVtaXQoJ3Rlc3QyJywgMylcbiAgICAgIGV4cGVjdChzdHJpbmdNb2NrLm1vY2suY2FsbHMpLnRvRXF1YWwoW1sgJ3ZhbHVlJyBdXSlcbiAgICAgIGV4cGVjdChudW1iZXJNb2NrLm1vY2suY2FsbHMpLnRvRXF1YWwoW1sgMyBdXSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdvbmNlJywgKCkgPT4ge1xuICAgIGl0KCdhZGRzIGFuIGV2ZW50IGVtaXR0ZXIgZm9yIG9uZSB1c2Ugb25seScsICgpID0+IHtcbiAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdDMnLCB7IGE6IDEgfSlcbiAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdDMnLCB7IGE6IDIgfSlcbiAgICAgIGV4cGVjdCh2YWx1ZU1vY2subW9jay5jYWxscykudG9FcXVhbChbWyB7IGE6IDEgfSBdXSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdyZW1vdmVMaXN0ZW5lcicsICgpID0+IHtcbiAgICBpdCgncmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lcicsICgpID0+IHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ3Rlc3QxJywgbGlzdGVuZXIxKVxuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcigndGVzdDInLCBsaXN0ZW5lcjIpXG4gICAgICBlbWl0dGVyLmVtaXQoJ3Rlc3QxJywgJ3ZhbHVlJylcbiAgICAgIGVtaXR0ZXIuZW1pdCgndGVzdDInLCAzKVxuICAgICAgZXhwZWN0KHN0cmluZ01vY2subW9jay5jYWxscykudG9FcXVhbChbXSlcbiAgICAgIGV4cGVjdChudW1iZXJNb2NrLm1vY2suY2FsbHMpLnRvRXF1YWwoW10pXG4gICAgfSlcbiAgfSlcblxufSlcbiJdfQ==
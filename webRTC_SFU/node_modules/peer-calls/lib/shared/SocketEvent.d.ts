/// <reference types="socket.io" />
import { TypedEmitter, TypedEmitterKeys } from './TypedEmitter';
import { SignalData } from 'simple-peer';
export interface User {
    socketId: string;
    userId?: string;
}
export interface Ready {
    room: string;
    userId: string;
}
export interface SocketEvent {
    users: {
        initiator: string;
        users: User[];
    };
    signal: {
        userId: string;
        signal: SignalData;
    };
    connect: undefined;
    disconnect: undefined;
    ready: Ready;
}
export declare type ServerSocket = Omit<SocketIO.Socket, TypedEmitterKeys> & TypedEmitter<SocketEvent>;
export declare type TypedIO = SocketIO.Server & {
    to(roomName: string): TypedEmitter<SocketEvent>;
};
//# sourceMappingURL=SocketEvent.d.ts.map
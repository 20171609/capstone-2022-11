declare type Callback<A> = (a: A) => void;
declare type Events = Record<string | symbol, any>;
export declare type TypedEmitterKeys = 'removeListener' | 'on' | 'once' | 'off' | 'emit';
export interface TypedEmitter<E extends Events> {
    removeListener<K extends keyof E>(t: K, callback: Callback<E[K]>): this;
    on<K extends keyof E>(t: K, callback: Callback<E[K]>): this;
    once<K extends keyof E>(t: K, callback: Callback<E[K]>): this;
    emit<K extends keyof E>(t: K, value: E[K]): void;
}
export {};
//# sourceMappingURL=TypedEmitter.d.ts.map
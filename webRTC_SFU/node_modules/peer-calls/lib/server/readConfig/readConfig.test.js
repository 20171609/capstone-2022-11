"use strict";
exports.__esModule = true;
var readConfig_1 = require("./readConfig");
var fs_1 = require("fs");
var path_1 = require("path");
describe('Config', function () {
    var config = new readConfig_1.ReadConfig({
        a: 1,
        b: {
            c: 'test1',
            d: 'test2'
        }
    });
    describe('get', function () {
        it('reads config values recursively', function () {
            expect(config.get('a')).toBe(1);
            expect(config.get('b')).toEqual({ c: 'test1', d: 'test2' });
            expect(config.get('b.c')).toBe('test1');
            expect(config.get('b.d')).toBe('test2');
        });
        it('throws an error when key does not exist', function () {
            expect(function () { return config.get('e'); }).toThrowError(/does not exist/);
            expect(function () { return config.get('e.f'); }).toThrowError(/does not exist/);
        });
        it('returns a default value when provided', function () {
            expect(config.get('b.c', 'test')).toBe('test1');
            expect(config.get('e', 1)).toBe(1);
            expect(config.get('e.f', 2)).toBe(2);
        });
    });
    describe('has', function () {
        it('returns true when config property exists, false otherwise', function () {
            expect(config.has('a')).toBe(true);
            expect(config.has('b')).toBe(true);
            expect(config.has('b.c')).toBe(true);
            expect(config.has('b.d')).toBe(true);
            expect(config.has('e')).toBe(false);
            expect(config.has('e.f')).toBe(false);
        });
    });
});
describe('findPackageRoot', function () {
    var dir = path_1.join(__dirname, 'package.json');
    beforeEach(function () {
        if (fs_1.existsSync(dir)) {
            fs_1.rmdirSync(dir);
        }
        fs_1.mkdirSync(dir);
    });
    afterEach(function () {
        if (fs_1.existsSync(dir)) {
            fs_1.rmdirSync(dir);
        }
    });
    it('finds package root folder', function () {
        expect(readConfig_1.findPackageRoot()).toEqual(jasmine.any(String));
    });
    it('finds package root folder', function () {
        expect(readConfig_1.findPackageRoot(__dirname)).toEqual(jasmine.any(String));
    });
    it('throws an error when not found', function () {
        expect(function () { return readConfig_1.findPackageRoot('/tmp'); }).toThrowError();
    });
});
describe('getAllConfigFilesInDirectory', function () {
    it('returns default and local files', function () {
        var files = readConfig_1.getAllConfigFilesInDirectory('/test', undefined);
        expect(files).toEqual([
            '/test/default.yaml',
            '/test/local.yaml',
        ]);
    });
    it('returns default, environment, and local files', function () {
        var files = readConfig_1.getAllConfigFilesInDirectory('/test', 'test');
        expect(files).toEqual([
            '/test/default.yaml',
            '/test/test.yaml',
            '/test/local.yaml',
        ]);
    });
});
describe('getAllConfigLocations', function () {
    it('returns package and local dirs when separate', function () {
        var files = readConfig_1.getAllConfigLocations('/test1', '/test2', 'test');
        expect(files).toEqual([
            '/test1/default.yaml',
            '/test1/test.yaml',
            '/test1/local.yaml',
            '/test2/default.yaml',
            '/test2/test.yaml',
            '/test2/local.yaml',
        ]);
    });
    it('returns only package dir when local dir is same', function () {
        var files = readConfig_1.getAllConfigLocations('/test', '/test', 'test');
        expect(files).toEqual([
            '/test/default.yaml',
            '/test/test.yaml',
            '/test/local.yaml',
        ]);
    });
    it('adds an extra config file', function () {
        var files = readConfig_1.getAllConfigLocations('/test', '/test', 'test', '/test/test-extra.yaml');
        expect(files).toEqual([
            '/test/default.yaml',
            '/test/test.yaml',
            '/test/local.yaml',
            '/test/test-extra.yaml',
        ]);
    });
    it('does not add extra config file when it is the same', function () {
        var files = readConfig_1.getAllConfigLocations('/test', '/test', 'test', '/test/test.yaml');
        expect(files).toEqual([
            '/test/default.yaml',
            '/test/test.yaml',
            '/test/local.yaml',
        ]);
    });
});
describe('toSnakeCase', function () {
    it('converts uppercase, underscore-separated words to snake case', function () {
        expect(readConfig_1.toSnakeCase('TEST')).toBe('test');
        expect(readConfig_1.toSnakeCase('TEST_1')).toBe('test1');
        expect(readConfig_1.toSnakeCase('TEST_VALUE')).toBe('testValue');
        expect(readConfig_1.toSnakeCase('TEST_VALUE_TWO')).toBe('testValueTwo');
    });
});
describe('mergeConfig', function () {
    it('merges source config into destination', function () {
        var dest = {
            a: 1,
            b: [2],
            c: {
                d: 3
            }
        };
        expect(readConfig_1.mergeConfig({
            a: 4,
            b: { value: 5 },
            c: {
                e: 6
            }
        }, dest)).toEqual({
            a: 4,
            b: { value: 5 },
            c: {
                d: 3,
                e: 6
            }
        });
    });
});
describe('readConfig', function () {
    it('reads from a number of files', function () {
        var result = readConfig_1.readConfig();
        expect(result).toBeInstanceOf(readConfig_1.ReadConfig);
    });
    it('reads from an extra config file', function () {
    });
    describe('errors', function () {
        var dir = path_1.join(__dirname, 'test.dir');
        beforeEach(function () {
            fs_1.mkdirSync(dir);
        });
        afterEach(function () {
            fs_1.rmdirSync(dir);
        });
        it('fails on errors different than ENOENT', function () {
            expect(function () { return readConfig_1.readConfig(process.env, undefined, undefined, dir); }).toThrowError(/EISDIR/);
        });
    });
    it('does not fail when no config files found', function () {
        readConfig_1.readConfig({}, '/tmp', '/tmp');
    });
    it('reads values from environment variables', function () {
        var config = readConfig_1.readConfig({
            PEERCALLS__TEST_VALUE__SUB_VALUE_1: '1',
            PEERCALLS__TEST_VALUE__SUB_VALUE_2: JSON.stringify({ a: 2 }),
            PEERCALLS__TEST_VALUE__SUB_VALUE_3: 'string'
        }, '/tmp', '/tmp');
        expect(config.value()).toEqual({
            testValue: {
                subValue1: 1,
                subValue2: { a: 2 },
                subValue3: 'string'
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
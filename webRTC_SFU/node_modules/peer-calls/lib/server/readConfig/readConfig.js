"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint @typescript-eslint/no-explicit-any: 0 */
var fs_1 = require("fs");
var path_1 = require("path");
var js_yaml_1 = require("js-yaml");
var debug_1 = __importDefault(require("debug"));
var debug = debug_1["default"]('peercalls:config');
var isObject = function (value) { return value !== null && typeof value === 'object'; };
var ReadConfig = /** @class */ (function () {
    function ReadConfig(config) {
        this.config = config;
    }
    ReadConfig.prototype.get = function (key, defaultValue) {
        var value = this.config;
        try {
            key.split('.').forEach(function (k) {
                if (!Object.prototype.hasOwnProperty.call(value, k)) {
                    throw new Error("Property \"" + k + "\" from \"" + key + "\" does not exist");
                }
                value = value[k];
            });
        }
        catch (err) {
            if (arguments.length === 2) {
                return defaultValue;
            }
            else {
                throw err;
            }
        }
        return value;
    };
    ReadConfig.prototype.has = function (key) {
        var c = this.config;
        return key.split('.').every(function (k) {
            var has = Object.prototype.hasOwnProperty.call(c, k);
            if (has) {
                c = c[k];
            }
            return has;
        });
    };
    ReadConfig.prototype.value = function () {
        return this.config;
    };
    return ReadConfig;
}());
exports.ReadConfig = ReadConfig;
function readConfigFile(filename) {
    return js_yaml_1.safeLoad(fs_1.readFileSync(filename, 'utf8'));
}
function mergeConfig(source, destination) {
    var stack = [{ src: source, dest: destination }];
    var _loop_1 = function () {
        var _a = stack.pop(), src = _a.src, dest = _a.dest;
        var keys = Object.keys(src);
        keys.forEach(function (key) {
            var value = src[key];
            if (isObject(value) && !Array.isArray(value)) {
                if (!Object.prototype.hasOwnProperty.call(dest, key) ||
                    Array.isArray(dest[key]) ||
                    !isObject(dest[key])) {
                    dest[key] = {};
                }
                stack.push({ src: value, dest: dest[key] });
                return;
            }
            dest[key] = value;
        });
    };
    while (stack.length) {
        _loop_1();
    }
    return destination;
}
exports.mergeConfig = mergeConfig;
function findPackageRoot(path) {
    if (path === void 0) { path = __dirname; }
    path = path_1.resolve(path);
    var lastPath;
    while (lastPath !== path) {
        var file = path_1.join(path, 'package.json');
        try {
            var result = fs_1.statSync(file);
            if (result.isFile()) {
                return path;
            }
        }
        catch (err) {
            // ignore error
        }
        lastPath = path;
        path = path_1.join(path, '..');
    }
    throw new Error('No package.json found');
}
exports.findPackageRoot = findPackageRoot;
function getAllConfigFilesInDirectory(dir, environment) {
    var files = [path_1.join(dir, 'default.yaml')];
    if (environment) {
        files.push(path_1.join(dir, environment + '.yaml'));
    }
    files.push(path_1.join(dir, 'local.yaml'));
    return files;
}
exports.getAllConfigFilesInDirectory = getAllConfigFilesInDirectory;
function getAllConfigLocations(packageDir, localDir, environment, extraConfigFile) {
    var locations = __spreadArrays(getAllConfigFilesInDirectory(packageDir, environment));
    if (localDir !== packageDir) {
        locations.push.apply(locations, getAllConfigFilesInDirectory(localDir, environment));
    }
    if (extraConfigFile && locations.every(function (loc) { return loc !== extraConfigFile; })) {
        locations.push(path_1.resolve(extraConfigFile));
    }
    return locations;
}
exports.getAllConfigLocations = getAllConfigLocations;
function toSnakeCase(string) {
    var value = string.split('_')
        .map(function (item) { return item[0].toUpperCase() + item.slice(1).toLowerCase(); })
        .join('');
    return value[0].toLowerCase() + value.slice(1);
}
exports.toSnakeCase = toSnakeCase;
function readConfig(env, packageDir, localDir, extraConfigFile) {
    if (env === void 0) { env = process.env; }
    if (packageDir === void 0) { packageDir = path_1.join(findPackageRoot(), 'config'); }
    if (localDir === void 0) { localDir = path_1.join(process.cwd(), 'config'); }
    var locations = getAllConfigLocations(packageDir, localDir, env.NODE_ENV, extraConfigFile);
    var readFiles = locations
        .map(function (location) {
        try {
            var result = readConfigFile(location);
            debug('Read config file: %s', location);
            return result;
        }
        catch (err) {
            if (!/ENOENT/.test(err.message)) {
                throw err;
            }
            return undefined;
        }
    })
        .filter(function (item) { return item !== undefined; });
    var config = readFiles
        .reduce(function (merged, config) { return mergeConfig(config, merged); }, {});
    var envConfig = {};
    Object.keys(env)
        .filter(function (key) { return key.startsWith('PEERCALLS__'); })
        .forEach(function (key) {
        var value = env[key];
        key = key.slice('PEERCALLS__'.length);
        var cfg = envConfig;
        var keys = key.split('__').map(toSnakeCase);
        var lastKey = keys[keys.length - 1];
        keys
            .slice(0, keys.length - 1)
            .forEach(function (shortKey) {
            cfg = cfg[shortKey] = cfg[shortKey] || {};
        });
        try {
            cfg[lastKey] = JSON.parse(value);
        }
        catch (err) {
            cfg[lastKey] = value;
        }
    });
    var configWithEnv = mergeConfig(envConfig, config);
    debug('Read configuration: %j', configWithEnv);
    return new ReadConfig(configWithEnv);
}
exports.readConfig = readConfig;
//# sourceMappingURL=data:application/json;base64,
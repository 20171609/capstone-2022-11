"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var events_1 = require("events");
var socket_1 = __importDefault(require("./socket"));
var store_1 = require("./store");
describe('server/socket', function () {
    var socket;
    var io;
    var rooms;
    var socket0 = {
        id: 'socket0'
    };
    var socket1 = {
        id: 'socket1'
    };
    var socket2 = {
        id: 'socket2'
    };
    var emitPromise;
    beforeEach(function () {
        socket = new events_1.EventEmitter();
        socket.id = 'socket0';
        socket.join = jest.fn();
        socket.leave = jest.fn();
        rooms = {};
        var emitResolve;
        emitPromise = new Promise(function (resolve) {
            emitResolve = resolve;
        });
        var socketsByRoom = {
            room1: [socket0.id],
            room2: [socket0.id],
            room3: [socket0.id, socket1.id, socket2.id]
        };
        io = {};
        io["in"] = io.to = jest.fn().mockImplementation(function (room) {
            return (rooms[room] = rooms[room] || {
                emit: jest.fn().mockImplementation(function () { return emitResolve(); }),
                clients: function (callback) {
                    callback(undefined, socketsByRoom[room] || []);
                }
            });
        });
    });
    it('should be a function', function () {
        expect(typeof socket_1["default"]).toBe('function');
    });
    describe('socket events', function () {
        var stores;
        beforeEach(function () {
            stores = {
                userIdBySocketId: new store_1.MemoryStore(),
                socketIdByUserId: new store_1.MemoryStore()
            };
            stores.socketIdByUserId.set('a', socket0.id);
            stores.userIdBySocketId.set(socket0.id, 'a');
            stores.socketIdByUserId.set('b', socket1.id);
            stores.userIdBySocketId.set(socket1.id, 'b');
            stores.socketIdByUserId.set('c', socket2.id);
            stores.userIdBySocketId.set(socket2.id, 'c');
            socket_1["default"](socket, io, stores);
        });
        describe('signal', function () {
            it('should broadcast signal to specific user', function () { return __awaiter(void 0, void 0, void 0, function () {
                var signal;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            signal = { type: 'signal' };
                            socket.emit('signal', { userId: 'b', signal: signal });
                            return [4 /*yield*/, emitPromise];
                        case 1:
                            _a.sent();
                            expect(io.to.mock.calls).toEqual([[socket1.id]]);
                            expect(io.to(socket1.id).emit.mock.calls).toEqual([[
                                    'signal', {
                                        userId: 'a',
                                        signal: signal
                                    },
                                ]]);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('ready', function () {
            it('never calls socket.leave', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            socket.room = 'room1';
                            socket.emit('ready', {
                                userId: 'a',
                                room: 'room2'
                            });
                            return [4 /*yield*/, emitPromise];
                        case 1:
                            _a.sent();
                            expect(socket.leave.mock.calls).toEqual([]);
                            expect(socket.join.mock.calls).toEqual([['room2']]);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should call socket.join to room', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            socket.emit('ready', {
                                userId: 'b',
                                room: 'room3'
                            });
                            return [4 /*yield*/, emitPromise];
                        case 1:
                            _a.sent();
                            expect(socket.join.mock.calls).toEqual([['room3']]);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should emit users', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            socket.emit('ready', {
                                userId: 'a',
                                room: 'room3'
                            });
                            return [4 /*yield*/, emitPromise
                                // expect(io.to.mock.calls).toEqual([[ 'room3' ]])
                            ];
                        case 1:
                            _a.sent();
                            // expect(io.to.mock.calls).toEqual([[ 'room3' ]])
                            expect(io.to('room3').emit.mock.calls).toEqual([
                                [
                                    'users', {
                                        initiator: 'a',
                                        users: [{
                                                socketId: socket0.id,
                                                userId: 'a'
                                            }, {
                                                socketId: socket1.id,
                                                userId: 'b'
                                            }, {
                                                socketId: socket2.id,
                                                userId: 'c'
                                            }]
                                    },
                                ],
                            ]);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL3NvY2tldC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQXFDO0FBR3JDLG9EQUFtQztBQUNuQyxpQ0FBNEM7QUFFNUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQVl4QixJQUFJLE1BQXFCLENBQUE7SUFDekIsSUFBSSxFQUdILENBQUE7SUFDRCxJQUFJLEtBQWtDLENBQUE7SUFDdEMsSUFBTSxPQUFPLEdBQUc7UUFDZCxFQUFFLEVBQUUsU0FBUztLQUNkLENBQUE7SUFDRCxJQUFNLE9BQU8sR0FBRztRQUNkLEVBQUUsRUFBRSxTQUFTO0tBQ2QsQ0FBQTtJQUNELElBQU0sT0FBTyxHQUFHO1FBQ2QsRUFBRSxFQUFFLFNBQVM7S0FDZCxDQUFBO0lBQ0QsSUFBSSxXQUEwQixDQUFBO0lBQzlCLFVBQVUsQ0FBQztRQUNULE1BQU0sR0FBRyxJQUFJLHFCQUFZLEVBQW1CLENBQUE7UUFDNUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUE7UUFDckIsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7UUFDdkIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7UUFDeEIsS0FBSyxHQUFHLEVBQUUsQ0FBQTtRQUVWLElBQUksV0FBdUIsQ0FBQTtRQUMzQixXQUFXLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQSxPQUFPO1lBQy9CLFdBQVcsR0FBRyxPQUFPLENBQUE7UUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFNLGFBQWEsR0FBNkI7WUFDOUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNuQixLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ25CLEtB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QUUsR0FBRztnQ0FDWCxJQUFJLEVBQUUsT0FBTzs2QkFDZCxDQUFDLENBQUE7NEJBQ0YscUJBQU0sV0FBVztnQ0FFakIsa0RBQWtEOzhCQUZqQzs7NEJBQWpCLFNBQWlCLENBQUE7NEJBRWpCLGtEQUFrRDs0QkFDbEQsTUFBTSxDQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO2dDQUM1RDtvQ0FDRSxPQUFPLEVBQUU7d0NBQ1AsU0FBUyxFQUFFLEdBQUc7d0NBQ2QsS0FBSyxFQUFFLENBQUM7Z0RBQ04sUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFO2dEQUNwQixNQUFNLEVBQUUsR0FBRzs2Q0FDWixFQUFFO2dEQUNELFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRTtnREFDcEIsTUFBTSxFQUFFLEdBQUc7NkNBQ1osRUFBRTtnREFDRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUU7Z0RBQ3BCLE1BQU0sRUFBRSxHQUFHOzZDQUNaLENBQUM7cUNBQ0g7aUNBQ0Y7NkJBQ0YsQ0FBQyxDQUFBOzs7O2lCQUNILENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cydcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gJ3NvY2tldC5pbydcbmltcG9ydCB7IFR5cGVkSU8gfSBmcm9tICcuLi9zaGFyZWQnXG5pbXBvcnQgaGFuZGxlU29ja2V0IGZyb20gJy4vc29ja2V0J1xuaW1wb3J0IHsgTWVtb3J5U3RvcmUsIFN0b3JlIH0gZnJvbSAnLi9zdG9yZSdcblxuZGVzY3JpYmUoJ3NlcnZlci9zb2NrZXQnLCAoKSA9PiB7XG4gIHR5cGUgTmFtZXNwYWNlTW9jayA9IFNvY2tldCAmIHtcbiAgICBpZDogc3RyaW5nXG4gICAgcm9vbT86IHN0cmluZ1xuICAgIGpvaW46IGplc3QuTW9ja1xuICAgIGxlYXZlOiBqZXN0Lk1vY2tcbiAgICBlbWl0OiBqZXN0Lk1vY2tcbiAgICBjbGllbnRzOiAoY2FsbGJhY2s6IChcbiAgICAgIGVycjogRXJyb3IgfCB1bmRlZmluZWQsIGNsaWVudHM6IHN0cmluZ1tdXG4gICAgKSA9PiB2b2lkKSA9PiB2b2lkXG4gIH1cblxuICBsZXQgc29ja2V0OiBOYW1lc3BhY2VNb2NrXG4gIGxldCBpbzogVHlwZWRJTyAgJiB7XG4gICAgaW46IGplc3QuTW9jazwocm9vbTogc3RyaW5nKSA9PiBOYW1lc3BhY2VNb2NrPlxuICAgIHRvOiBqZXN0Lk1vY2s8KHJvb206IHN0cmluZykgPT4gTmFtZXNwYWNlTW9jaz5cbiAgfVxuICBsZXQgcm9vbXM6IFJlY29yZDxzdHJpbmcsIHtlbWl0OiBhbnl9PlxuICBjb25zdCBzb2NrZXQwID0ge1xuICAgIGlkOiAnc29ja2V0MCcsXG4gIH1cbiAgY29uc3Qgc29ja2V0MSA9IHtcbiAgICBpZDogJ3NvY2tldDEnLFxuICB9XG4gIGNvbnN0IHNvY2tldDIgPSB7XG4gICAgaWQ6ICdzb2NrZXQyJyxcbiAgfVxuICBsZXQgZW1pdFByb21pc2U6IFByb21pc2U8dm9pZD5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc29ja2V0ID0gbmV3IEV2ZW50RW1pdHRlcigpIGFzIE5hbWVzcGFjZU1vY2tcbiAgICBzb2NrZXQuaWQgPSAnc29ja2V0MCdcbiAgICBzb2NrZXQuam9pbiA9IGplc3QuZm4oKVxuICAgIHNvY2tldC5sZWF2ZSA9IGplc3QuZm4oKVxuICAgIHJvb21zID0ge31cblxuICAgIGxldCBlbWl0UmVzb2x2ZTogKCkgPT4gdm9pZFxuICAgIGVtaXRQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBlbWl0UmVzb2x2ZSA9IHJlc29sdmVcbiAgICB9KVxuXG4gICAgY29uc3Qgc29ja2V0c0J5Um9vbTogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge1xuICAgICAgcm9vbTE6IFtzb2NrZXQwLmlkXSxcbiAgICAgIHJvb20yOiBbc29ja2V0MC5pZF0sXG4gICAgICByb29tMzogW3NvY2tldDAuaWQsIHNvY2tldDEuaWQsIHNvY2tldDIuaWRdLFxuICAgIH1cblxuICAgIGlvID0ge30gYXMgYW55XG4gICAgaW8uaW4gPSBpby50byA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24ocm9vbSA9PiB7XG4gICAgICByZXR1cm4gKHJvb21zW3Jvb21dID0gcm9vbXNbcm9vbV0gfHwge1xuICAgICAgICBlbWl0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IGVtaXRSZXNvbHZlKCkpLFxuICAgICAgICBjbGllbnRzOiBjYWxsYmFjayA9PiB7XG4gICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBzb2NrZXRzQnlSb29tW3Jvb21dIHx8IFtdKVxuICAgICAgICB9LFxuICAgICAgfSBhcyBOYW1lc3BhY2VNb2NrKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBiZSBhIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlb2YgaGFuZGxlU29ja2V0KS50b0JlKCdmdW5jdGlvbicpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ3NvY2tldCBldmVudHMnLCAoKSA9PiB7XG4gICAgbGV0IHN0b3Jlczoge1xuICAgICAgdXNlcklkQnlTb2NrZXRJZDogU3RvcmVcbiAgICAgIHNvY2tldElkQnlVc2VySWQ6IFN0b3JlXG4gICAgfVxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgc3RvcmVzID0ge1xuICAgICAgICB1c2VySWRCeVNvY2tldElkOiBuZXcgTWVtb3J5U3RvcmUoKSxcbiAgICAgICAgc29ja2V0SWRCeVVzZXJJZDogbmV3IE1lbW9yeVN0b3JlKCksXG4gICAgICB9XG4gICAgICBzdG9yZXMuc29ja2V0SWRCeVVzZXJJZC5zZXQoJ2EnLCBzb2NrZXQwLmlkKVxuICAgICAgc3RvcmVzLnVzZXJJZEJ5U29ja2V0SWQuc2V0KHNvY2tldDAuaWQsICdhJylcbiAgICAgIHN0b3Jlcy5zb2NrZXRJZEJ5VXNlcklkLnNldCgnYicsIHNvY2tldDEuaWQpXG4gICAgICBzdG9yZXMudXNlcklkQnlTb2NrZXRJZC5zZXQoc29ja2V0MS5pZCwgJ2InKVxuICAgICAgc3RvcmVzLnNvY2tldElkQnlVc2VySWQuc2V0KCdjJywgc29ja2V0Mi5pZClcbiAgICAgIHN0b3Jlcy51c2VySWRCeVNvY2tldElkLnNldChzb2NrZXQyLmlkLCAnYycpXG4gICAgICBoYW5kbGVTb2NrZXQoc29ja2V0LCBpbywgc3RvcmVzKVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnc2lnbmFsJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBicm9hZGNhc3Qgc2lnbmFsIHRvIHNwZWNpZmljIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHsgdHlwZTogJ3NpZ25hbCcgfVxuXG4gICAgICAgIHNvY2tldC5lbWl0KCdzaWduYWwnLCB7IHVzZXJJZDogJ2InLCBzaWduYWwgfSlcbiAgICAgICAgYXdhaXQgZW1pdFByb21pc2VcblxuICAgICAgICBleHBlY3QoaW8udG8ubW9jay5jYWxscykudG9FcXVhbChbWyBzb2NrZXQxLmlkIF1dKVxuICAgICAgICBleHBlY3QoKGlvLnRvKHNvY2tldDEuaWQpLmVtaXQgYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzKS50b0VxdWFsKFtbXG4gICAgICAgICAgJ3NpZ25hbCcsIHtcbiAgICAgICAgICAgIHVzZXJJZDogJ2EnLFxuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIH0sXG4gICAgICAgIF1dKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgaXQoJ25ldmVyIGNhbGxzIHNvY2tldC5sZWF2ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgc29ja2V0LnJvb20gPSAncm9vbTEnXG4gICAgICAgIHNvY2tldC5lbWl0KCdyZWFkeScsIHtcbiAgICAgICAgICB1c2VySWQ6ICdhJyxcbiAgICAgICAgICByb29tOiAncm9vbTInLFxuICAgICAgICB9KVxuICAgICAgICBhd2FpdCBlbWl0UHJvbWlzZVxuXG4gICAgICAgIGV4cGVjdChzb2NrZXQubGVhdmUubW9jay5jYWxscykudG9FcXVhbChbXSlcbiAgICAgICAgZXhwZWN0KHNvY2tldC5qb2luLm1vY2suY2FsbHMpLnRvRXF1YWwoW1sgJ3Jvb20yJyBdXSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgY2FsbCBzb2NrZXQuam9pbiB0byByb29tJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBzb2NrZXQuZW1pdCgncmVhZHknLCB7XG4gICAgICAgICAgdXNlcklkOiAnYicsXG4gICAgICAgICAgcm9vbTogJ3Jvb20zJyxcbiAgICAgICAgfSlcbiAgICAgICAgYXdhaXQgZW1pdFByb21pc2VcbiAgICAgICAgZXhwZWN0KHNvY2tldC5qb2luLm1vY2suY2FsbHMpLnRvRXF1YWwoW1sgJ3Jvb20zJyBdXSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgZW1pdCB1c2VycycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgc29ja2V0LmVtaXQoJ3JlYWR5Jywge1xuICAgICAgICAgIHVzZXJJZDogJ2EnLFxuICAgICAgICAgIHJvb206ICdyb29tMycsXG4gICAgICAgIH0pXG4gICAgICAgIGF3YWl0IGVtaXRQcm9taXNlXG5cbiAgICAgICAgLy8gZXhwZWN0KGlvLnRvLm1vY2suY2FsbHMpLnRvRXF1YWwoW1sgJ3Jvb20zJyBdXSlcbiAgICAgICAgZXhwZWN0KChpby50bygncm9vbTMnKS5lbWl0IGFzIGplc3QuTW9jaykubW9jay5jYWxscykudG9FcXVhbChbXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ3VzZXJzJywge1xuICAgICAgICAgICAgICBpbml0aWF0b3I6ICdhJyxcbiAgICAgICAgICAgICAgdXNlcnM6IFt7XG4gICAgICAgICAgICAgICAgc29ja2V0SWQ6IHNvY2tldDAuaWQsXG4gICAgICAgICAgICAgICAgdXNlcklkOiAnYScsXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBzb2NrZXRJZDogc29ja2V0MS5pZCxcbiAgICAgICAgICAgICAgICB1c2VySWQ6ICdiJyxcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHNvY2tldElkOiBzb2NrZXQyLmlkLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogJ2MnLFxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgXSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=
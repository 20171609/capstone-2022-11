"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('socket.io', function () {
    // eslint-disable-next-line
    var EventEmitter = require('events').EventEmitter;
    return jest.fn().mockReturnValue(new EventEmitter());
});
jest.mock('./socket');
var app_1 = __importDefault(require("./app"));
var config_1 = require("./config");
var socket_1 = __importDefault(require("./socket"));
var socket_io_1 = __importDefault(require("socket.io"));
var supertest_1 = __importDefault(require("supertest"));
var store_1 = require("./store");
var io = socket_io_1["default"]();
var BASE_URL = config_1.config.baseUrl;
describe('server/app', function () {
    describe('GET /', function () {
        it('renders index', function () {
            return supertest_1["default"](app_1["default"])
                .get('/')
                .expect(200);
        });
    });
    describe('POST /call', function () {
        it('redirects to a new call', function () {
            return supertest_1["default"](app_1["default"])
                .post('/call')
                .expect(302)
                .expect('location', new RegExp("^" + BASE_URL + "/call/[0-9a-f-]{36}$"));
        });
        it('redirects to specific call', function () {
            return supertest_1["default"](app_1["default"])
                .post('/call')
                .send('call=test%20id')
                .expect(302)
                .expect('location', BASE_URL + "/call/test%20id");
        });
    });
    describe('GET /call/<uuid>', function () {
        it('renders call page', function () {
            return supertest_1["default"](app_1["default"])
                .get(BASE_URL + "/call/test")
                .expect(200);
        });
        it('sets nickname from x-forwarded-user', function () {
            return supertest_1["default"](app_1["default"])
                .get(BASE_URL + "/call/test")
                .set('x-forwarded-user', 'abc')
                .expect(200)
                .expect(/<input type="hidden" id="nickname" value="abc">/);
        });
    });
    describe('io:connection', function () {
        it('calls handleSocket with socket', function () {
            var socket = { hi: 'me socket' };
            io.emit('connection', socket);
            expect(socket_1["default"].mock.calls).toEqual([[
                    socket,
                    io,
                    {
                        socketIdByUserId: jasmine.any(store_1.MemoryStore),
                        userIdBySocketId: jasmine.any(store_1.MemoryStore)
                    },
                ]]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL2FwcC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7SUFDckIsMkJBQTJCO0lBQ25CLElBQUEsNkNBQVksQ0FBc0I7SUFDMUMsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUMsQ0FBQTtBQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7QUFFckIsOENBQXVCO0FBQ3ZCLG1DQUFpQztBQUNqQyxvREFBbUM7QUFDbkMsd0RBQWdDO0FBQ2hDLHdEQUErQjtBQUMvQixpQ0FBcUM7QUFFckMsSUFBTSxFQUFFLEdBQUcsc0JBQVEsRUFBRSxDQUFBO0FBRXJCLElBQU0sUUFBUSxHQUFXLGVBQU0sQ0FBQyxPQUFPLENBQUE7QUFFdkMsUUFBUSxDQUFDLFlBQVksRUFBRTtJQUVyQixRQUFRLENBQUMsT0FBTyxFQUFFO1FBRWhCLEVBQUUsQ0FBQyxlQUFlLEVBQUU7WUFDbEIsT0FBTyxzQkFBTyxDQUFDLGdCQUFHLENBQUM7aUJBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUM7aUJBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsQ0FBQyxDQUFDLENBQUE7SUFFSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFFckIsRUFBRSxDQUFDLHlCQUF5QixFQUFFO1lBQzVCLE9BQU8sc0JBQU8sQ0FBQyxnQkFBRyxDQUFDO2lCQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUM7aUJBQ1gsTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxNQUFJLFFBQVEseUJBQXNCLENBQUMsQ0FBQyxDQUFBO1FBQ3JFLENBQUMsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1lBQy9CLE9BQU8sc0JBQU8sQ0FBQyxnQkFBRyxDQUFDO2lCQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxNQUFNLENBQUMsVUFBVSxFQUFLLFFBQVEsb0JBQWlCLENBQUMsQ0FBQTtRQUNuRCxDQUFDLENBQUMsQ0FBQTtJQUVKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLGtCQUFrQixFQUFFO1FBRTNCLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRTtZQUN0QixPQUFPLHNCQUFPLENBQUMsZ0JBQUcsQ0FBQztpQkFDbEIsR0FBRyxDQUFJLFFBQVEsZUFBWSxDQUFDO2lCQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDZCxDQUFDLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRTtZQUN4QyxPQUFPLHNCQUFPLENBQUMsZ0JBQUcsQ0FBQztpQkFDbEIsR0FBRyxDQUFJLFFBQVEsZUFBWSxDQUFDO2lCQUM1QixHQUFHLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDO2lCQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLE1BQU0sQ0FBQyxpREFBaUQsQ0FBQyxDQUFBO1FBQzVELENBQUMsQ0FBQyxDQUFBO0lBRUosQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsZUFBZSxFQUFFO1FBRXhCLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtZQUNuQyxJQUFNLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQTtZQUNsQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUM3QixNQUFNLENBQUUsbUJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN0RCxNQUFNO29CQUNOLEVBQUU7b0JBQ0Y7d0JBQ0UsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBVyxDQUFDO3dCQUMxQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFXLENBQUM7cUJBQzNDO2lCQUNGLENBQUMsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFFSixDQUFDLENBQUMsQ0FBQTtBQUVKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdzb2NrZXQuaW8nLCAoKSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCB7IEV2ZW50RW1pdHRlciB9ID0gcmVxdWlyZSgnZXZlbnRzJylcbiAgcmV0dXJuIGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobmV3IEV2ZW50RW1pdHRlcigpKVxufSlcbmplc3QubW9jaygnLi9zb2NrZXQnKVxuXG5pbXBvcnQgYXBwIGZyb20gJy4vYXBwJ1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgaGFuZGxlU29ja2V0IGZyb20gJy4vc29ja2V0J1xuaW1wb3J0IFNvY2tldElPIGZyb20gJ3NvY2tldC5pbydcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCdcbmltcG9ydCB7IE1lbW9yeVN0b3JlIH0gZnJvbSAnLi9zdG9yZSdcblxuY29uc3QgaW8gPSBTb2NrZXRJTygpXG5cbmNvbnN0IEJBU0VfVVJMOiBzdHJpbmcgPSBjb25maWcuYmFzZVVybFxuXG5kZXNjcmliZSgnc2VydmVyL2FwcCcsICgpID0+IHtcblxuICBkZXNjcmliZSgnR0VUIC8nLCAoKSA9PiB7XG5cbiAgICBpdCgncmVuZGVycyBpbmRleCcsICgpID0+IHtcbiAgICAgIHJldHVybiByZXF1ZXN0KGFwcClcbiAgICAgIC5nZXQoJy8nKVxuICAgICAgLmV4cGVjdCgyMDApXG4gICAgfSlcblxuICB9KVxuXG4gIGRlc2NyaWJlKCdQT1NUIC9jYWxsJywgKCkgPT4ge1xuXG4gICAgaXQoJ3JlZGlyZWN0cyB0byBhIG5ldyBjYWxsJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHJlcXVlc3QoYXBwKVxuICAgICAgLnBvc3QoJy9jYWxsJylcbiAgICAgIC5leHBlY3QoMzAyKVxuICAgICAgLmV4cGVjdCgnbG9jYXRpb24nLCBuZXcgUmVnRXhwKGBeJHtCQVNFX1VSTH0vY2FsbC9bMC05YS1mLV17MzZ9JGApKVxuICAgIH0pXG5cbiAgICBpdCgncmVkaXJlY3RzIHRvIHNwZWNpZmljIGNhbGwnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gcmVxdWVzdChhcHApXG4gICAgICAucG9zdCgnL2NhbGwnKVxuICAgICAgLnNlbmQoJ2NhbGw9dGVzdCUyMGlkJylcbiAgICAgIC5leHBlY3QoMzAyKVxuICAgICAgLmV4cGVjdCgnbG9jYXRpb24nLCBgJHtCQVNFX1VSTH0vY2FsbC90ZXN0JTIwaWRgKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgnR0VUIC9jYWxsLzx1dWlkPicsICgpID0+IHtcblxuICAgIGl0KCdyZW5kZXJzIGNhbGwgcGFnZScsICgpID0+IHtcbiAgICAgIHJldHVybiByZXF1ZXN0KGFwcClcbiAgICAgIC5nZXQoYCR7QkFTRV9VUkx9L2NhbGwvdGVzdGApXG4gICAgICAuZXhwZWN0KDIwMClcbiAgICB9KVxuXG4gICAgaXQoJ3NldHMgbmlja25hbWUgZnJvbSB4LWZvcndhcmRlZC11c2VyJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHJlcXVlc3QoYXBwKVxuICAgICAgLmdldChgJHtCQVNFX1VSTH0vY2FsbC90ZXN0YClcbiAgICAgIC5zZXQoJ3gtZm9yd2FyZGVkLXVzZXInLCAnYWJjJylcbiAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgLmV4cGVjdCgvPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBpZD1cIm5pY2tuYW1lXCIgdmFsdWU9XCJhYmNcIj4vKVxuICAgIH0pXG5cbiAgfSlcblxuICBkZXNjcmliZSgnaW86Y29ubmVjdGlvbicsICgpID0+IHtcblxuICAgIGl0KCdjYWxscyBoYW5kbGVTb2NrZXQgd2l0aCBzb2NrZXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb2NrZXQgPSB7IGhpOiAnbWUgc29ja2V0JyB9XG4gICAgICBpby5lbWl0KCdjb25uZWN0aW9uJywgc29ja2V0KVxuICAgICAgZXhwZWN0KChoYW5kbGVTb2NrZXQgYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzKS50b0VxdWFsKFtbXG4gICAgICAgIHNvY2tldCxcbiAgICAgICAgaW8sXG4gICAgICAgIHtcbiAgICAgICAgICBzb2NrZXRJZEJ5VXNlcklkOiBqYXNtaW5lLmFueShNZW1vcnlTdG9yZSksXG4gICAgICAgICAgdXNlcklkQnlTb2NrZXRJZDogamFzbWluZS5hbnkoTWVtb3J5U3RvcmUpLFxuICAgICAgICB9LFxuICAgICAgXV0pXG4gICAgfSlcblxuICB9KVxuXG59KVxuIl19
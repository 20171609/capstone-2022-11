"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('ioredis');
var ioredis_1 = __importDefault(require("ioredis"));
var socket_io_1 = __importDefault(require("socket.io"));
var configureStores_1 = require("./configureStores");
var store_1 = require("./store");
describe('configureStores', function () {
    describe('memory', function () {
        it('should be in memory when no params specified', function () {
            var io = socket_io_1["default"]();
            var stores = configureStores_1.configureStores(io);
            expect(stores.socketIdByUserId).toEqual(jasmine.any(store_1.MemoryStore));
            expect(stores.userIdBySocketId).toEqual(jasmine.any(store_1.MemoryStore));
        });
        it('should be in memory when type="memory"', function () {
            var io = socket_io_1["default"]();
            var stores = configureStores_1.configureStores(io);
            expect(stores.socketIdByUserId).toEqual(jasmine.any(store_1.MemoryStore));
            expect(stores.userIdBySocketId).toEqual(jasmine.any(store_1.MemoryStore));
        });
    });
    describe('redis', function () {
        it('should be redis when type="redis"', function () {
            var io = socket_io_1["default"]();
            var stores = configureStores_1.configureStores(io, {
                type: 'redis',
                host: 'localhost',
                port: 6379,
                prefix: 'peercalls'
            });
            expect(io.adapter().pubClient).toEqual(jasmine.any(ioredis_1["default"]));
            expect(io.adapter().subClient).toEqual(jasmine.any(ioredis_1["default"]));
            expect(stores.socketIdByUserId).toEqual(jasmine.any(store_1.RedisStore));
            expect(stores.userIdBySocketId).toEqual(jasmine.any(store_1.RedisStore));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlU3RvcmVzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL2NvbmZpZ3VyZVN0b3Jlcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUVwQixvREFBMkI7QUFDM0Isd0RBQWdDO0FBQ2hDLHFEQUFtRDtBQUNuRCxpQ0FBaUQ7QUFFakQsUUFBUSxDQUFDLGlCQUFpQixFQUFFO0lBRTFCLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsRUFBRSxDQUFDLDhDQUE4QyxFQUFFO1lBQ2pELElBQU0sRUFBRSxHQUFHLHNCQUFRLEVBQUUsQ0FBQTtZQUNyQixJQUFNLE1BQU0sR0FBRyxpQ0FBZSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBVyxDQUFDLENBQUMsQ0FBQTtZQUNqRSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQVcsQ0FBQyxDQUFDLENBQUE7UUFDbkUsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDM0MsSUFBTSxFQUFFLEdBQUcsc0JBQVEsRUFBRSxDQUFBO1lBQ3JCLElBQU0sTUFBTSxHQUFHLGlDQUFlLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFXLENBQUMsQ0FBQyxDQUFBO1lBQ2pFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBVyxDQUFDLENBQUMsQ0FBQTtRQUNuRSxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNoQixFQUFFLENBQUMsbUNBQW1DLEVBQUU7WUFDdEMsSUFBTSxFQUFFLEdBQUcsc0JBQVEsRUFBRSxDQUFBO1lBQ3JCLElBQU0sTUFBTSxHQUFHLGlDQUFlLENBQUMsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLEVBQUUsT0FBTztnQkFDYixJQUFJLEVBQUUsV0FBVztnQkFDakIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsTUFBTSxFQUFFLFdBQVc7YUFDcEIsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBSyxDQUFDLENBQUMsQ0FBQTtZQUMxRCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyxDQUFBO1lBQzFELE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBVSxDQUFDLENBQUMsQ0FBQTtZQUNoRSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQVUsQ0FBQyxDQUFDLENBQUE7UUFDbEUsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUVKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdpb3JlZGlzJylcblxuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnXG5pbXBvcnQgU29ja2V0SU8gZnJvbSAnc29ja2V0LmlvJ1xuaW1wb3J0IHsgY29uZmlndXJlU3RvcmVzIH0gZnJvbSAnLi9jb25maWd1cmVTdG9yZXMnXG5pbXBvcnQgeyBNZW1vcnlTdG9yZSwgUmVkaXNTdG9yZSB9IGZyb20gJy4vc3RvcmUnXG5cbmRlc2NyaWJlKCdjb25maWd1cmVTdG9yZXMnLCAoKSA9PiB7XG5cbiAgZGVzY3JpYmUoJ21lbW9yeScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGluIG1lbW9yeSB3aGVuIG5vIHBhcmFtcyBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbyA9IFNvY2tldElPKClcbiAgICAgIGNvbnN0IHN0b3JlcyA9IGNvbmZpZ3VyZVN0b3JlcyhpbylcbiAgICAgIGV4cGVjdChzdG9yZXMuc29ja2V0SWRCeVVzZXJJZCkudG9FcXVhbChqYXNtaW5lLmFueShNZW1vcnlTdG9yZSkpXG4gICAgICBleHBlY3Qoc3RvcmVzLnVzZXJJZEJ5U29ja2V0SWQpLnRvRXF1YWwoamFzbWluZS5hbnkoTWVtb3J5U3RvcmUpKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGJlIGluIG1lbW9yeSB3aGVuIHR5cGU9XCJtZW1vcnlcIicsICgpID0+IHtcbiAgICAgIGNvbnN0IGlvID0gU29ja2V0SU8oKVxuICAgICAgY29uc3Qgc3RvcmVzID0gY29uZmlndXJlU3RvcmVzKGlvKVxuICAgICAgZXhwZWN0KHN0b3Jlcy5zb2NrZXRJZEJ5VXNlcklkKS50b0VxdWFsKGphc21pbmUuYW55KE1lbW9yeVN0b3JlKSlcbiAgICAgIGV4cGVjdChzdG9yZXMudXNlcklkQnlTb2NrZXRJZCkudG9FcXVhbChqYXNtaW5lLmFueShNZW1vcnlTdG9yZSkpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgncmVkaXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBiZSByZWRpcyB3aGVuIHR5cGU9XCJyZWRpc1wiJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW8gPSBTb2NrZXRJTygpXG4gICAgICBjb25zdCBzdG9yZXMgPSBjb25maWd1cmVTdG9yZXMoaW8sIHtcbiAgICAgICAgdHlwZTogJ3JlZGlzJyxcbiAgICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICAgIHBvcnQ6IDYzNzksXG4gICAgICAgIHByZWZpeDogJ3BlZXJjYWxscycsXG4gICAgICB9KVxuICAgICAgZXhwZWN0KGlvLmFkYXB0ZXIoKS5wdWJDbGllbnQpLnRvRXF1YWwoamFzbWluZS5hbnkoUmVkaXMpKVxuICAgICAgZXhwZWN0KGlvLmFkYXB0ZXIoKS5zdWJDbGllbnQpLnRvRXF1YWwoamFzbWluZS5hbnkoUmVkaXMpKVxuICAgICAgZXhwZWN0KHN0b3Jlcy5zb2NrZXRJZEJ5VXNlcklkKS50b0VxdWFsKGphc21pbmUuYW55KFJlZGlzU3RvcmUpKVxuICAgICAgZXhwZWN0KHN0b3Jlcy51c2VySWRCeVNvY2tldElkKS50b0VxdWFsKGphc21pbmUuYW55KFJlZGlzU3RvcmUpKVxuICAgIH0pXG4gIH0pXG5cbn0pXG4iXX0=
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var turn = __importStar(require("./turn"));
describe('server/turn', function () {
    describe('getCredentials', function () {
        it('returns username & credential', function () {
            var auth = turn.getCredentials('a', 'b');
            expect(auth).toEqual(jasmine.any(Object));
            expect(auth.username).toEqual(jasmine.any(String));
            expect(auth.credential).toEqual(jasmine.any(String));
        });
    });
    describe('processServers', function () {
        var servers = [{
                url: 'server1',
                urls: 'server1',
                auth: undefined,
                username: 'a',
                credential: 'b'
            }, {
                url: 'server2',
                urls: 'server2',
                username: 'c',
                secret: 'd',
                auth: 'secret'
            }];
        it('does not expose secret', function () {
            var s = turn.processServers(servers);
            expect(s.length).toBe(2);
            expect(s[0]).toBe(servers[0]);
            expect(s[1]).toEqual({
                url: 'server2',
                urls: 'server2',
                username: jasmine.any(String),
                credential: jasmine.any(String)
            });
            expect(s[1].username).toMatch(/^[0-9]+:c$/);
        });
        it('throws error when unknown auth type', function () {
            expect(function () { return turn.processServers([{ auth: 'bla' }]); })
                .toThrowError(/not implemented/);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci90dXJuLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMkNBQThCO0FBRzlCLFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFDdEIsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQywrQkFBK0IsRUFBRTtZQUNsQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7WUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ3RELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsSUFBTSxPQUFPLEdBQWdCLENBQUM7Z0JBQzVCLEdBQUcsRUFBRSxTQUFTO2dCQUNkLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxTQUFTO2dCQUNmLFFBQVEsRUFBRSxHQUFHO2dCQUNiLFVBQVUsRUFBRSxHQUFHO2FBQ2hCLEVBQUU7Z0JBQ0QsR0FBRyxFQUFFLFNBQVM7Z0JBQ2QsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDM0IsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN4QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ25CLEdBQUcsRUFBRSxTQUFTO2dCQUNkLElBQUksRUFBRSxTQUFTO2dCQUNmLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztnQkFDN0IsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO2FBQ2hDLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQzdDLENBQUMsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBUyxDQUFDLENBQUMsRUFBN0MsQ0FBNkMsQ0FBQztpQkFDMUQsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDbEMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHVybiBmcm9tICcuL3R1cm4nXG5pbXBvcnQgeyBJQ0VTZXJ2ZXIgfSBmcm9tICcuL2NvbmZpZydcblxuZGVzY3JpYmUoJ3NlcnZlci90dXJuJywgKCkgPT4ge1xuICBkZXNjcmliZSgnZ2V0Q3JlZGVudGlhbHMnLCAoKSA9PiB7XG4gICAgaXQoJ3JldHVybnMgdXNlcm5hbWUgJiBjcmVkZW50aWFsJywgKCkgPT4ge1xuICAgICAgY29uc3QgYXV0aCA9IHR1cm4uZ2V0Q3JlZGVudGlhbHMoJ2EnLCAnYicpXG4gICAgICBleHBlY3QoYXV0aCkudG9FcXVhbChqYXNtaW5lLmFueShPYmplY3QpKVxuICAgICAgZXhwZWN0KGF1dGgudXNlcm5hbWUpLnRvRXF1YWwoamFzbWluZS5hbnkoU3RyaW5nKSlcbiAgICAgIGV4cGVjdChhdXRoLmNyZWRlbnRpYWwpLnRvRXF1YWwoamFzbWluZS5hbnkoU3RyaW5nKSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdwcm9jZXNzU2VydmVycycsICgpID0+IHtcbiAgICBjb25zdCBzZXJ2ZXJzOiBJQ0VTZXJ2ZXJbXSA9IFt7XG4gICAgICB1cmw6ICdzZXJ2ZXIxJyxcbiAgICAgIHVybHM6ICdzZXJ2ZXIxJyxcbiAgICAgIGF1dGg6IHVuZGVmaW5lZCxcbiAgICAgIHVzZXJuYW1lOiAnYScsXG4gICAgICBjcmVkZW50aWFsOiAnYicsXG4gICAgfSwge1xuICAgICAgdXJsOiAnc2VydmVyMicsXG4gICAgICB1cmxzOiAnc2VydmVyMicsXG4gICAgICB1c2VybmFtZTogJ2MnLFxuICAgICAgc2VjcmV0OiAnZCcsXG4gICAgICBhdXRoOiAnc2VjcmV0JyxcbiAgICB9XVxuXG4gICAgaXQoJ2RvZXMgbm90IGV4cG9zZSBzZWNyZXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzID0gdHVybi5wcm9jZXNzU2VydmVycyhzZXJ2ZXJzKVxuICAgICAgZXhwZWN0KHMubGVuZ3RoKS50b0JlKDIpXG4gICAgICBleHBlY3Qoc1swXSkudG9CZShzZXJ2ZXJzWzBdKVxuICAgICAgZXhwZWN0KHNbMV0pLnRvRXF1YWwoe1xuICAgICAgICB1cmw6ICdzZXJ2ZXIyJyxcbiAgICAgICAgdXJsczogJ3NlcnZlcjInLFxuICAgICAgICB1c2VybmFtZTogamFzbWluZS5hbnkoU3RyaW5nKSxcbiAgICAgICAgY3JlZGVudGlhbDogamFzbWluZS5hbnkoU3RyaW5nKSxcbiAgICAgIH0pXG4gICAgICBleHBlY3Qoc1sxXS51c2VybmFtZSkudG9NYXRjaCgvXlswLTldKzpjJC8pXG4gICAgfSlcblxuICAgIGl0KCd0aHJvd3MgZXJyb3Igd2hlbiB1bmtub3duIGF1dGggdHlwZScsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB0dXJuLnByb2Nlc3NTZXJ2ZXJzKFt7IGF1dGg6ICdibGEnIH0gYXMgYW55XSkpXG4gICAgICAudG9UaHJvd0Vycm9yKC9ub3QgaW1wbGVtZW50ZWQvKVxuICAgIH0pXG4gIH0pXG59KVxuIl19
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var crypto_1 = __importDefault(require("crypto"));
function getCredentials(name, secret) {
    // this credential would be valid for the next 24 hours
    var timestamp = Math.floor(Date.now() / 1000) + 24 * 3600;
    var username = [timestamp, name].join(':');
    var hmac = crypto_1["default"].createHmac('sha1', secret);
    hmac.setEncoding('base64');
    hmac.write(username);
    hmac.end();
    var credential = hmac.read();
    return { username: username, credential: credential };
}
exports.getCredentials = getCredentials;
function getServerConfig(server, cred) {
    return {
        url: server.url,
        urls: server.urls,
        username: cred.username,
        credential: cred.credential
    };
}
function processServers(iceServers) {
    return iceServers.map(function (server) {
        switch (server.auth) {
            case undefined:
                return server;
            case 'secret':
                return getServerConfig(server, getCredentials(server.username, server.secret));
            default:
                throw new Error('Authentication type not implemented: ' +
                    server.auth);
        }
    });
}
exports.processServers = processServers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvdHVybi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEyQjtBQVEzQixTQUFnQixjQUFjLENBQUUsSUFBWSxFQUFFLE1BQWM7SUFDMUQsdURBQXVEO0lBQ3ZELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUE7SUFDM0QsSUFBTSxRQUFRLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzVDLElBQU0sSUFBSSxHQUFHLG1CQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDcEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ1YsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQzlCLE9BQU8sRUFBRSxRQUFRLFVBQUEsRUFBRSxVQUFVLFlBQUEsRUFBRSxDQUFBO0FBQ2pDLENBQUM7QUFWRCx3Q0FVQztBQUVELFNBQVMsZUFBZSxDQUFDLE1BQWlCLEVBQUUsSUFBaUI7SUFDM0QsT0FBTztRQUNMLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRztRQUNmLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7UUFDdkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO0tBQzVCLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUFFLFVBQXVCO0lBQ3JELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU07UUFDMUIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ25CLEtBQUssU0FBUztnQkFDWixPQUFPLE1BQU0sQ0FBQTtZQUNmLEtBQUssUUFBUTtnQkFDWCxPQUFPLGVBQWUsQ0FDcEIsTUFBTSxFQUNOLGNBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDL0MsQ0FBQTtZQUNIO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDO29CQUN0QyxNQUF5QixDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ25EO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBZkQsd0NBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0bydcbmltcG9ydCB7IElDRVNlcnZlciB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIENyZWRlbnRpYWxzIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBjcmVkZW50aWFsOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzIChuYW1lOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nKTogQ3JlZGVudGlhbHMge1xuICAvLyB0aGlzIGNyZWRlbnRpYWwgd291bGQgYmUgdmFsaWQgZm9yIHRoZSBuZXh0IDI0IGhvdXJzXG4gIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgMjQgKiAzNjAwXG4gIGNvbnN0IHVzZXJuYW1lID0gW3RpbWVzdGFtcCwgbmFtZV0uam9pbignOicpXG4gIGNvbnN0IGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMScsIHNlY3JldClcbiAgaG1hYy5zZXRFbmNvZGluZygnYmFzZTY0JylcbiAgaG1hYy53cml0ZSh1c2VybmFtZSlcbiAgaG1hYy5lbmQoKVxuICBjb25zdCBjcmVkZW50aWFsID0gaG1hYy5yZWFkKClcbiAgcmV0dXJuIHsgdXNlcm5hbWUsIGNyZWRlbnRpYWwgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXJ2ZXJDb25maWcoc2VydmVyOiBJQ0VTZXJ2ZXIsIGNyZWQ6IENyZWRlbnRpYWxzKSB7XG4gIHJldHVybiB7XG4gICAgdXJsOiBzZXJ2ZXIudXJsLFxuICAgIHVybHM6IHNlcnZlci51cmxzLFxuICAgIHVzZXJuYW1lOiBjcmVkLnVzZXJuYW1lLFxuICAgIGNyZWRlbnRpYWw6IGNyZWQuY3JlZGVudGlhbCxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1NlcnZlcnMgKGljZVNlcnZlcnM6IElDRVNlcnZlcltdKSB7XG4gIHJldHVybiBpY2VTZXJ2ZXJzLm1hcChzZXJ2ZXIgPT4ge1xuICAgIHN3aXRjaCAoc2VydmVyLmF1dGgpIHtcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gc2VydmVyXG4gICAgICBjYXNlICdzZWNyZXQnOlxuICAgICAgICByZXR1cm4gZ2V0U2VydmVyQ29uZmlnKFxuICAgICAgICAgIHNlcnZlcixcbiAgICAgICAgICBnZXRDcmVkZW50aWFscyhzZXJ2ZXIudXNlcm5hbWUsIHNlcnZlci5zZWNyZXQpLFxuICAgICAgICApXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F1dGhlbnRpY2F0aW9uIHR5cGUgbm90IGltcGxlbWVudGVkOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZXJ2ZXIgYXMge2F1dGg6IHN0cmluZ30pLmF1dGgpXG4gICAgfVxuICB9KVxufVxuIl19
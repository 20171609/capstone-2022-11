"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var body_parser_1 = __importDefault(require("body-parser"));
var debug_1 = __importDefault(require("debug"));
var ejs_1 = __importDefault(require("ejs"));
var express_1 = __importDefault(require("express"));
var path_1 = __importDefault(require("path"));
var socket_io_1 = __importDefault(require("socket.io"));
var config_1 = require("./config");
var configureStores_1 = require("./configureStores");
var call_1 = __importDefault(require("./routes/call"));
var index_1 = __importDefault(require("./routes/index"));
var server_1 = require("./server");
var socket_1 = __importDefault(require("./socket"));
var debug = debug_1["default"]('peercalls');
var logRequest = debug_1["default"]('peercalls:requests');
var BASE_URL = config_1.config.baseUrl;
var SOCKET_URL = BASE_URL + "/ws";
debug("WebSocket URL: " + SOCKET_URL);
var app = express_1["default"]();
var server = server_1.createServer(config_1.config, app);
exports.io = socket_io_1["default"](server, { path: SOCKET_URL });
app.set('x-powered-by', false);
app.locals.version = require('../../package.json').version;
app.locals.baseUrl = BASE_URL;
app.locals.prerelease = config_1.config.prerelease;
// eslint-disable-next-line
app.engine('html', ejs_1["default"].renderFile);
app.set('view engine', 'html');
app.set('views', path_1["default"].join(__dirname, '../../views'));
app.use(function (req, res, next) {
    var start = Date.now();
    res.on('finish', function () {
        var duration = Date.now() - start;
        logRequest('%s %s %sms', req.method, req.originalUrl, duration);
    });
    next();
});
app.use(body_parser_1["default"].urlencoded({ extended: false }));
var router = express_1["default"].Router();
router.use('/res', express_1["default"].static(path_1["default"].join(__dirname, '../../res')));
router.use('/static', express_1["default"].static(path_1["default"].join(__dirname, '../../build')));
router.use('/call', call_1["default"]);
router.use('/', index_1["default"]);
app.use(BASE_URL, router);
var stores = configureStores_1.configureStores(exports.io, config_1.config.store);
exports.io.on('connection', function (socket) { return socket_1["default"](socket, exports.io, stores); });
exports["default"] = server;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBb0M7QUFDcEMsZ0RBQTBCO0FBQzFCLDRDQUFxQjtBQUNyQixvREFBNkI7QUFDN0IsOENBQXVCO0FBQ3ZCLHdEQUFnQztBQUNoQyxtQ0FBaUM7QUFDakMscURBQW1EO0FBQ25ELHVEQUFnQztBQUNoQyx5REFBa0M7QUFDbEMsbUNBQXVDO0FBQ3ZDLG9EQUFtQztBQUVuQyxJQUFNLEtBQUssR0FBRyxrQkFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLElBQU0sVUFBVSxHQUFHLGtCQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUUvQyxJQUFNLFFBQVEsR0FBVyxlQUFNLENBQUMsT0FBTyxDQUFBO0FBQ3ZDLElBQU0sVUFBVSxHQUFNLFFBQVEsUUFBSyxDQUFBO0FBRW5DLEtBQUssQ0FBQyxvQkFBa0IsVUFBWSxDQUFDLENBQUE7QUFFckMsSUFBTSxHQUFHLEdBQUcsb0JBQU8sRUFBRSxDQUFBO0FBQ3JCLElBQU0sTUFBTSxHQUFHLHFCQUFZLENBQUMsZUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLFFBQUEsRUFBRSxHQUFHLHNCQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUE7QUFFeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDOUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxDQUFBO0FBQzFELEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQTtBQUM3QixHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxlQUFNLENBQUMsVUFBVSxDQUFBO0FBQ3pDLDJCQUEyQjtBQUMzQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxnQkFBRyxDQUFDLFVBQWlCLENBQUMsQ0FBQTtBQUV6QyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUM5QixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxpQkFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQTtBQUVyRCxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQ3JCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUNmLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFDbkMsVUFBVSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDakUsQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFJLEVBQUUsQ0FBQTtBQUNSLENBQUMsQ0FBQyxDQUFBO0FBQ0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFbkQsSUFBTSxNQUFNLEdBQUcsb0JBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxvQkFBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3JFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLG9CQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsaUJBQUksQ0FBQyxDQUFBO0FBQ3pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGtCQUFLLENBQUMsQ0FBQTtBQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUV6QixJQUFNLE1BQU0sR0FBRyxpQ0FBZSxDQUFDLFVBQUUsRUFBRSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDaEQsVUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxtQkFBWSxDQUFDLE1BQU0sRUFBRSxVQUFFLEVBQUUsTUFBTSxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQTtBQUUvRCxxQkFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcbmltcG9ydCBfZGVidWcgZnJvbSAnZGVidWcnXG5pbXBvcnQgZWpzIGZyb20gJ2VqcydcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IFNvY2tldElPIGZyb20gJ3NvY2tldC5pbydcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgY29uZmlndXJlU3RvcmVzIH0gZnJvbSAnLi9jb25maWd1cmVTdG9yZXMnXG5pbXBvcnQgY2FsbCBmcm9tICcuL3JvdXRlcy9jYWxsJ1xuaW1wb3J0IGluZGV4IGZyb20gJy4vcm91dGVzL2luZGV4J1xuaW1wb3J0IHsgY3JlYXRlU2VydmVyIH0gZnJvbSAnLi9zZXJ2ZXInXG5pbXBvcnQgaGFuZGxlU29ja2V0IGZyb20gJy4vc29ja2V0J1xuXG5jb25zdCBkZWJ1ZyA9IF9kZWJ1ZygncGVlcmNhbGxzJylcbmNvbnN0IGxvZ1JlcXVlc3QgPSBfZGVidWcoJ3BlZXJjYWxsczpyZXF1ZXN0cycpXG5cbmNvbnN0IEJBU0VfVVJMOiBzdHJpbmcgPSBjb25maWcuYmFzZVVybFxuY29uc3QgU09DS0VUX1VSTCA9IGAke0JBU0VfVVJMfS93c2BcblxuZGVidWcoYFdlYlNvY2tldCBVUkw6ICR7U09DS0VUX1VSTH1gKVxuXG5jb25zdCBhcHAgPSBleHByZXNzKClcbmNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcihjb25maWcsIGFwcClcbmV4cG9ydCBjb25zdCBpbyA9IFNvY2tldElPKHNlcnZlciwgeyBwYXRoOiBTT0NLRVRfVVJMIH0pXG5cbmFwcC5zZXQoJ3gtcG93ZXJlZC1ieScsIGZhbHNlKVxuYXBwLmxvY2Fscy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuYXBwLmxvY2Fscy5iYXNlVXJsID0gQkFTRV9VUkxcbmFwcC5sb2NhbHMucHJlcmVsZWFzZSA9IGNvbmZpZy5wcmVyZWxlYXNlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmFwcC5lbmdpbmUoJ2h0bWwnLCBlanMucmVuZGVyRmlsZSBhcyBhbnkpXG5cbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2h0bWwnKVxuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vdmlld3MnKSlcblxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpXG4gIHJlcy5vbignZmluaXNoJywgKCkgPT4ge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG4gICAgbG9nUmVxdWVzdCgnJXMgJXMgJXNtcycsIHJlcS5tZXRob2QsIHJlcS5vcmlnaW5hbFVybCwgZHVyYXRpb24pXG4gIH0pXG4gIG5leHQoKVxufSlcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKVxuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpXG5yb3V0ZXIudXNlKCcvcmVzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3JlcycpKSlcbnJvdXRlci51c2UoJy9zdGF0aWMnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vYnVpbGQnKSkpXG5yb3V0ZXIudXNlKCcvY2FsbCcsIGNhbGwpXG5yb3V0ZXIudXNlKCcvJywgaW5kZXgpXG5hcHAudXNlKEJBU0VfVVJMLCByb3V0ZXIpXG5cbmNvbnN0IHN0b3JlcyA9IGNvbmZpZ3VyZVN0b3JlcyhpbywgY29uZmlnLnN0b3JlKVxuaW8ub24oJ2Nvbm5lY3Rpb24nLCBzb2NrZXQgPT4gaGFuZGxlU29ja2V0KHNvY2tldCwgaW8sIHN0b3JlcykpXG5cbmV4cG9ydCBkZWZhdWx0IHNlcnZlclxuIl19
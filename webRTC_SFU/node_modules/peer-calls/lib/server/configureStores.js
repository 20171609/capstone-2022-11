"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var debug_1 = __importDefault(require("debug"));
var ioredis_1 = __importDefault(require("ioredis"));
var socket_io_redis_1 = __importDefault(require("socket.io-redis"));
var store_1 = require("./store");
var debug = debug_1["default"]('peercalls');
function configureStores(io, config) {
    if (config === void 0) { config = { type: 'memory' }; }
    switch (config.type) {
        case 'redis':
            debug('Using redis store: %s:%s', config.host, config.port);
            configureRedis(io, config);
            return {
                socketIdByUserId: new store_1.RedisStore(createRedisClient(config), [config.prefix, 'socketIdByUserId'].join(':')),
                userIdBySocketId: new store_1.RedisStore(createRedisClient(config), [config.prefix, 'socketIdByUserId'].join(':'))
            };
        default:
            debug('Using in-memory store');
            return {
                socketIdByUserId: new store_1.MemoryStore(),
                userIdBySocketId: new store_1.MemoryStore()
            };
    }
}
exports.configureStores = configureStores;
function configureRedis(io, config) {
    var pubClient = createRedisClient(config);
    var subClient = createRedisClient(config);
    io.adapter(socket_io_redis_1["default"]({
        key: 'peercalls',
        pubClient: pubClient,
        subClient: subClient
    }));
}
function createRedisClient(config) {
    return new ioredis_1["default"]({
        host: config.host,
        port: config.port
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlU3RvcmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci9jb25maWd1cmVTdG9yZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBMEI7QUFDMUIsb0RBQTJCO0FBQzNCLG9FQUEwQztBQUcxQyxpQ0FBaUQ7QUFFakQsSUFBTSxLQUFLLEdBQUcsa0JBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUVqQyxTQUFnQixlQUFlLENBQzdCLEVBQW1CLEVBQ25CLE1BQXVDO0lBQXZDLHVCQUFBLEVBQUEsV0FBd0IsSUFBSSxFQUFFLFFBQVEsRUFBQztJQUV2QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxPQUFPO1lBQ1YsS0FBSyxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzNELGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDMUIsT0FBTztnQkFDTCxnQkFBZ0IsRUFBRSxJQUFJLGtCQUFVLENBQzlCLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUN6QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzlDO2dCQUNELGdCQUFnQixFQUFFLElBQUksa0JBQVUsQ0FDOUIsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQ3pCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDOUM7YUFDRixDQUFBO1FBQ0g7WUFDRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtZQUM5QixPQUFPO2dCQUNMLGdCQUFnQixFQUFFLElBQUksbUJBQVcsRUFBRTtnQkFDbkMsZ0JBQWdCLEVBQUUsSUFBSSxtQkFBVyxFQUFFO2FBQ3BDLENBQUE7S0FDSjtBQUNILENBQUM7QUF6QkQsMENBeUJDO0FBRUQsU0FBUyxjQUFjLENBQ3JCLEVBQW1CLEVBQ25CLE1BQXdCO0lBRXhCLElBQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLElBQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLEVBQUUsQ0FBQyxPQUFPLENBQUMsNEJBQVksQ0FBQztRQUN0QixHQUFHLEVBQUUsV0FBVztRQUNoQixTQUFTLFdBQUE7UUFDVCxTQUFTLFdBQUE7S0FDVixDQUFDLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQXdCO0lBQ2pELE9BQU8sSUFBSSxvQkFBSyxDQUFDO1FBQ2YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1FBQ2pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtLQUNsQixDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcbmltcG9ydCBSZWRpcyBmcm9tICdpb3JlZGlzJ1xuaW1wb3J0IHJlZGlzQWRhcHRlciBmcm9tICdzb2NrZXQuaW8tcmVkaXMnXG5pbXBvcnQgeyBTdG9yZUNvbmZpZywgU3RvcmVSZWRpc0NvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgU3RvcmVzIH0gZnJvbSAnLi9zb2NrZXQnXG5pbXBvcnQgeyBNZW1vcnlTdG9yZSwgUmVkaXNTdG9yZSB9IGZyb20gJy4vc3RvcmUnXG5cbmNvbnN0IGRlYnVnID0gX2RlYnVnKCdwZWVyY2FsbHMnKVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlU3RvcmVzKFxuICBpbzogU29ja2V0SU8uU2VydmVyLFxuICBjb25maWc6IFN0b3JlQ29uZmlnID0geyB0eXBlOiAnbWVtb3J5J30sXG4pOiBTdG9yZXMge1xuICBzd2l0Y2ggKGNvbmZpZy50eXBlKSB7XG4gICAgY2FzZSAncmVkaXMnOlxuICAgICAgZGVidWcoJ1VzaW5nIHJlZGlzIHN0b3JlOiAlczolcycsIGNvbmZpZy5ob3N0LCBjb25maWcucG9ydClcbiAgICAgIGNvbmZpZ3VyZVJlZGlzKGlvLCBjb25maWcpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb2NrZXRJZEJ5VXNlcklkOiBuZXcgUmVkaXNTdG9yZShcbiAgICAgICAgICBjcmVhdGVSZWRpc0NsaWVudChjb25maWcpLFxuICAgICAgICAgIFtjb25maWcucHJlZml4LCAnc29ja2V0SWRCeVVzZXJJZCddLmpvaW4oJzonKSxcbiAgICAgICAgKSxcbiAgICAgICAgdXNlcklkQnlTb2NrZXRJZDogbmV3IFJlZGlzU3RvcmUoXG4gICAgICAgICAgY3JlYXRlUmVkaXNDbGllbnQoY29uZmlnKSxcbiAgICAgICAgICBbY29uZmlnLnByZWZpeCwgJ3NvY2tldElkQnlVc2VySWQnXS5qb2luKCc6JyksXG4gICAgICAgICksXG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGRlYnVnKCdVc2luZyBpbi1tZW1vcnkgc3RvcmUnKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc29ja2V0SWRCeVVzZXJJZDogbmV3IE1lbW9yeVN0b3JlKCksXG4gICAgICAgIHVzZXJJZEJ5U29ja2V0SWQ6IG5ldyBNZW1vcnlTdG9yZSgpLFxuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVJlZGlzKFxuICBpbzogU29ja2V0SU8uU2VydmVyLFxuICBjb25maWc6IFN0b3JlUmVkaXNDb25maWcsXG4pIHtcbiAgY29uc3QgcHViQ2xpZW50ID0gY3JlYXRlUmVkaXNDbGllbnQoY29uZmlnKVxuICBjb25zdCBzdWJDbGllbnQgPSBjcmVhdGVSZWRpc0NsaWVudChjb25maWcpXG4gIGlvLmFkYXB0ZXIocmVkaXNBZGFwdGVyKHtcbiAgICBrZXk6ICdwZWVyY2FsbHMnLFxuICAgIHB1YkNsaWVudCxcbiAgICBzdWJDbGllbnQsXG4gIH0pKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWRpc0NsaWVudChjb25maWc6IFN0b3JlUmVkaXNDb25maWcpIHtcbiAgcmV0dXJuIG5ldyBSZWRpcyh7XG4gICAgaG9zdDogY29uZmlnLmhvc3QsXG4gICAgcG9ydDogY29uZmlnLnBvcnQsXG4gIH0pXG59XG4iXX0=
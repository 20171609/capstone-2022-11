using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Photon.Realtime;
using Photon.Pun;
using TMPro;
using Hashtable = ExitGames.Client.Photon.Hashtable;

public class NetworkManager : MonoBehaviourPunCallbacks
{
    private string gameVersion = "1"; // 게임 버전

    public TextMeshProUGUI connectionInfoText; // 네트워크 정보를 표시할 텍스트
    public Button joinButton; // 룸 접속 버튼

    public string roomName = "MetaBuskingPark";

    // Start is called before the first frame update
    void Start()
    {
        //접속에 필요한 정보 (게임 버전) 설정
        PhotonNetwork.GameVersion = this.gameVersion;
        //설정한 정보로 마스터 서버 접속 시도
        PhotonNetwork.ConnectUsingSettings();

        this.joinButton.interactable = false;
        this.connectionInfoText.text = "마스터 서버에 접속중...";

    }

    // 마스터 서버 접속 성공시 자동 실행
    public override void OnConnectedToMaster()
    {
        this.joinButton.interactable = true;
        this.connectionInfoText.text = "온라인 : 마스터 서버와 연결 됨";

    }

    // 마스터 서버 접속 실패시 자동 실행
    public override void OnDisconnected(DisconnectCause cause)
    {
        this.joinButton.interactable = false;
        this.connectionInfoText.text = "오프라인 : 마스터 서버와 연결되지 않음\n 접속 재시도중... ";
        //설정한 정보로 마스터 서버 접속 시도
        PhotonNetwork.ConnectUsingSettings();
    }

    // 룸 접속 시도
    public void Connect()
    {
        // 중복 접속 막기
        this.joinButton.interactable = false;

        // 마스터 서버에 접속 중이라면
        if (PhotonNetwork.IsConnected)
        {
            //룸에 접속한다.
            this.connectionInfoText.text = "룸에 접속....";
            //PhotonNetwork.JoinRandomRoom();

            // 방 만들기
                PhotonNetwork.CreateRoom(roomName, new RoomOptions { MaxPlayers = 100 });

        }
        else
        {
            this.connectionInfoText.text = "오프라인 : 마스터 서버와 연결 끊김 \n 다시 접속 시도합니다.";
            //설정한 정보로 마스터 서버 접속 시도
            PhotonNetwork.ConnectUsingSettings();
        }
    }

    public override void OnCreateRoomFailed(short returnCode, string message)
    {
        if (returnCode == 32766)
            PhotonNetwork.JoinRoom(roomName);

        else
            Debug.Log("방 생성 실패");
    }

    public override void OnCreatedRoom()
    {
        Debug.Log("방 생성 성공");
    }

    // 룸에 참가 완료된 경우 자동 실행
    public override void OnJoinedRoom()
    {

        this.connectionInfoText.text = "방 참가 성공!";

        //모든 룸 참가자가 Main 씬을 로드하게 함
        PhotonNetwork.LoadLevel("03_Park");

        PhotonNetwork.LocalPlayer.NickName = UserData.Instance.user.nickname;
        Hashtable playerData = new Hashtable();

        playerData.Add("character", UserData.Instance.user.character);

        // 직접 전달로 해야함, setcustomproperties하면 남의 것이 들어옴
        PhotonNetwork.LocalPlayer.CustomProperties = playerData;

        // 얘도 해줘야 외형 동기화됨
        playerData["character"] = UserData.Instance.user.character;
        PhotonNetwork.LocalPlayer.SetCustomProperties(playerData);

    }
}
